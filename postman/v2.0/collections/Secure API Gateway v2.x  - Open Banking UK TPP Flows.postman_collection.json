{
	"info": {
		"_postman_id": "9deb2122-4df2-48b8-8fe7-e8b46e4c20f0",
		"name": "Secure API Gateway v2.x  - Open Banking UK TPP Flows",
		"description": "# Welcome to the Postman Collection for the Secure API Gateway, Open Banking Edition.\n\nThis collection can be used to try out the [Secure API Gateway](https://github.com/SecureApiGateway), Open Banking APIs. Requests made by this postman collection will be made against a UK Open Banking Test Facility created using the Secure API Gateway, hosted by ForgeRock.\n\nA UK Open Banking Test Facility is an implementation of the UK Open Banking specifications, backed by a 'Test Facility' Bank that returns representative error codes and API responses. A test Facility allows developers to build applications against a bank's APIs without having to use the live bank APIs. In other words it is a developer sandbox that allows FinTecs to develop applications against a safe representation of a bank's offered APIs. In the UK every financial insitution that offers open banking APIs must also offer a Test Facility.\n\nThe Secure API Gateway can also be used to build production Open Banking system, and to develop and deploy custom APIs secured to the same highly secure FAPI standards as Open Banking APIs.\n\nThe Secure API Gateway is an Open Source project inititated by ForgeRock. It uses ForgeRock's Identity Gateway and Identity Cloud to provide FAPI level **Identity and Access Management for your APIs**. It is intended to be used by ForgeRock customers wishing to develop highly secure APIs that are protected by;\n\n- Dynamic Client Registration - Use API endpoints to securely register a client to use the protected API. The client must have both TLS certificates and a Software Statment Assertion issued by a trusted directory\n- Mutual Auth TLS (MTLS) - client certs issued by a trusted directory are used to identify both client and server in the TLS transport layer encryption\n- Software Statement bound Access Tokens. Checks are made during API access to ensure that the MTLS certificate presented by the Api Client and the presented access_token are associated with the same software statement in the trusted directory\n    \n\n## Environment variables:\n\n- This is meant to be run with the environment **v2.x release cluster**\n    \n\n#### Variables Types:\n\nThere are two kind of variables used across this collection:\n\n- The upper case with dash variables (_**VAR-NAME**_) are used as constants dynamically in the requests and they need to be initialise with the proper values before run any collection request.\n- The lower case with underscore variables (_**dynamic_var_name**_) are created dynamically when a request is running and are used across the next requests, these variables are updated with the proper value depending of the request step. These variables can be deleted to reset the environment variables.\n    \n\n## Initialise the collection\n\nTo start sending request to **SAPI-G Open Banking edition**, make sure that you have set the **CURRENT VALUE** of below environment variables first:\n\n| **Variable** | **Description** | **INITIAL VALUE** |\n| --- | --- | --- |\n| ENVIRONMENT | Environment to send the request, this value will be replace in the FQDN variables defined. | dev |\n| IG-FQDN | Identity Gateway Host name | obdemo.{ENVIRONMENT}.forgerock.financial |\n| RCS-FQDN | Resource Consent service Host name | rcs.{ENVIRONMENT}.forgerock.financial |\n| RS-FQDN | Resource service Host name | rs.{ENVIRONMENT}.forgerock.financial |\n| IDENTITY-PLATFORM-FQDN | Identity platform Host name | iam.{ENVIRONMENT}.forgerock.financial |\n| REALM | Identity access management realm name | alpha |\n| API-VERSION | Api version for requests | v3.1.10 |\n| OB-SIGNING-KEY-ID | OB Directory Signing key Id | add kid to Current Value column -> |\n| TOKEN_ENDPOINT_AUTH_METHOD | The token_endpoint_auth_method to request during Dynamic Client Registration. To be FAPI compliant this must be tls_client_auth or private_key_jwt | tls_client_auth |\n| OB-SEAL-PRIVATE-KEY | OB Seal private key | add pem to Current Value column -> |\n| OB-SOFTWARE-ID | OB Directory Software Statement Client Id |  |\n| OB-SCOPES | Scopes expected by OB directory to obtain the access token from OB Authorisation server | ASPSPReadAccess TPPReadAccess AuthoritiesReadAccess |\n| OB-AUDIENCE | Auth resource identifier | [https://matls-sso.openbankingtest.org.uk/as/token.oauth2](https://matls-sso.openbankingtest.org.uk/as/token.oauth2) |\n| OB-TOKEN-URL | OB directory Access token endpoint | [https://matls-sso.openbankingtest.org.uk/as/token.oauth2](https://matls-sso.openbankingtest.org.uk/as/token.oauth2) |\n| OB-SSA-URL | OB directory endpoint to retrieve an SSA | [https://matls-dirapi.openbankingtest.org.uk](https://matls-dirapi.openbankingtest.org.uk) |\n| OB-ORGANIZATION-ID | OB directory Organisation ID | add Open Banking TPP Organization Id here to Current Value column -> |\n| X-FAPI-FINANCIAL-ID | Header value to trace the request across services | CONSTANT: STRING |\n| X-FAPI-CUSTOMER-LAST-LOGGED-TIME | Header value to trace the request across services | CONSTANT: DATETIME AS STRING |\n| X-FAPI-CUSTOMER-IP-ADDRESS | Header value to trace the request across services | CONSTANT: CUSTOMER IP ADDRESS |\n| X-FAPI-INTERACTION-ID | Header value to trace the request across services | CONSTANT: STRING |\n| END-USER-ACCOUNT-USER-ID | User ID created in the IDM platform for test purposes | 4737f9f9-fa0a-4159-bc61-7da31542e624 |\n| END-USER-ACCOUNT-USER-NAME | User Name created in the IDM platform for test purposes | CONSTANT: PSU USER NAME |\n| END-USER-ACCOUNT-PASSWORD | User password created in the IDM platform for test purposes | CONSTANT: PSU USER PASSWORD |\n\n> After set these variables you need initialise the collection running the",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26967479",
		"_collection_link": "https://cloud-forgerock.postman.co/workspace/Secure-API-Gateway---Releases~b7243dee-8f10-4848-b6a5-de1eafca2905/collection/24188142-9deb2122-4df2-48b8-8fe7-e8b46e4c20f0?action=share&source=collection_link&creator=26967479"
	},
	"item": [
		{
			"name": "1: Setup your environment",
			"item": [
				{
					"name": "Load JSRASign library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200)",
									"    pm.environment.set('jsrsasign_js', responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
							"protocol": "http",
							"host": [
								"kjur",
								"github",
								"io"
							],
							"path": [
								"jsrsasign",
								"jsrsasign-latest-all-min.js"
							]
						},
						"description": "This request loads a library that is used by postman requests in this collection. This request must be run once in order for later requests to succeed."
					},
					"response": []
				},
				{
					"name": "LoadJwsHelpers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200)",
									"    pm.environment.set('client_jws_helpers', responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://raw.githubusercontent.com/SecureApiGateway/secure-api-gateway-releases/master/postman/v2.0/postman_scripts/client_jws_helpers.js",
							"protocol": "https",
							"host": [
								"raw",
								"githubusercontent",
								"com"
							],
							"path": [
								"SecureApiGateway",
								"secure-api-gateway-releases",
								"master",
								"postman",
								"v2.0",
								"postman_scripts",
								"client_jws_helpers.js"
							]
						}
					},
					"response": []
				},
				{
					"name": "Openid Connect well known endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a json body\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"as_issuer_id\", data.issuer);",
									"postman.setEnvironmentVariable(\"as_introspection_endpoint\", data.introspection_endpoint);",
									"postman.setEnvironmentVariable(\"as_userinfo_endpoint\", data.userinfo_endpoint);",
									"postman.setEnvironmentVariable(\"as_authorization_endpoint\", data.authorization_endpoint);",
									"// build auth endpoint, of the form: /am/json/realms/root/realms/alpha/authenticate",
									"postman.setEnvironmentVariable(\"as_authentication_endpoint\", data.authorization_endpoint.replace(\"/am/oauth2/\", \"/am/json/\").replace(\"/authorize\", \"/authenticate\"));",
									"postman.setEnvironmentVariable(\"as_token_endpoint\", data.token_endpoint);",
									"postman.setEnvironmentVariable(\"aspsp_registration_endpoint\", data.registration_endpoint);",
									"",
									"console.log(pm.environment.get(\"as_authorization_endpoint\"))",
									"console.log(pm.environment.get(\"as_authentication_endpoint\"))",
									"",
									"// variable to store the psu_auth_code manually when the hibrid flow is used",
									"pm.environment.set(\"psu_auth_code\", \"\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IG-FQDN}}/am/oauth2/realms/root/realms/alpha/.well-known/openid-configuration",
							"protocol": "https",
							"host": [
								"{{IG-FQDN}}"
							],
							"path": [
								"am",
								"oauth2",
								"realms",
								"root",
								"realms",
								"alpha",
								".well-known",
								"openid-configuration"
							]
						},
						"description": "Get the AS discovery endpoints. This will load all the AS endpoints and constants into your postman environment."
					},
					"response": []
				}
			],
			"description": "The Secure API Gateway offers a number of endpoints that can be used to help client applications manage authentication and authorization as well as manipulate resources. Before we can register to use the Open Banking APIs the Api Client will need to obtain information from one of these endpoints.\n\n## The Openid Connect well-known endpoint.\n\nThis endpoint is covered by the following RFC specifcations document;\n\n[https://openid.net/specs/openid-connect-discovery-1_0.html](https://openid.net/specs/openid-connect-discovery-1_0.html)\n\nThis endpoint can be used to obtain the URLs to be used for authorization and authentication as well as the OAuth2/OIDC settings supported by the authorization server. A client of the APIs should use the links specified in this document rather than hard coding the URLs in the client application.\n\n## The Resource Server's discovery endpoint.\n\nThere returned json document contains all of the resources and endpoints via which they can be managed. Again, a client should use the contents of this response rather than hard coding urls into their applications.\n\nThis collection will make GET requests agains the Secure API Gateway deployment's Open ID Connect well known endpoint, and the resource server discovery endpoints. The responses from those requests will be used to initialise environment variables used through all the following requests. For example the token endpoint will be found in the response of the AS well_known endpoint.\n\n**NOTE:** You must run the requests in this section before trying any requests in later steps.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "2: Perform Dynamic Client Registration (DCR)",
			"item": [
				{
					"name": "2.1a Create Registration Request JWT using Secure API Gateway issued test Software Statement",
					"item": [
						{
							"name": "2.1a.1 Get test certificates JWKS from Secure API Gateway",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"ApiClientJWKs\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"org_id\": \"PSDGB-FFA-5f563e89742b2800145c7da1\",\n    \"org_name\": \"Acme Fintech\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/issuecert",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"issuecert"
									]
								},
								"description": "The Secure API Gateway's Trusted Directory functionality works in a different way from a production grade Trusted Directory such as the Open Banking Test Directory. In a production grade directory you, as a participant in the trusted ecosystem, would typically create a Software statement by providing the necessary information to do so. There will typically be some background checks and validation to ensure that no bad actors are entering the trusted ecosystem.\n\nOnce the Software Statement has been created it is then usually necessary for the participant to create a [Certificate Signing Request](https://www.rfc-editor.org/rfc/rfc4211) and upload it to the trusted directory where a public key will be created, signed and made available for download. The public key will be made available in JWKS form at a jwks_uri. This way the private key is kept by the client and can be protected using best key management practices, while the public key is available for other participants in the ecosystem to validate signatures etc against.\n\nThe participant will need to create two sets of keys;\n\na) Transport Keys - used for Mutual Authentication Transport Layer Security (MaTLS). This allows both client and server to identifiy and trust each other, based on their shared trust of the Trusted Directory in which the Software Statement is managed.\n\nb) Signing Keys - Used to create JSON Web Signatures used for authenticity, integrity and non-repudiation purposes.\n\nA Software Statement Assertion (SSA) is a JSON representation of the software statement signed by the Trusted Directory. It is in a JWS format. A Trusted Directory will also provide a secure mechanism to obtain an SSA for a specific Software Statement also.\n\n## The Secure API Gateway's Trusted Directory\n\nBecause it is only for use in demonstration systems and for API providers to use during development of API systems the Secure API Gateway Trusted Directory works in a convenient but insecure way."
							},
							"response": [
								{
									"name": "2.1a.1 Get test certificates JWKS from Secure API Gateway",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"org_id\": \"PSDGB-FFA-5f563e89742b2800145c7da1\",\n    \"org_name\": \"Acme Fintech\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://sapig.ob-sandbox-v1.forgerock.financial/jwkms/apiclient/issuecert",
											"protocol": "https",
											"host": [
												"sapig",
												"ob-sandbox-v1",
												"forgerock",
												"financial"
											],
											"path": [
												"jwkms",
												"apiclient",
												"issuecert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 13 Apr 2023 15:00:16 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/jwk+json"
										},
										{
											"key": "Content-Length",
											"value": "6653"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15724800; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"keys\": [\n        {\n            \"d\": \"\",\n            \"e\": \"AQAB\",\n            \"use\": \"tls\",\n            \"kid\": \"135929234658089375468080240551617423292\",\n            \"x5c\": [\n                \"redacted\"\n            ],\n            \"dp\": \"redacted\",\n            \"dq\": \"redacted\",\n            \"n\": \"redacted\",\n            \"p\": \"redacted\",\n            \"kty\": \"RSA\",\n            \"x5t#S256\": \"nQFrs9gyCRIGlpIwwFoammLcS9q-A4LhfU1OxJrIBDg\",\n            \"q\": \"redacted\",\n            \"qi\": \"redacted\",\n            \"alg\": \"PS256\"\n        },\n        {\n            \"d\": \"redacted\",\n            \"e\": \"AQAB\",\n            \"use\": \"sig\",\n            \"kid\": \"197557027442692691470600619865915561103\",\n            \"x5c\": [\n                \"redacted\"\n            ],\n            \"dp\": \"redacted\",\n            \"dq\": \"redacted\",\n            \"n\": \"redacted\",\n            \"p\": \"redacted\",\n            \"kty\": \"RSA\",\n            \"x5t#S256\": \"cgrAd53bol9AC0XsikwMvHTRbAkUy6q0jOuqLfK67yg\",\n            \"q\": \"redacted\",\n            \"qi\": \"redacted\",\n            \"alg\": \"PS256\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "2.1a.2 Get TLS cert key/pem from JWKS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{ApiClientJWKs}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/gettlscert",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"gettlscert"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1a.3 Get SIG cert key/pem from JWKS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{ApiClientJWKs}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/getsigcert",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"getsigcert"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1a.4 Generate SSA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"ssa_jwt\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"var software_id = uuid.v4();",
											"console.log(\"software_id is \" + software_id);",
											"postman.setEnvironmentVariable('generated_software_id', software_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"software_id\": \"{{generated_software_id}}\",\n    \"software_client_name\": \"Secure API Gateway test generated client\",\n    \"software_client_id\": \"{{generated_software_id}}\",\n    \"software_tos_uri\": \"https://github.com/SecureApiGateway\",\n    \"software_client_description\": \"Open Banking UK TPP Flows Postman Client\",\n    \"software_redirect_uris\": [\"https://www.google.com\", \"https://postman-echo.com/get\"],\n    \"software_policy_uri\": \"https://github.com/SecureApiGateway\",\n    \"software_logo_uri\": \"https://avatars.githubusercontent.com/u/74596995?s=96&v=4\",\n    \"software_roles\": [    \n        \"DATA\",\n        \"AISP\",\n        \"CBPII\",\n        \"PISP\"],\n    \"software_jwks\": {{ApiClientJWKs}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/getssa",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"getssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.1a.5 Generate registration request JWT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('exp',(new Date().getTime() / 1000) + 60*5);",
											"var SSA_JWT_SERIALISED = \"\\\"\" + pm.variables.get('SSA_JWT') + \"\\\"\";",
											"console.log(\"SSA_JWT_SERIALISED: \" + SSA_JWT_SERIALISED);",
											"postman.setEnvironmentVariable('SSA_JWT_SERIALISED', SSA_JWT_SERIALISED);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"dynamic_registration_request\", responseBody);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "issuerId",
										"value": "{{software_statement_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"claims\": { \n        \"iss\": \"softwareid\",\n        \"exp\": {{exp}},\n        \"scope\": \"openid accounts payments\",\n        \"response_types\": [\n            \"code id_token\"\n        ],\n        \"redirect_uris\": [\n            \"https://www.google.com\",\n            \"https://postman-echo.com/get\"\n        ],\n        \"application_type\": \"web\",\n        \"subject_type\": \"pairwise\",\n        \"grant_types\": [\n        \"authorization_code\",\n        \"refresh_token\",\n        \"client_credentials\"\n        ],\n        \"software_statement\": \"{{ssa_jwt}}\",\n        \"token_endpoint_auth_method\": \"private_key_jwt\",\n        \"token_endpoint_auth_signing_alg\": \"PS256\",\n        \"id_token_signed_response_alg\": \"PS256\",\n        \"request_object_signing_alg\": \"PS256\",\n        \"request_object_encryption_alg\": \"RSA-OAEP-256\",\n        \"request_object_encryption_enc\": \"A128CBC-HS256\"\n    },\n  \"jwks\": {{ApiClientJWKs}}\n}"
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/signclaims",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"signclaims"
									]
								}
							},
							"response": []
						}
					],
					"description": "In these steps we will use the Secure API Gateway's built in Trusted Directory to obtain the transport and signing keys and the software statement assertion that we will need to perform Dynamic Client Registration. If you haven't already done so, now would be a great time to have a read of [this article](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-Dynamic-Client-Registration) that will give you an overview of the Dynamic Client Registration process.\n\nIf you have already registered with the Open Banking test Directory, you should use that trusted directory to perform dynamic client registration by following the steps in section 2.1b.\n\nIf you have not registered with the Open Banking Test Directory, then it is possible to register using the Secure API Gateway's own Trusted Directory by following the steps in this section.\n\nYou can read more about this trusted directory [here](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-the-Secure-API-Gateway's-Trusted-Directory)."
				},
				{
					"name": "2.1b Create Registration Request JWT using the Open Banking Test Directory",
					"item": [
						{
							"name": "Step 2.1: Acquire access Token from OB Test Directory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"",
											"var jwtSecret = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"console.log(\"signing key: \" + jwtSecret)",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'RS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get('OB-SOFTWARE-ID') || '',",
											"\t'sub': pm.environment.get('OB-SOFTWARE-ID') || '',",
											"\t'scope': pm.environment.get('OB-SCOPES') || '',",
											"\t'exp': currentTimestamp + 180,",
											"\t'aud': pm.environment.get('OB-AUDIENCE') || '',",
											"    \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token, default alg = RS256",
											"//var signedToken = pmlib.jwtSign(jwtSecret, data, header, exp = 600, alg = pmlib.DEFAULT_ALG)",
											"var signedToken =  KJUR.jws.JWS.sign(null, header, data, jwtSecret);",
											"console.log(signedToken)",
											"pm.environment.set('ob_jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have access_token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"ob_access_token\", data.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{OB-SOFTWARE-ID}}",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{ob_jwt_signed}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{OB-SCOPES}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{OB-TOKEN-URL}}",
									"host": [
										"{{OB-TOKEN-URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2.2: get SSA associated with Transport Cert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response must be a string and status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"var data = pm.response.text()",
											"console.log(\"software statement: \" + data)",
											"",
											"postman.setEnvironmentVariable(\"ssa_jwt\", data);",
											"var software_id = pm.environment.get(\"OB-SOFTWARE-ID\")",
											"postman.setEnvironmentVariable(\"generated_software_id\", software_id)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ob_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/jws+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{OB-SSA-URL}}/organisation/tpp/{{OB-ORGANIZATION-ID}}/software-statement/{{OB-SOFTWARE-ID}}/software-statement-assertion",
									"host": [
										"{{OB-SSA-URL}}"
									],
									"path": [
										"organisation",
										"tpp",
										"{{OB-ORGANIZATION-ID}}",
										"software-statement",
										"{{OB-SOFTWARE-ID}}",
										"software-statement-assertion"
									]
								}
							},
							"response": []
						}
					],
					"description": "## The Open Banking Test/Sandbox Directory\n\nIn these steps we will use the Open Banking Test/Sandbox Directory to obtain the transport and signing keys and the software statement assertion that we will need to perform Dynamic Client Registration. If you haven't already done so, now would be a great time to have a read of [this article](https://github.com/SecureApiGateway/SecureApiGateway/wiki/Dynamic-Client-Registration) that will give you an overview of the Dynamic Client Registration process.\n\nThis directory is run and operated by the Open Banking Implementation Entity (OBIE). You can sign up to use the directory, or login if you are already signed up [here](https://directory.openbanking.org.uk/s/login/). This is the Directory in which TPPs will need to manage software statements in order to register with real financial institution's Open Banking Test facilities.\n\nThe signup process can take a significant amount of time. Financial institutions looking to implement a protected API will find that providing developers with Open Banking Software Statements and certificates becomes afor use when building the system to be an overhead. For that reason the Secure API Gateway can be configured to act as a Trusted Directory.\n\nIf you have access to the Open Banking Test directory and have a Software Statement in that directory that you would like to use to register and use this API you can follow the steps in this section. If you don't have access to the Open Banking Test Directory you can follow the steps in section 2.1.a an use the Secure API Gateway trusted directory."
				},
				{
					"name": "2.2: Perform Dynamic Client Registration",
					"item": [
						{
							"name": "3.1: TPP performs registration using registration request jwt",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request",
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') ;",
											"console.log(privateKey)",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'PS256',",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || ''",
											"};",
											"",
											"var data = {",
											"    'iss': pm.environment.get('generated_software_id'),",
											"    'exp': currentTimestamp + 180,",
											"    'scope': \"openid accounts payments eventpolling fundsconfirmations\",",
											"    'response_types': [\"code id_token\"],",
											"    'redirect_uris': [\"https://postman-echo.com/get\"],",
											"    'application_type': \"web\",",
											"    'grant_types': [\"authorization_code\", \"refresh_token\", \"client_credentials\"],",
											"    'software_statement': pm.environment.get('ssa_jwt'),",
											"    'token_endpoint_auth_signing_alg': \"PS256\",",
											"    'id_token_signed_response_alg': \"PS256\",",
											"    'request_object_signing_alg': \"PS256\",",
											"    'request_object_encryption_alg': \"RSA-OAEP-256\",",
											"    'request_object_encryption_enc': \"A128CBC-HS256\",",
											"    'subject_type' : 'pairwise'",
											"}",
											"",
											"var token_endpoint_auth_method_requested = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
											"",
											"data.token_endpoint_auth_method = token_endpoint_auth_method_requested;",
											"console.info(\"Requesting token_endpoint_auth_method of \" + data.token_endpoint_auth_method);",
											"if(token_endpoint_auth_method_requested === \"tls_client_auth\"){",
											"    data.tls_client_auth_subject_dn = pm.environment.get(\"OB-TLS-CERT-DN\");",
											"}",
											"console.log(\"Client Dynamic Registration request jwt claims: \" + JSON.stringify(data));",
											"var jwt =  KJUR.jws.JWS.sign(\"PS256\", header, data, privateKey);",
											"pm.environment.set('dynamic_registration_request', jwt)",
											"pm.environment.set('dynamic_registration_request_raw_data', JSON.stringify(data))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"if (pm.expect(responseBody).not.eql(undefined)){",
											"    var data = JSON.parse(responseBody);",
											"    if (data.client_id !== null){",
											"        pm.environment.set(\"client_id\", data.client_id);",
											"        pm.environment.set(\"client_secret\", data.client_secret);",
											"        console.log(\"Redirect uris found: \" + data.redirect_uris);",
											"        if(data.redirect_uris.length > 1) {",
											"            console.log(\"setting the first redirect_uri found: \" + data.redirect_uris[0]);",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        } else {",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        }",
											"        pm.environment.set(\"registration_access_token\", data.registration_access_token)",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{dynamic_registration_request}}"
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.2: Get TPP Dynamic Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registration_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}/{{client_id}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									],
									"path": [
										"{{client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3: Update TPP Dynamic Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request",
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') ;",
											"console.log(privateKey)",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"// Update the original dcr",
											"var data = JSON.parse(pm.environment.get('dynamic_registration_request_raw_data'))",
											"",
											"data.client_id = pm.environment.get('client_id')",
											"data.exp = currentTimestamp + 180",
											"data.redirect_uris = [pm.environment.get('client_redirect_uri')]",
											"data.software_statement = pm.environment.get('ssa_jwt')",
											"",
											"console.log(\"data\", data)",
											"// sign token",
											"var dynamic_registration_jws =  KJUR.jws.JWS.sign(\"PS256\", header, data, privateKey);",
											"pm.environment.set('dynamic_registration_request_updated', dynamic_registration_jws)",
											"console.log('Signed dynamic_registration_request', dynamic_registration_jws)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 200 and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"if (pm.expect(responseBody).not.eql(undefined)){",
											"    var data = JSON.parse(responseBody);",
											"    if (data.client_id !== null){",
											"        pm.environment.set(\"client_id\", data.client_id);",
											"        pm.environment.set(\"client_secret\", data.client_secret);",
											"        console.log(\"Redirect uris found: \" + data.redirect_uris);",
											"        if(data.redirect_uris.length > 1) {",
											"            console.log(\"setting the first redirect_uri found: \" + data.redirect_uris[0]);",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        } else {",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        }",
											"        pm.environment.set(\"registration_access_token\", data.registration_access_token)",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registration_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{dynamic_registration_request_updated}}"
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}/{{client_id}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									],
									"path": [
										"{{client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 Delete Dynamic Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 204 and no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registration_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}/{{client_id}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									],
									"path": [
										"{{client_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Before an Api Client can use the protected API they must register. Registration is the process whereby the API Client identifies itself to the API Provider and the API Provider creates an OAuth2 client definition for the Api Client. The Api Provider will return details to the Api Client to allow them to access the APIs.\n\nTo understand this process is will be helpful to read [this article](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-Dynamic-Client-Registration). It explains the approach that the Secure API Gateway takes to Dynamic Client Registration and the actors and resources involved in this process. Dynamic Client Registration is a fairly complex topic and a good understanding of the bigger picture will be necessary to understand the choices we can make and the individual steps that we will take to register to use the Open Banking Test Facility APIs.\n\nThe API that we will be testing is configured to trust two Trusted Directories;  \n\\- The Secure API Gateway Trusted Directory  \n\\- The Open Banking Test/Sandbox Directory\n\n**Note:** If you have already registered with the Open Banking test Directory, you should use that trusted directory to perform dynamic client registration.\n\nIf you have not registered with the Open Banking Test Directory, then it is possible to register using the Secure API Gateway's own Trusted Directory. You can read more about this trusted directory [here](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-the-Secure-API-Gateway's-Trusted-Directory)."
		},
		{
			"name": "3: Get resources and endpoint URIs",
			"item": [
				{
					"name": "3.1: Resource Server's discovery document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a json body\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"To have payments and accounts apis\", function () {",
									"    pm.expect(data.Data.PaymentInitiationAPI).to.not.be.null;",
									"    pm.expect(data.Data.AccountAndTransactionAPI).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-OpenIDM-Username",
								"value": "openidm-admin",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-OpenIDM-Password",
								"value": "openidm-admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/discovery",
							"protocol": "https",
							"host": [
								"{{MTLS-IG-FQDN}}"
							],
							"path": [
								"rs",
								"open-banking",
								"discovery"
							]
						},
						"description": "Call the RS discovery endpoints. This will load all the OB endpoints into your postman environment"
					},
					"response": [
						{
							"name": "Resource Server's discovery document",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-OpenIDM-Username",
										"value": "openidm-admin",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-OpenIDM-Password",
										"value": "openidm-admin",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/discovery",
									"protocol": "https",
									"host": [
										"mtls",
										"sapig",
										"ob-sandbox-v1",
										"forgerock",
										"financial"
									],
									"path": [
										"rs",
										"open-banking",
										"discovery"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 13 Apr 2023 14:08:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "20760"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-fapi-interaction-id",
									"value": "1e2037e4-6771-4e62-8d80-58df42e5854f"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								}
							],
							"cookie": [],
							"body": "{\n    \"Data\": {\n        \"FinancialId\": \"0015800001041REAAY\",\n        \"PaymentInitiationAPI\": [\n            {\n                \"Version\": \"v3.1.10\",\n                \"Links\": {\n                    \"@type\": \"GenericOBDiscoveryAPILinks\",\n                    \"links\": {\n                        \"GetDomesticScheduledPaymentDomesticPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details\",\n                        \"CreateDomesticPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments\",\n                        \"CreateFilePayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments\",\n                        \"CreateInternationalStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders\",\n                        \"GetInternationalPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}\",\n                        \"GetInternationalStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}\",\n                        \"GetInternationalScheduledPaymentPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details\",\n                        \"CreateInternationalPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments\",\n                        \"CreateDomesticVrpPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps\",\n                        \"GetDomesticStandingOrderDomesticStandingOrderIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}/payment-details\",\n                        \"GetInternationalStandingOrderInternationalStandingOrderIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details\",\n                        \"CreateDomesticScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments\",\n                        \"GetDomesticVrpPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}/payment-details\",\n                        \"CreateDomesticStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders\",\n                        \"GetDomesticPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}\",\n                        \"GetDomesticScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}\",\n                        \"GetFilePayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments/{FilePaymentId}\",\n                        \"CreateInternationalScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments\",\n                        \"GetDomesticPaymentDomesticPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}/payment-details\",\n                        \"GetInternationalScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}\",\n                        \"GetInternationalPaymentInternationalPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}/payment-details\",\n                        \"GetDomesticStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}\",\n                        \"GetDomesticVrpPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}\",\n                        \"CreateDomesticPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents\",\n                        \"GetDomesticPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}\",\n                        \"GetDomesticPaymentConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"CreateDomesticScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents\",\n                        \"GetDomesticScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents/{ConsentId}\",\n                        \"CreateDomesticStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents\",\n                        \"GetDomesticStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents/{ConsentId}\",\n                        \"CreateInternationalPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents\",\n                        \"GetInternationalPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}\",\n                        \"GetInternationalPaymentConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"CreateInternationalScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents\",\n                        \"GetInternationalScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}\",\n                        \"GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"CreateInternationalStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents\",\n                        \"GetInternationalStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents/{ConsentId}\",\n                        \"CreateFilePaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents\",\n                        \"CreateFilePaymentFile\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"GetFilePaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}\",\n                        \"GetFilePaymentFile\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"CreateDomesticVRPConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents\",\n                        \"GetDomesticVRPConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"DeleteDomesticVRPConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"GetDomesticVRPConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}/funds-confirmation\"\n                    },\n                    \"linkValues\": [\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments/{FilePaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}/funds-confirmation\"\n                    ]\n                }\n            }\n        ],\n        \"AccountAndTransactionAPI\": [\n            {\n                \"Version\": \"v3.1.10\",\n                \"Links\": {\n                    \"@type\": \"GenericOBDiscoveryAPILinks\",\n                    \"links\": {\n                        \"GetParty\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/party\",\n                        \"GetAccountStatements\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements\",\n                        \"GetScheduledPayments\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/scheduled-payments\",\n                        \"GetAccountParties\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/parties\",\n                        \"GetTransactions\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/transactions\",\n                        \"GetProducts\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/products\",\n                        \"GetAccountTransactions\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/transactions\",\n                        \"GetAccountScheduledPayments\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/scheduled-payments\",\n                        \"GetAccountStatementFile\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/file\",\n                        \"GetAccounts\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts\",\n                        \"GetAccountStandingOrders\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/standing-orders\",\n                        \"GetAccountBeneficiaries\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/beneficiaries\",\n                        \"GetBalances\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/balances\",\n                        \"GetAccount\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}\",\n                        \"GetAccountProduct\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/product\",\n                        \"GetOffers\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/offers\",\n                        \"GetBeneficiaries\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/beneficiaries\",\n                        \"GetAccountStatementTransactions\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/transactions\",\n                        \"GetAccountOffers\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/offers\",\n                        \"GetAccountDirectDebits\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/direct-debits\",\n                        \"GetStatements\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/statements\",\n                        \"GetAccountBalances\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/balances\",\n                        \"GetAccountParty\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/party\",\n                        \"GetStandingOrders\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/standing-orders\",\n                        \"GetAccountStatement\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}\",\n                        \"GetDirectDebits\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/direct-debits\",\n                        \"CreateAccountAccessConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents\",\n                        \"GetAccountAccessConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\",\n                        \"DeleteAccountAccessConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\"\n                    },\n                    \"linkValues\": [\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/party\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/parties\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/transactions\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/products\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/transactions\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/file\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/beneficiaries\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/balances\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/product\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/offers\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/beneficiaries\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/transactions\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/offers\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/direct-debits\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/statements\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/balances\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/party\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/direct-debits\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\"\n                    ]\n                }\n            }\n        ],\n        \"FundsConfirmationAPI\": null,\n        \"EventNotificationAPI\": null\n    }\n}"
						}
					]
				}
			],
			"description": "You have performed Dynamic Client Registration and have configured Postman to use your transport certificates. You can now use the Secure API Gateway's Resource Server Discovery Endpoint to discover all of the resources we can manage via the REST API and the URIs we must use to do so.\n\nIn this case the returned resources and endpoints will be the [UK Open Banking read write api specifications](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/read-write-data-api-profile.html). However, you could use the Secure API Gateway to create custom APIs and include them in the Resource Server Discovery response.\n\n## The Resource Server's Discovery Endpoint.\n\nThe returned json document contains all of the resources and the endpoint URIs via which they can be managed. A client should use the contents of this response rather than hard coding urls into their applications."
		},
		{
			"name": "4: Accounts Flows",
			"item": [
				{
					"name": "4.1: Create Consent Request and Give Consent",
					"item": [
						{
							"name": "4.1 a - suplementary endpoints",
							"item": [
								{
									"name": "Get  Account Access Consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{client_credential_access_token_with_account_scope}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/account-access-consents/{{account_intent_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"aisp",
												"account-access-consents",
												"{{account_intent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Account Access Intent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response must be 204 and no content\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "Bearer {{client_credential_access_token_with_account_scope}}"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/account-access-consents/{{account_intent_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"aisp",
												"account-access-consents",
												"{{account_intent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Refresh access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"postman.setEnvironmentVariable(\"access_token_with_account_access_consent\", data.access_token);",
													"postman.setEnvironmentVariable(\"refresh_token_with_account_access_consent\", data.refresh_token);",
													"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"//eval(pm.environment.get('pmlib_code'))",
													"eval(pm.environment.get(\"jsrsasign_js\"));",
													"eval(pm.environment.get(\"client_jws_helpers\"));",
													"",
													"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
													"if(token_endpoint_auth_method === \"tls_client_auth\"){",
													"    console.log(\"Obtaining OAuth2 token with a client_credential grant type, using tls_client_auth as the Token Endpoint Auth Method.\")",
													"    pm.request.body.urlencoded.add({key: \"client_id\", value: pm.environment.get(\"client_id\")});",
													"} else if (token_endpoint_auth_method === \"private_key_jwt\"){",
													"    console.log(\"Obtaining OAuth2 token with a client_credential grant type, using the private_key_jwt as the Token Endpoint Auth Method.\")",
													"    pm.request.body.urlencoded.add({ key: \"client_assertion_type\", value: \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\"});",
													"    var signedToken = client_jws_helpers.getClientCredentialJwt();",
													"    console.log(\"signedToken is : \" + signedToken);",
													"    pm.request.body.urlencoded.add({ key: \"client_assertion\", value: signedToken});",
													"} else {",
													"    var errorString = \"Unrecognised token_endpoint_auth_method. Please set an environment variable called TOKEN_ENDPOINT_AUTH_METHOD giving it the value of either tls_client_auth, or private_key_jwt\";",
													"    console.error(errorString);",
													"    throw Error(\"Unrecognised token_endpoint_auth_method. Please set an environment variable called TOKEN_ENDPOINT_AUTH_METHOD giving it the value of either tls_client_auth, or private_key_jwt\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_account_scope}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "refresh_token",
													"value": "{{refresh_token_with_account_access_consent}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{client_redirect_uri}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text",
													"disabled": true
												},
												{
													"key": "client_assertion",
													"value": "{{client_credential_jwt}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "client_id",
													"value": "{{client_id}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{as_token_endpoint}}",
											"host": [
												"{{as_token_endpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "4.1.1 create access_token with client_credential grant and accounts scope",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have an access token and id token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"    pm.expect(data.id_token).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"client_credential_access_token_with_account_scope\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"//eval(pm.environment.get('pmlib_code'))",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"",
											"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
											"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid accounts",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"description": "When using private_key_jwt, the www-form-urlencoded body must contain the key client_assertion_type with a value of urn:ietf:params:oauth:client-assertion-type:jwt-bearer. See rfc7523 for further details. \n\nSo that this collection can work with clients that use both private_key_jwt and tls_client_auth as the token_endpoint_auth_method, this key/value pair is added by the pre-request script if required.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"description": "When using private_key_jwt, the www-form-urlencoded body must contain the a client_assertion in the form of a client crendential JWT. See rfc7523 for further details. \n\nSo that this collection can work with clients that use both private_key_jwt and tls_client_auth as the token_endpoint_auth_method, this key/value pair is added by the pre-request script if required.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "When a client has registerd to use tls_client_auth, the www-form-urlencoded body must contain the OAuth2 client_id as returned from the Dynamic Client Registration request. \n\nSo that this collection can work with clients that use both private_key_jwt and tls_client_auth as the token_endpoint_auth_method, this key/value pair is added by the pre-request script if required.",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.2: CreateAccountAccessConsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 and return json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have a ConsentId id\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"Status is AwaitingAuthorisation\", function () {",
											"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
											"});",
											"",
											"postman.setEnvironmentVariable(\"account_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{client_credential_access_token_with_account_scope}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"Permissions\": [\n      \"ReadAccountsDetail\",\n      \"ReadBalances\",\n      \"ReadTransactionsDetail\",\n      \"ReadTransactionsCredits\",\n      \"ReadBeneficiariesDetail\",\n      \"ReadDirectDebits\",\n      \"ReadStandingOrdersDetail\",\n      \"ReadProducts\",\n      \"ReadOffers\",\n      \"ReadParty\",\n      \"ReadPartyPSU\",\n      \"ReadScheduledPaymentsDetail\",\n      \"ReadStatementsDetail\"\n    ],\n    \"ExpirationDateTime\": \"2019-08-01T00:00:00.000Z\",\n    \"TransactionFromDateTime\": \"2019-04-03T00:00:00.000Z\",\n    \"TransactionToDateTime\": \"2019-08-01T00:00:00.000Z\"\n  },\n  \"Risk\": {}\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/account-access-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"account-access-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.3 PSU gives consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"var consent_id = pm.environment.get(\"account_intent_id\")",
											"console.log(\"Creating authorize request with 'openid accounts' scope and consent_id '\" + consent_id + \"'\")",
											"var link = client_jws_helpers.createAuthorizeRequestUrl(\"openid accounts\", consent_id)",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.4 Obtain access_token with authorization_code grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_account_access_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"refresh_token_with_account_access_consent\", data.refresh_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"",
											"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
											"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "PASTE AUTH CODE HERE",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"description": "The redirect URI for the client",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"description": "When using private_key_jwt, the www-form-urlencoded body must contain the client_assertion_type key with a value of urn:ietf:params:oauth:client-assertion-type:jwt-bearer\n\nSo that this collection can work with clients that use both private_key_jwt and tls_client_auth as the token_endpoint_auth_method, this key/value pair is added by the pre-request script if required.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"description": "When using private_key_jwt, the www-form-urlencoded body must contain the a client_assertion in the form of a client crendential JWT. See rfc7523 for further details. \nSo that this collection can work with clients that use both private_key_jwt and tls_client_auth as the token_endpoint_auth_method, this key/value pair is added by the pre-request script if required.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"description": "Required when using tls_client_auth as a token_endpoint_auth_method. Added by pre-request script",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								},
								"description": "This flow uses the authentication code obtained from the Hybrid flow to obtain an access_token with an authorization_code grant type.  \n  \nThe authentication_code obtained during the hybrid flow needs to be copied from the redirect URL parameters and pasted into the body's 'code' value.\n\n  \nThe 'test' scripts for this request will set the following environment variables, so that the access token may be used to access the resources.\n\n\"access_token_with_account_access_consent\" - will hold the access token.  \n\"refresh_token_with_account_access_consent\" - will hold the refresh token."
							},
							"response": []
						}
					],
					"description": "In this step the TPP is using the Account Access Consent APIs to create a new account-access-consent resource. The consent object, when created, will have the status 'AwaitingAuthorisation'. The TPP will not be able to access any account information until the PSU (the bank account owner) has given their consent and the status has changed to 'Authorized'."
				},
				{
					"name": "4.4 TPP Gets Account Data on behalf of PSU",
					"item": [
						{
							"name": "GetAccounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 and return json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have a ConsentId id\", function () {",
											"    console.log(\"PSU has given access to \" + data.Data.Account.length + \" accounts\");",
											"    pm.expect(data.Data.Account.length).to.be.gte(2);",
											"});",
											"",
											"",
											"postman.setEnvironmentVariable(\"account_request_id\", data.Data.AccountRequestId);",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Account[0].AccountId);",
											"postman.setEnvironmentVariable(\"account_identification\", data.Data.Account[0].Account[0].Identification);",
											"postman.setEnvironmentVariable(\"account_name\", data.Data.Account[0].Account[0].Name);",
											"",
											"postman.setEnvironmentVariable(\"debtor_account_id\", data.Data.Account[1].AccountId);",
											"postman.setEnvironmentVariable(\"debtor_account_identification\", data.Data.Account[1].Account[0].Identification);",
											"postman.setEnvironmentVariable(\"debtor_account_name\", data.Data.Account[1].Account[0].Name);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}",
										"description": "Provide a guid to this call to allow tracing across systems",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Account[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBalances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Balance[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/balances",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/balances",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountBalances",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Balance[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/balances",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/balances",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetTransactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Transaction[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/v3.1/aisp/transactions",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/transactions",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountTransactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Transaction[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/transactions",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/transactions",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetBeneficiaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Beneficiary[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/beneficiaries",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/beneficiaries",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"beneficiaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountBeneficiaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Beneficiary[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/beneficiaries",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/beneficiaries",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"beneficiaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetDirectDebits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.DirectDebit[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/direct-debits",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/direct-debits",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountDirectDebits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.DirectDebit[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/direct-debits",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/direct-debits",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetStandingOrders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.StandingOrder[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/standing-orders",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/standing-orders",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"standing-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountStandingOrders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.StandingOrder[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/standing-orders",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/standing-orders",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"standing-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetProducts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Product[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/products",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/products",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountProducts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Product[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/product",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/product",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"product"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetOffers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"offer_id\", data.Data.Offer[0].OfferId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/offers",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/offers",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountOffers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"offer_id\", data.Data.Offer[0].OfferId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/offers",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/offers",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetParty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"party_id\", data.Data.Party.PartyId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/party",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/party",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"party"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountParty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"party_id\", data.Data.Party.PartyId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/party",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/party",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"party"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountParties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"party_id\", data.Data.Party.PartyId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/parties",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/parties",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"parties"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetScheduledPayments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"scheduled_payment_id\", data.Data.ScheduledPayment.ScheduledPaymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/scheduled-payments",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/scheduled-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"scheduled-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountScheduledPayments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"scheduled_payment_id\", data.Data.ScheduledPayment.ScheduledPaymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/scheduled-payments",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/scheduled-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"scheduled-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetStatements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"statement_id\", data.Data.Statement.StatementId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/statements",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/statements",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"statements"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountStatements",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"statement_id\", data.Data.Statement[0].StatementId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountStatement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"statement_id\", data.Data.Statement[0].StatementId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements",
										"{{statement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountStatementTransactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/transactions",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/transactions",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements",
										"{{statement_id}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAccountStatementFile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_account_access_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/pdf"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/file",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/file",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements",
										"{{statement_id}}",
										"file"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Auth & Consent (automation)",
					"item": [
						{
							"name": "Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"console.log(\"consent Request: \" + consentRequest)",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consented_account_id\", data.accounts[0].account.accountId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"consentJwt\": \"{{consent_request}}\",\n  \"decision\": \"Authorised\",\n  \"sharedAccounts\": [\n    \"{{consented_account_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "This collection allows you perform the flow that allows a TPP to access bank account data on behalf of a bank account owner user (PSU).\n\nThe Open Banking UK APIs implemented here adhere to the following specification;\n\n[https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "5. Payment Flows",
			"item": [
				{
					"name": "5.1 Create Payment Consent Request and Give Consent",
					"item": [
						{
							"name": "5.1.1 Create access_token with client_credential grant and payment scope",
							"item": [
								{
									"name": "5.1.1: Get client_credentials grant access_token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"//eval(pm.environment.get('pmlib_code'))",
													"eval(pm.environment.get(\"jsrsasign_js\"));",
													"eval(pm.environment.get(\"client_jws_helpers\"));",
													"",
													"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
													"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response must be valid and have a json body\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have access_token and id_token\", function () {",
													"    pm.expect(data.access_token).to.not.be.null;",
													"    pm.expect(data.id_token).to.not.be.null;",
													"});",
													"",
													"var access_token_env_var_name = \"client_credential_access_token_with_payments_scope\";",
													"postman.setEnvironmentVariable(access_token_env_var_name, data.access_token);",
													"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
													"console.log(\"access_token with payment scope being stored in environment variable: '\" + access_token_env_var_name)"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "cnf_key",
												"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "payments openid",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text",
													"disabled": true
												},
												{
													"key": "client_assertion",
													"value": "{{client_credential_jwt}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "client_id",
													"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{as_token_endpoint}}",
											"host": [
												"{{as_token_endpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "5.1.2: Create Payment Consent",
							"item": [
								{
									"name": "DomesticPaymentConsent",
									"item": [
										{
											"name": "Extras",
											"item": [
												{
													"name": "CreateDomesticPaymentConsent (With DebtorAccount)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"response must be 201 and have a json body\", function () {",
																	"    pm.response.to.have.status(201);",
																	"    pm.response.to.be.withBody;",
																	"    pm.response.to.be.json;",
																	"});",
																	"",
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test(\"To have ConsentId\", function () {",
																	"    pm.expect(data.Data.ConsentId).to.not.be.null;",
																	"});",
																	"",
																	"postman.setEnvironmentVariable(\"domestic_payment_intent_id\", data.Data.ConsentId);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
																	"\r",
																	"\r",
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get(\"jsrsasign_js\"));\r",
																	"\r",
																	"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
																	"\r",
																	"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
																	"\r",
																	"var header = {\r",
																	"\t'typ': 'JOSE',\r",
																	"\t'alg': 'PS256',\r",
																	"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '', \r",
																	"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
																	"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
																	"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
																	"    'crit': [\r",
																	"        'http://openbanking.org.uk/iat',\r",
																	"        'http://openbanking.org.uk/iss',\r",
																	"        'http://openbanking.org.uk/tan'\r",
																	"    ]\r",
																	"};\r",
																	"\r",
																	"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
																	"var Property = require('postman-collection').Property;\r",
																	"\r",
																	"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
																	"console.log(\"data: \" + data)\r",
																	"\r",
																	"//console.log(`header: ${ JSON.stringify(header)}`);\r",
																	"\r",
																	"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
																	"console.log(\"JWT:\" + jwt);\r",
																	"\r",
																	"var jwtElements = jwt.split(\".\");\r",
																	"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
																	"\r",
																	"console.log(\"jws_signature:\" + jws_signature);\r",
																	"\r",
																	"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
																	"//postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
																	"pm.environment.set('x_jws_signature', jws_signature);\r",
																	"console.log(\"Exit script\");\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{access_token}}"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-fapi-financial-id",
																"value": "{{X-FAPI-FINANCIAL-ID}}",
																"type": "text"
															},
															{
																"key": "x-jws-signature",
																"value": "{{x_jws_signature}}",
																"type": "text"
															},
															{
																"key": "x-idempotency-key",
																"value": "{{$guid}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"DebtorAccount\": {\n                \"Identification\": \"{{debtor_account_identification}}\",\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\"\n\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents",
															"protocol": "https",
															"host": [
																"{{MTLS-IG-FQDN}}"
															],
															"path": [
																"rs",
																"open-banking",
																"{{API-VERSION}}",
																"pisp",
																"domestic-payment-consents"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "CreateDomesticPaymentConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															"",
															"var consentType = \"domestic\";",
															"var consent_id = data.Data.ConsentId;",
															"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
															"postman.setEnvironmentVariable(\"consent_type\", consentType);",
															"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
															"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{X-FAPI-FINANCIAL-ID}}",
														"type": "text"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-payment-consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetDomesticPaymentConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response must be valid and have a json body\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents/{{domestic_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-payment-consents",
														"{{domestic_payment_consent_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "DomesticScheduledPaymentConsent",
									"item": [
										{
											"name": "CreateDomesticScheduledPaymentsConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															"",
															"var consentType = \"domestic_scheduled\";",
															"var consent_id = data.Data.ConsentId;",
															"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
															"postman.setEnvironmentVariable(\"consent_type\", consentType);",
															"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
															"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{X-FAPI-FINANCIAL-ID}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": \"Yes\",\n        \"Permission\": \"Create\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"RequestedExecutionDateTime\":\"2024-10-21T11:46:53+03:00\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payment-consents",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-scheduled-payment-consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetDomesticScheduledPaymentConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response must be valid and have a json body\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payment-consents/{{domestic_scheduled_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-scheduled-payment-consents",
														"{{domestic_scheduled_payment_consent_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "DomesticStandingOrderPaymentConsent",
									"item": [
										{
											"name": "CreateDomesticStandingOrderConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															"",
															"var consentType = \"domestic_standing_order\";",
															"var consent_id = data.Data.ConsentId;",
															"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
															"postman.setEnvironmentVariable(\"consent_type\", consentType);",
															"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
															"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");",
															"",
															"postman.setEnvironmentVariable(\"domestic_standing_order_intent_id\", data.Data.ConsentId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Data\": {\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"Frequency\": \"QtrDay:ENGLISH\",\n            \"Reference\": \"Reference text\",\n            \"FirstPaymentDateTime\": \"2022-06-21T06:06:06+00:00\",\n            \"FirstPaymentAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"RecurringPaymentAmount\": {\n                \"Amount\": \"65\",\n                \"Currency\": \"GBP\"\n            },\n            \"FinalPaymentDateTime\": \"2023-03-20T06:06:06+00:00\",\n            \"FinalPaymentAmount\": {\n                \"Amount\": \"525.83\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"PartyToParty\"\n    }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-order-consents",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-standing-order-consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetDomesticStandingOrderConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-order-consents/{{domestic_standing_order_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-standing-order-consents",
														"{{domestic_standing_order_payment_consent_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "InternationalPaymentConsent",
									"item": [
										{
											"name": "CreateInternationalPaymentConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															"",
															"var consentType = \"international\";",
															"var consent_id = data.Data.ConsentId;",
															"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
															"postman.setEnvironmentVariable(\"consent_type\", consentType);",
															"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
															"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"Data\":{\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Normal\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-05T11:47:11+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"b19b8b34-26e3-4434-b1a8-736cda5af4a6\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"international-payment-consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetInternationalPaymentConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {
													"accept-encoding": true
												}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents/{{international_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"international-payment-consents",
														"{{international_payment_consent_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "InternationalScheduledPaymentConsent",
									"item": [
										{
											"name": "CreateInternationalScheduledPaymentConsent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															"",
															"var consentType = \"international_scheduled\";",
															"var consent_id = data.Data.ConsentId;",
															"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
															"postman.setEnvironmentVariable(\"consent_type\", consentType);",
															"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
															"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false,
												"disableCookies": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"Data\":{\n      \"Permission\":\"Create\",\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Urgent\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"RequestedExecutionDateTime\":\"2024-10-21T11:46:53+03:00\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"ExchangeRateInformation\":{\n            \"UnitCurrency\":\"EUR\",\n            \"ExchangeRate\": 10,\n            \"RateType\":\"Agreed\",\n            \"ContractIdentification\":\"/tbill/2018/T102993\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-20T11:46:53+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"8c15fac9-6b7f-4ea3-902a-74093673648a\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"international-scheduled-payment-consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetInternationalScheduledPaymentConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {
													"accept-encoding": true
												}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents/{{international_scheduled_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"international-scheduled-payment-consents",
														"{{international_scheduled_payment_consent_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "InternationalStandingOrderPaymentConsent",
									"item": [
										{
											"name": "CreateInternationalStandingOrderConsent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															"",
															"var consentType = \"international_standing_order\";",
															"var consent_id = data.Data.ConsentId;",
															"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
															"postman.setEnvironmentVariable(\"consent_type\", consentType);",
															"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
															"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Data\": {\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"No\",\n        \"Initiation\": {\n            \"Frequency\": \"EvryWorkgDay\",\n            \"Reference\": \"Ipsum Non Arcu Inc.\",\n            \"NumberOfPayments\": \"1\",\n            \"FirstPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"FinalPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"Purpose\": \"CDCD\",\n            \"ExtendedPurpose\": \"Extended purpose\",\n            \"ChargeBearer\": \"Shared\",\n            \"CurrencyOfTransfer\": \"USD\",\n            \"DestinationCountryCode\": \"GB\",\n            \"InstructedAmount\": {\n                \"Amount\": \"10.01\",\n                \"Currency\": \"GBP\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Creditor Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAgent\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"40400411270111\",\n                \"Name\": \"Creditor Agent Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"90611424625555\",\n                \"Name\": \"Mr Steven Morrissey\",\n                \"SecondaryIdentification\": \"44\"\n            },\n            \"SupplementaryData\": {}\n        },\n        \"Authorisation\": {\n            \"AuthorisationType\": \"Any\",\n            \"CompletionDateTime\": \"2022-09-27T13:03:06+03:00\"\n        },\n        \"SCASupportData\": {\n            \"RequestedSCAExemptionType\": \"BillPayment\",\n            \"AppliedAuthenticationApproach\": \"CA\",\n            \"ReferencePaymentOrderId\": \"4bcfdeae-f40b-44f1-824e-d6bb9e5eefe9\"\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-order-consents",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"international-standing-order-consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetInternationalStandingOrderConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true,
												"disabledSystemHeaders": {
													"accept-encoding": true
												}
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-order-consents/{{international_standing_order_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"international-standing-order-consents",
														"{{international_standing_order_payment_consent_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "FilePayments",
									"item": [
										{
											"name": "FilePayments-Json",
											"item": [
												{
													"name": "CreateFilePaymentConsent-JSON",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201 and return json body\", function () {",
																	"    pm.response.to.have.status(201);",
																	"    pm.response.to.be.withBody;",
																	"    pm.response.to.be.json;",
																	"});",
																	"",
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test(\"To have a ConsentId id\", function () {",
																	"    pm.expect(data.Data.ConsentId).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Status is AwaitingAuthorisation\", function () {",
																	"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
																	"});",
																	"",
																	"var consentType = \"json_file\";",
																	"var consent_id = data.Data.ConsentId;",
																	"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
																	"postman.setEnvironmentVariable(\"consent_type\", consentType);",
																	"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
																	"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get(\"jsrsasign_js\"));\r",
																	"eval(pm.environment.get(\"client_jws_helpers\"));\r",
																	"\r",
																	"var jws = client_jws_helpers.createCompactSerializedJws();\r",
																	"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
																	"pm.environment.set('x_jws_signature', x_jws_signature);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-jws-signature",
																"value": "{{x_jws_signature}}",
																"type": "text"
															},
															{
																"key": "x-idempotency-key",
																"value": "{{$guid}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.PaymentInitiation.3.1\",\n      \"FileHash\": \"b5OLwRye50tF1mVouNRR+4Mh8uhZKddKiMwT3N8nSlU=\",\n      \"FileReference\": \"JsonExample\",\n      \"NumberOfTransactions\": \"4\",\n      \"ControlSum\": 87.00,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
														},
														"url": {
															"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents",
															"protocol": "https",
															"host": [
																"{{MTLS-IG-FQDN}}"
															],
															"path": [
																"rs",
																"open-banking",
																"{{API-VERSION}}",
																"pisp",
																"file-payment-consents"
															]
														}
													},
													"response": []
												},
												{
													"name": "GetFilePaymentConsent-JSON",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test(\"Status code is 200 and return json body\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.response.to.be.withBody;",
																	"    pm.response.to.be.json;",
																	"});",
																	"",
																	"",
																	"pm.test(\"To have a ConsentId id\", function () {",
																	"    pm.expect(data.Data.ConsentId).to.eql(postman.getEnvironmentVariable(\"file_payment_intent_id\"));",
																	"});",
																	"",
																	"pm.test(\"Status is AwaitingUpload\", function () {",
																	"    pm.expect(data.Data.Status).to.eql(\"AwaitingUpload\");",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{json_file_payment_consent_id}}",
															"protocol": "https",
															"host": [
																"{{MTLS-IG-FQDN}}"
															],
															"path": [
																"rs",
																"open-banking",
																"{{API-VERSION}}",
																"pisp",
																"file-payment-consents",
																"{{json_file_payment_consent_id}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "CreateFilePaymentFile-JSON",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get(\"jsrsasign_js\"));\r",
																	"eval(pm.environment.get(\"client_jws_helpers\"));\r",
																	"\r",
																	"var jws = client_jws_helpers.createCompactSerializedJws();\r",
																	"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
																	"pm.environment.set('x_jws_signature', x_jws_signature);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "x-jws-signature",
																"value": "{{x_jws_signature}}",
																"type": "text"
															},
															{
																"key": "x-idempotency-key",
																"value": "{{$guid}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"Data\": {\n    \"DomesticPayments\": [\n      {\n        \"InstructionIdentification\": \"ANSM020\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.01\",\n        \"LocalInstrument\": \"UK.OBIE.CHAPS\",\n        \"InstructedAmount\": {\n          \"Amount\": \"21.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"CreditorPostalAddress\": {\n          \"AddressType\": \"Correspondence\",\n          \"StreetName\": \"Liberty\",\n          \"BuildingNumber\": \"1\",\n          \"PostCode\": \"AB1 2CD\",\n          \"TownName\": \"London\",\n          \"Country\": \"UK\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      },\n      {\n        \"InstructionIdentification\": \"ANSM020\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.01\",\n        \"LocalInstrument\": \"UK.OBIE.CHAPS\",\n        \"InstructedAmount\": {\n          \"Amount\": \"21.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"CreditorPostalAddress\": {\n          \"AddressType\": \"Correspondence\",\n          \"StreetName\": \"Liberty\",\n          \"BuildingNumber\": \"1\",\n          \"PostCode\": \"AB1 2CD\",\n          \"TownName\": \"London\",\n          \"Country\": \"UK\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      },\n      {\n        \"InstructionIdentification\": \"ANSM021\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.02\",\n        \"LocalInstrument\": \"UK.OBIE.BACS\",\n        \"InstructedAmount\": {\n          \"Amount\": \"22.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      },\n      {\n        \"InstructionIdentification\": \"ANSM022\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.03\",\n        \"InstructedAmount\": {\n          \"Amount\": \"23.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      }\n    ]\n  }\n}\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{json_file_payment_consent_id}}/file",
															"protocol": "https",
															"host": [
																"{{MTLS-IG-FQDN}}"
															],
															"path": [
																"rs",
																"open-banking",
																"{{API-VERSION}}",
																"pisp",
																"file-payment-consents",
																"{{json_file_payment_consent_id}}",
																"file"
															]
														}
													},
													"response": []
												},
												{
													"name": "GetFilePaymentFile-JSON",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"type": "text",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{json_file_payment_consent_id}}/file",
															"protocol": "https",
															"host": [
																"{{MTLS-IG-FQDN}}"
															],
															"path": [
																"rs",
																"open-banking",
																"{{API-VERSION}}",
																"pisp",
																"file-payment-consents",
																"{{json_file_payment_consent_id}}",
																"file"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "FilePayments-XML",
											"item": [
												{
													"name": "CreateFilePaymentConsent-XML",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 201 and return json body\", function () {",
																	"    pm.response.to.have.status(201);",
																	"    pm.response.to.be.withBody;",
																	"    pm.response.to.be.json;",
																	"});",
																	"",
																	"var data = JSON.parse(responseBody);",
																	"",
																	"pm.test(\"To have a ConsentId id\", function () {",
																	"    pm.expect(data.Data.ConsentId).to.not.be.null;",
																	"});",
																	"",
																	"pm.test(\"Status is AwaitingAuthorisation\", function () {",
																	"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
																	"});",
																	"",
																	"var consentType = \"xml_file\";",
																	"var consent_id = data.Data.ConsentId;",
																	"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
																	"postman.setEnvironmentVariable(\"consent_type\", consentType);",
																	"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
																	"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get(\"jsrsasign_js\"));\r",
																	"eval(pm.environment.get(\"client_jws_helpers\"));\r",
																	"\r",
																	"var jws = client_jws_helpers.createCompactSerializedJws();\r",
																	"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
																	"pm.environment.set('x_jws_signature', x_jws_signature);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "x-jws-signature",
																"value": "{{x_jws_signature}}",
																"type": "text"
															},
															{
																"key": "x-idempotency-key",
																"value": "{{$guid}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.pain.001.001.08\",\n      \"FileHash\": \"VEzqICCQvK7NHt8g75Kfbsb0XW5Wmeg3pgAgpN6oLQ8=\",\n      \"FileReference\": \"XmlExample\",\n      \"NumberOfTransactions\": \"3\",\n      \"ControlSum\": 11500000,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
														},
														"url": {
															"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents",
															"protocol": "https",
															"host": [
																"{{MTLS-IG-FQDN}}"
															],
															"path": [
																"rs",
																"open-banking",
																"{{API-VERSION}}",
																"pisp",
																"file-payment-consents"
															]
														}
													},
													"response": []
												},
												{
													"name": "CreateFilePaymentFile-XML",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get(\"jsrsasign_js\"));\r",
																	"eval(pm.environment.get(\"client_jws_helpers\"));\r",
																	"\r",
																	"var jws = client_jws_helpers.createCompactSerializedJws();\r",
																	"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
																	"pm.environment.set('x_jws_signature', x_jws_signature);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"type": "text",
																"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "text/xml"
															},
															{
																"key": "x-jws-signature",
																"value": "{{x_jws_signature}}",
																"type": "text"
															},
															{
																"key": "x-idempotency-key",
																"value": "{{$guid}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.08\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema- instance\">\n    <CstmrCdtTrfInitn>\n    <GrpHdr>\n        <MsgId>ABC/120928/CCT001</MsgId>\n        <CreDtTm>2012-09-28T14:07:00</CreDtTm>\n        <NbOfTxs>3</NbOfTxs>\n        <CtrlSum>11500000</CtrlSum>\n        <InitgPty>\n            <Nm>ABC Corporation</Nm>\n            <PstlAdr>\n                <StrtNm>Times Square</StrtNm>\n                <BldgNb>7</BldgNb>\n                <PstCd>NY 10036</PstCd>\n                <TwnNm>New York</TwnNm>\n                <Ctry>US</Ctry>\n            </PstlAdr>\n        </InitgPty>\n    </GrpHdr>\n    <PmtInf>\n        <PmtInfId>ABC/086</PmtInfId>\n        <PmtMtd>TRF</PmtMtd>\n        <BtchBookg>false</BtchBookg>\n        <ReqdExctnDt>\n            <Dt>2012-09-29</Dt>\n        </ReqdExctnDt>\n        <Dbtr>\n            <Nm>ABC Corporation</Nm>\n            <PstlAdr>\n                <StrtNm>Times Square</StrtNm>\n                <BldgNb>7</BldgNb>\n                <PstCd>NY 10036</PstCd>\n                <TwnNm>New York</TwnNm>\n                <Ctry>US</Ctry>\n            </PstlAdr>\n        </Dbtr>\n        <DbtrAcct>\n            <Id>\n                <Othr>\n                    <Id>00125574999</Id>\n                </Othr>\n            </Id>\n        </DbtrAcct>\n        <DbtrAgt>\n            <FinInstnId>\n                <BICFI>BBBBUS33</BICFI>\n            </FinInstnId>\n        </DbtrAgt>\n        <CdtTrfTxInf>\n            <PmtId>\n                <InstrId>ABC/120928/CCT001/01</InstrId>\n                <EndToEndId>ABC/4562/2012-09-08</EndToEndId>\n            </PmtId>\n            <Amt>\n                <InstdAmt Ccy=\"JPY\">10000000</InstdAmt>\n            </Amt>\n            <ChrgBr>SHAR</ChrgBr>\n            <CdtrAgt>\n                <FinInstnId>\n                    <BICFI>AAAAGB2L</BICFI>\n                </FinInstnId>\n            </CdtrAgt>\n            <Cdtr>\n                <Nm>DEF Electronics</Nm>\n                <PstlAdr>\n                    <AdrLine>Corn Exchange 5th Floor</AdrLine>\n                    <AdrLine>Mark Lane 55</AdrLine>\n                    <AdrLine>EC3R7NE London</AdrLine>\n                    <AdrLine>GB</AdrLine>\n                </PstlAdr>\n            </Cdtr>\n            <CdtrAcct>\n                <Id>\n                    <Othr>\n                        <Id>23683707994125</Id>\n                    </Othr>\n                </Id>\n            </CdtrAcct>\n            <Purp>\n                <Cd>GDDS</Cd>\n            </Purp>\n            <RmtInf>\n                <Strd>\n                    <RfrdDocInf>\n                        <Tp>\n                            <CdOrPrtry>\n                                <Cd>CINV</Cd>\n                            </CdOrPrtry>\n                        </Tp>\n                        <Nb>4562</Nb>\n                        <RltdDt>2012-09-08</RltdDt>\n                    </RfrdDocInf>\n                </Strd>\n            </RmtInf>\n        </CdtTrfTxInf>\n        <CdtTrfTxInf>\n            <PmtId>\n                <InstrId>ABC/120928/CCT001/2</InstrId>\n                <EndToEndId>ABC/ABC-13679/2012-09-15</EndToEndId>\n            </PmtId>\n            <Amt>\n                <InstdAmt Ccy=\"EUR\">500000</InstdAmt>\n            </Amt>\n            <ChrgBr>CRED</ChrgBr>\n            <CdtrAgt>\n                <FinInstnId>\n                    <BICFI>DDDDBEBB</BICFI>\n                </FinInstnId>\n            </CdtrAgt>\n            <Cdtr>\n                <Nm>GHI Semiconductors</Nm>\n                <PstlAdr>\n                    <StrtNm>Avenue Brugmann</StrtNm>\n                    <BldgNb>415</BldgNb>\n                    <PstCd>1180</PstCd>\n                    <TwnNm>Brussels</TwnNm>\n                    <Ctry>BE</Ctry>\n                </PstlAdr>\n            </Cdtr>\n            <CdtrAcct>\n                <Id>\n                    <IBAN>BE30001216371411</IBAN>\n                </Id>\n            </CdtrAcct>\n            <InstrForCdtrAgt>\n                <Cd>PHOB</Cd>\n                <InstrInf>+32/2/2222222</InstrInf>\n            </InstrForCdtrAgt>\n            <Purp>\n                <Cd>GDDS</Cd>\n            </Purp>\n            <RmtInf>\n                <Strd>\n                    <RfrdDocInf>\n                        <Tp>\n                            <CdOrPrtry>\n                                <Cd>CINV</Cd>\n                            </CdOrPrtry>\n                        </Tp>\n                        <Nb>ABC-13679</Nb>\n                        <RltdDt>2012-09-15</RltdDt>\n                    </RfrdDocInf>\n                </Strd>\n            </RmtInf>\n        </CdtTrfTxInf>\n        <CdtTrfTxInf>\n            <PmtId>\n                <InstrId>ABC/120928/CCT001/3</InstrId>\n                <EndToEndId>ABC/987-AC/2012-09-27</EndToEndId>\n            </PmtId>\n            <Amt>\n                <InstdAmt Ccy=\"USD\">1000000</InstdAmt>\n            </Amt>\n            <ChrgBr>SHAR</ChrgBr>\n            <CdtrAgt>\n                <FinInstnId>\n                    <BICFI>BBBBUS66</BICFI>\n                </FinInstnId>\n            </CdtrAgt>\n            <Cdtr>\n                <Nm>ABC Corporation</Nm>\n                <PstlAdr>\n                    <Dept>Treasury department</Dept>\n                    <StrtNm>Bush Street</StrtNm>\n                    <BldgNb>13</BldgNb>\n                    <PstCd>CA 94108</PstCd>\n                    <TwnNm>San Francisco</TwnNm>\n                    <Ctry>US</Ctry>\n                </PstlAdr>\n            </Cdtr>\n            <CdtrAcct>\n                <Id>\n                    <Othr>\n                        <Id>4895623</Id>\n                    </Othr>\n                </Id>\n            </CdtrAcct>\n            <Purp>\n                <Cd>INTC</Cd>\n            </Purp>\n            <RmtInf>\n                <Strd>\n                    <RfrdDocInf>\n                        <Tp>\n                            <CdOrPrtry>\n                                <Cd>CINV</Cd>\n                            </CdOrPrtry>\n                        </Tp>\n                        <Nb>987-AC</Nb>\n                        <RltdDt>2012-09-27</RltdDt>\n                    </RfrdDocInf>\n                </Strd>\n            </RmtInf>\n        </CdtTrfTxInf>\n    </PmtInf>\n</CstmrCdtTrfInitn>\n</Document>",
															"options": {
																"raw": {
																	"language": "xml"
																}
															}
														},
														"url": {
															"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{xml_file_payment_consent_id}}/file",
															"protocol": "https",
															"host": [
																"{{MTLS-IG-FQDN}}"
															],
															"path": [
																"rs",
																"open-banking",
																"{{API-VERSION}}",
																"pisp",
																"file-payment-consents",
																"{{xml_file_payment_consent_id}}",
																"file"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "DomesticVrpPaymentConsents",
									"item": [
										{
											"name": "CreateDomesticVRPConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.not.be.null;",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															"",
															"var consentType = \"domestic_vrp\";",
															"var consent_id = data.Data.ConsentId;",
															"var consentIdEnvironmentVariableName = consentType + \"_payment_consent_id\";",
															"postman.setEnvironmentVariable(\"consent_type\", consentType);",
															"postman.setEnvironmentVariable(consentIdEnvironmentVariableName, consent_id);",
															"console.log(\"consent_id '\" + consent_id + \"' for consent type '\" + consentType + \"' stored in environment variable '\" + consentIdEnvironmentVariableName + \"'\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": null,\n        \"ControlParameters\": {\n            \"ValidFromDateTime\": \"2022-11-09T10:17:08+02:00\",\n            \"ValidToDateTime\": \"2022-11-19T10:17:08+02:00\",\n            \"MaximumIndividualAmount\": {\n                \"Amount\": \"10.01\",\n                \"Currency\": \"GBP\"\n            },\n            \"PeriodicLimits\": [\n                {\n                    \"PeriodType\": \"Month\",\n                    \"PeriodAlignment\": \"Calendar\",\n                    \"Amount\": \"10.01\",\n                    \"Currency\": \"GBP\"\n                }\n            ],\n            \"VRPType\": [\n                \"UK.OBIE.VRPType.Sweeping\"\n            ],\n            \"PSUAuthenticationMethods\": [\n                \"UK.OBIE.SCANotRequired\"\n            ],\n            \"PSUInteractionTypes\": [\n                \"InSession\"\n            ],\n            \"SupplementaryData\": {}\n        },\n        \"Initiation\": {\n            \"DebtorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"01233243245676\",\n                \"Name\": \"psu4test\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"RemittanceInformation\": {\n                \"Unstructured\": \"Internal ops code 5120103\",\n                \"Reference\": \"FRESCO-037\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-vrp-consents"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetDomesticVRPConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"Status code is 200 and return json body\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"",
															"pm.test(\"To have a ConsentId id\", function () {",
															"    pm.expect(data.Data.ConsentId).to.eql(postman.getEnvironmentVariable(\"domestic_vrp_intent_id\"));",
															"});",
															"",
															"pm.test(\"Status is AwaitingAuthorisation\", function () {",
															"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents/{{domestic_vrp_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-vrp-consents",
														"{{domestic_vrp_payment_consent_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DeleteDomesticVRPConsent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response must be 204 and no content\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"type": "text",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents/{{domestic_vrp_payment_consent_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"domestic-vrp-consents",
														"{{domestic_vrp_payment_consent_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "5.1.3: Resource Owner gives Consent",
							"item": [
								{
									"name": "5.2 Option 1: UI Hybrid flow",
									"item": [
										{
											"name": "PSU gives consent - Hybrid Flow",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var navigator = {}; //fake a navigator object for the lib",
															"var window = {}; //fake a window object for the lib",
															"eval(pm.environment.get(\"jsrsasign_js\"));",
															"eval(pm.environment.get(\"client_jws_helpers\"));",
															"var consent_id = client_jws_helpers.getPaymentConsentId();",
															"var link = client_jws_helpers.createAuthorizeRequestUrl(\"openid payments\", consent_id)",
															"",
															"postman.setEnvironmentVariable(\"authorize_url\", link);",
															"",
															"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
															" "
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Header location doesnt contains error\", function () {",
															"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
															"});",
															"",
															"loc = pm.response.headers.get(\"Location\");",
															"console.log(\"loc is \" + loc);",
															"var parameters = loc.slice(loc.indexOf(\"?\"));",
															"",
															"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
															"console.log(\"authentication URL is \" + authenticateURL)",
															"",
															"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": true,
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorize_url}}",
													"host": [
														"{{authorize_url}}"
													]
												},
												"description": "This request simulates the redirection from TPP app to the Bank Authorisation Server endpoint, where the PSU must authenticate.\n\n- Run the request 5.2.1 to generate the redirect URL\n    \n    - In the `response` section select the `Visualize` Tab and copy the generated URL in a new `incognito window` in your browser.\n        \n    - Then authenticate as PSU user and approve or reject the consent.\n        \n    - After approve the consent the browser will redirects the user to callback URL that contains the `code` and the `id token`\n        \n        - Copy the `code` value from the browser\n            \n        - Paste the `code` value copied in the environment variable `psu_auth_code`\n            \n        - Run the request to interchange the `code (psu_auth_code)`to get an `access_token with consent`"
											},
											"response": []
										}
									],
									"description": "Simulates the redirection from TPP app to the Bank Authorisation Server endpoint, where the PSU must authenticate.\n\n- Run the request 5.2.1 to generate the redirect URL\n    \n    - In the `response` section select the `Visualize` Tab and copy the generated URL in a new `incognito window` in your browser.\n        \n    - Then authenticate as PSU user and approve or reject the consent.\n        \n    - After approve the consent the browser will redirects the user to callback URL that contains the `code` and the `id token`\n        \n        - Copy the `code` value from the browser\n            \n        - Paste the `code` value copied in the environment variable `psu_auth_code`\n            \n        - Run the request to interchange the `code (psu_auth_code)`to get an `access_token with consent`"
								},
								{
									"name": "5.2 Option 2: via Headless Authentication",
									"item": [
										{
											"name": "5.3.1 Clear Session",
											"protocolProfileBehavior": {
												"disableCookies": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept-API-Version",
														"value": "resource=3.1, protocol=1.0",
														"type": "text"
													}
												],
												"url": {
													"raw": "https://{{IG-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
													"protocol": "https",
													"host": [
														"{{IG-FQDN}}"
													],
													"path": [
														"am",
														"json",
														"realms",
														"root",
														"realms",
														"{{REALM}}",
														"sessions",
														""
													],
													"query": [
														{
															"key": "_action",
															"value": "logout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "5.3.2 Authenticate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response must be valid and have a json body\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableCookies": false,
												"followRedirects": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-OpenAM-Username",
														"value": "{{END-USER-ACCOUNT-USER-NAME}}",
														"type": "text"
													},
													{
														"key": "X-OpenAM-Password",
														"value": "{{END-USER-ACCOUNT-PASSWORD}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{authenticate_url}}",
													"host": [
														"{{authenticate_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.3.3 Continue authorize",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Header location doesnt contains error\", function () {",
															"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
															"});",
															"",
															"loc = pm.response.headers.get(\"Location\");",
															"console.log(\"loc is \" + loc);",
															"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
															"console.log(\"consent Request: \" + consentRequest)",
															"postman.setEnvironmentVariable(\"consent_request\",consentRequest);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{authorize_url}}",
													"host": [
														"{{authorize_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.3.4 Get consent details",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response must be valid and have a json body\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"if((data.accounts != null || data.accounts != undefined) && data.accounts.length > 0){",
															"    console.log(\"set debtor_account variable\")",
															"    postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));",
															"} else {",
															"    throw new Error(\"No there is any account in the consent details\")",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('{{consent_request}}')"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{consent_request}}"
												},
												"url": {
													"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
													"protocol": "https",
													"host": [
														"{{IG-FQDN}}"
													],
													"path": [
														"rcs",
														"api",
														"consent",
														"details"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.3.5 Send consent decision",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"response must be valid and have a json body\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have ConsentId\", function () {",
															"    pm.expect(data.consentJwt).to.not.be.null;",
															"    pm.expect(data.redirectUri).to.not.be.null;",
															"});",
															"",
															"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
															"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
													"protocol": "https",
													"host": [
														"{{IG-FQDN}}"
													],
													"path": [
														"rcs",
														"api",
														"consent",
														"decision"
													]
												}
											},
											"response": []
										},
										{
											"name": "5.3.6 Get auth code",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Header location doesnt contains error\", function () {",
															"   location = pm.response.headers.get(\"Location\");",
															"   pm.expect(location).not.to.include(\"error=\");",
															"   pm.expect(location).to.include(\"code=\");",
															"});",
															"",
															"loc = pm.response.headers.get(\"Location\");",
															"console.log(\"loc: \" + loc)",
															"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
															"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followRedirects": false
											},
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "consent_response",
															"value": "{{consent_response}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{authorize_url}}",
													"host": [
														"{{authorize_url}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "5.1.4 ApiClient gets Access token with consent",
							"item": [
								{
									"name": "Extras",
									"item": [
										{
											"name": "Refresh access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
															"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
															"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "refresh_token",
															"type": "text"
														},
														{
															"key": "refresh_token",
															"value": "{{refresh_token}}",
															"type": "text"
														},
														{
															"key": "redirect_uri",
															"value": "{{client_redirect_uri}}",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{client_credential_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{as_token_endpoint}}",
													"host": [
														"{{as_token_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Introspect Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "token",
															"value": "{{access_token_with_consent}}",
															"type": "text"
														},
														{
															"key": "client_id",
															"value": "{{client_id}}",
															"type": "text"
														},
														{
															"key": "client_secret",
															"value": "{{client_secret}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{as_introspection_endpoint}}",
													"host": [
														"{{as_introspection_endpoint}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UserInfo",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{access_token_with_consent}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{as_userinfo_endpoint}}",
													"host": [
														"{{as_userinfo_endpoint}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "5.1.4.1 get authorization_code access_token (with consent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"var consentType = pm.environment.get(\"consent_type\");",
													"var accessTokenEnvironmentVariableName = \"access_token_with_\" + consentType + \"_payment_consent\";",
													"var refreshTokenEnvironmentVariableName = \"refresh_token_with_\" + consentType + \"_payment_consent\";",
													"postman.setEnvironmentVariable(accessTokenEnvironmentVariableName, data.access_token);",
													"console.log(\"Stored access token with consent in environment variable \" + accessTokenEnvironmentVariableName);",
													"postman.setEnvironmentVariable(refreshTokenEnvironmentVariableName, data.refresh_token);",
													"console.log(\"Stored refresh token with consent in environment variable \" + refreshTokenEnvironmentVariableName);",
													"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"",
													"eval(pm.environment.get(\"jsrsasign_js\"));",
													"eval(pm.environment.get(\"client_jws_helpers\"));",
													"",
													"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
													"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "qXcngTf25IJNvqFwKhhm-EeuYMc",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{client_redirect_uri}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text",
													"disabled": true
												},
												{
													"key": "client_assertion",
													"value": "{{client_credential_jwt}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "gateway_assertion",
													"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
													"type": "text",
													"disabled": true
												},
												{
													"key": "client_id",
													"value": "",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{as_token_endpoint}}",
											"host": [
												"{{as_token_endpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "5.2 Submit Payment for Processing",
					"item": [
						{
							"name": "DomesticPayments",
							"item": [
								{
									"name": "1 GetDomesticPaymentConsentsConsentIdFundsConfirmation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_domestic_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-fapi-financial-id",
												"value": "{{X-FAPI-FINANCIAL-ID}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents/{{domestic_payment_consent_id}}/funds-confirmation",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-payment-consents",
												"{{domestic_payment_consent_id}}",
												"funds-confirmation"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. CreateDomesticPayment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and return json body\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a DomesticPaymentId\", function () {",
													"    pm.expect(data.Data.DomesticPaymentId).to.not.be.null;",
													"});",
													"",
													"postman.setEnvironmentVariable(\"domestic_payment_id\", data.Data.DomesticPaymentId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_domestic_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Data\": {\n    \"ConsentId\": \"{{domestic_payment_consent_id}}\",\n    \"Initiation\": {\n      \"InstructionIdentification\": \"ACME412\",\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.88\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }    \n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payments",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. GetDomesticPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payments/{{domestic_payment_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-payments",
												"{{domestic_payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. GetDomesticPaymentDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"//postman.setEnvironmentVariable(\"DomesticPaymentId\", data.Data.DomesticPaymentId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{patched_domestic_payment_consent}}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payments/{{domestic_payment_id}}/payment-details",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-payments",
												"{{domestic_payment_id}}",
												"payment-details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DomesticScheduledPayments",
							"item": [
								{
									"name": "CreateDomesticScheduledPayment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and return json body\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a DomesticScheduledPaymentId\", function () {",
													"    pm.expect(data.Data.DomesticScheduledPaymentId).to.not.be.null;",
													"});",
													"",
													"postman.setEnvironmentVariable(\"domestic_scheduled_payment_id\", data.Data.DomesticScheduledPaymentId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_domestic_scheduled_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Data\": {\n    \"ConsentId\": \"{{domestic_scheduled_payment_consent_id}}\",\n    \"Permission\":\"Create\",\n    \"Initiation\": {\n        \"InstructionIdentification\": \"ACME412\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n        \"RequestedExecutionDateTime\":\"2024-10-21T11:46:53+03:00\",\n        \"InstructedAmount\": {\n            \"Amount\": \"165.88\",\n            \"Currency\": \"GBP\"\n        },\n        \"CreditorAccount\": {\n            \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\": \"08080021325698\",\n            \"Name\": \"ACME Inc\",\n            \"SecondaryIdentification\": \"0002\"\n        },\n        \"RemittanceInformation\": {\n            \"Reference\": \"FRESCO-101\",\n            \"Unstructured\": \"Internal ops code 5120101\"\n        }\n    }\n  },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payments",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-scheduled-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetDomesticScheduledPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payments/{{domestic_scheduled_payment_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-scheduled-payments",
												"{{domestic_scheduled_payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetDomesticScheduledPaymentDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"//postman.setEnvironmentVariable(\"DomesticPaymentId\", data.Data.DomesticPaymentId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{patched_domestic_payment_consent}}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payments/{{domestic_scheduled_payment_id}}/payment-details",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-scheduled-payments",
												"{{domestic_scheduled_payment_id}}",
												"payment-details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DomesticStandingOrderPayments",
							"item": [
								{
									"name": "CreateDomesticStandingOrder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and return json body\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a DomesticStandingOrderId\", function () {",
													"    pm.expect(data.Data.DomesticStandingOrderId).to.not.be.null;",
													"});",
													"",
													"postman.setEnvironmentVariable(\"domestic_standing_order_payment_id\", data.Data.DomesticStandingOrderId);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_domestic_standing_order_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_standing_order_payment_consent_id}}\",\n        \"Initiation\": {\n            \"Frequency\": \"QtrDay:ENGLISH\",\n            \"Reference\": \"Reference text\",\n            \"FirstPaymentDateTime\": \"2022-06-21T06:06:06+00:00\",\n            \"FirstPaymentAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"RecurringPaymentAmount\": {\n                \"Amount\": \"65\",\n                \"Currency\": \"GBP\"\n            },\n            \"FinalPaymentDateTime\": \"2023-03-20T06:06:06+00:00\",\n            \"FinalPaymentAmount\": {\n                \"Amount\": \"525.83\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"PartyToParty\"\n    }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-orders",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-standing-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetDomesticStandingOrder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-orders/{{domestic_standing_order_payment_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-standing-orders",
												"{{domestic_standing_order_payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetDomesticStandingOrderDomesticStandingOrderIdPaymentDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-orders/{{domestic_standing_order_payment_id}}/payment-details",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-standing-orders",
												"{{domestic_standing_order_payment_id}}",
												"payment-details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "InternationalPayments",
							"item": [
								{
									"name": "GetInternationalPaymentConsentsConsentIdFundsConfirmation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_international_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents/{{international_payment_consent_id}}/funds-confirmation",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-payment-consents",
												"{{international_payment_consent_id}}",
												"funds-confirmation"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateInternationalPayment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and return json body\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a InternationalPaymentId\", function () {",
													"    pm.expect(data.Data.InternationalPaymentId).to.not.be.null;",
													"});",
													"",
													"postman.setEnvironmentVariable(\"international_payment_id\", data.Data.InternationalPaymentId);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_international_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Data\":{\n      \"ConsentId\":\"{{international_payment_consent_id}}\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Normal\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-05T11:47:11+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"b19b8b34-26e3-4434-b1a8-736cda5af4a6\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payments",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetInternationalPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payments/{{international_payment_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-payments",
												"{{international_payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetInternationalPaymentInternationalPaymentIdPaymentDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payments/{{international_payment_id}}/payment-details",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-payments",
												"{{international_payment_id}}",
												"payment-details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "InternationalScheduledPayments",
							"item": [
								{
									"name": "GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_international_scheduled_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents/{{international_scheduled_payment_consent_id}}/funds-confirmation",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-scheduled-payment-consents",
												"{{international_scheduled_payment_consent_id}}",
												"funds-confirmation"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateInternationalScheduledPayment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and return json body\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a InternationalScheduledPaymentId\", function () {",
													"    pm.expect(data.Data.InternationalScheduledPaymentId).to.not.be.null;",
													"});",
													"",
													"postman.setEnvironmentVariable(\"international_scheduled_payment_id\", data.Data.InternationalScheduledPaymentId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_international_scheduled_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Data\":{\n      \"ConsentId\": \"{{international_scheduled_payment_consent_id}}\",\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Urgent\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"RequestedExecutionDateTime\":\"2024-10-21T11:46:53+03:00\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"ExchangeRateInformation\":{\n            \"UnitCurrency\":\"EUR\",\n            \"ExchangeRate\": 10,\n            \"RateType\":\"Agreed\",\n            \"ContractIdentification\":\"/tbill/2018/T102993\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-20T11:46:53+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"8c15fac9-6b7f-4ea3-902a-74093673648a\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payments",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-scheduled-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetInternationalScheduledPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payments/{{international_scheduled_payment_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-scheduled-payments",
												"{{international_scheduled_payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetInternationalScheduledPaymentPaymentIdPaymentDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payments/{{international_scheduled_payment_id}}/payment-details",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-scheduled-payments",
												"{{international_scheduled_payment_id}}",
												"payment-details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "InternationalStandingOrderPayments",
							"item": [
								{
									"name": "CreateInternationalStandingOrder",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and return json body\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a InternationalStandingOrderId\", function () {",
													"    pm.expect(data.Data.InternationalStandingOrderId).to.not.be.null;",
													"});",
													"",
													"postman.setEnvironmentVariable(\"international_standing_order_id\", data.Data.InternationalStandingOrderId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_international_standing_order_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{international_standing_order_payment_consent_id}}\",\n        \"ReadRefundAccount\": \"No\",\n        \"Initiation\": {\n            \"Frequency\": \"EvryWorkgDay\",\n            \"Reference\": \"Ipsum Non Arcu Inc.\",\n            \"NumberOfPayments\": \"1\",\n            \"FirstPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"FinalPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"Purpose\": \"CDCD\",\n            \"ExtendedPurpose\": \"Extended purpose\",\n            \"ChargeBearer\": \"Shared\",\n            \"CurrencyOfTransfer\": \"USD\",\n            \"DestinationCountryCode\": \"GB\",\n            \"InstructedAmount\": {\n                \"Amount\": \"10.01\",\n                \"Currency\": \"GBP\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Creditor Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAgent\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"40400411270111\",\n                \"Name\": \"Creditor Agent Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"90611424625555\",\n                \"Name\": \"Mr Steven Morrissey\",\n                \"SecondaryIdentification\": \"44\"\n            },\n            \"SupplementaryData\": {}\n        },\n        \"Authorisation\": {\n            \"AuthorisationType\": \"Any\",\n            \"CompletionDateTime\": \"2022-09-27T13:03:06+03:00\"\n        },\n        \"SCASupportData\": {\n            \"RequestedSCAExemptionType\": \"BillPayment\",\n            \"AppliedAuthenticationApproach\": \"CA\",\n            \"ReferencePaymentOrderId\": \"4bcfdeae-f40b-44f1-824e-d6bb9e5eefe9\"\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-orders",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-standing-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetInternationalStandingOrder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-orders/{{international_standing_order_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-standing-orders",
												"{{international_standing_order_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetInternationalStandingOrderInternationalStandingOrderIdPaymentDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-orders/{{international_standing_order_id}}/payment-details",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"international-standing-orders",
												"{{international_standing_order_id}}",
												"payment-details"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "FilePayments",
							"item": [
								{
									"name": "FilePayments-Json",
									"item": [
										{
											"name": "CreateFIlePayment-JSON",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a FilePaymentId\", function () {",
															"    pm.expect(data.Data.FilePaymentId).to.not.be.null;",
															"});",
															"",
															"postman.setEnvironmentVariable(\"json_file_payment_id\", data.Data.FilePaymentId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{access_token_with_json_file_payment_consent}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"Data\": {\n    \"ConsentId\": \"{{json_file_payment_consent_id}}\",\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.PaymentInitiation.3.1\",\n      \"FileHash\": \"b5OLwRye50tF1mVouNRR+4Mh8uhZKddKiMwT3N8nSlU=\",\n      \"FileReference\": \"JsonExample\",\n      \"NumberOfTransactions\": \"4\",\n      \"ControlSum\": 87.00,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"file-payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFilePayment-JSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}"
													}
												],
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments/{{json_file_payment_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"file-payments",
														"{{json_file_payment_id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "FilePayments-XML",
									"item": [
										{
											"name": "CreateFilePayment-XML",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get(\"jsrsasign_js\"));\r",
															"eval(pm.environment.get(\"client_jws_helpers\"));\r",
															"\r",
															"var jws = client_jws_helpers.createCompactSerializedJws();\r",
															"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
															"pm.environment.set('x_jws_signature', x_jws_signature);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201 and return json body\", function () {",
															"    pm.response.to.have.status(201);",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"var data = JSON.parse(responseBody);",
															"",
															"pm.test(\"To have a FilePaymentId\", function () {",
															"    pm.expect(data.Data.FilePaymentId).to.not.be.null;",
															"});",
															"",
															"postman.setEnvironmentVariable(\"xml_file_payment_id\", data.Data.FilePaymentId);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{access_token_with_xml_file_payment_consent}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{x_jws_signature}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"Data\": {\n    \"ConsentId\": \"{{xml_file_payment_consent_id}}\",\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.pain.001.001.08\",\n      \"FileHash\": \"VEzqICCQvK7NHt8g75Kfbsb0XW5Wmeg3pgAgpN6oLQ8=\",\n      \"FileReference\": \"XmlExample\",\n      \"NumberOfTransactions\": \"3\",\n      \"ControlSum\": 11500000,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"file-payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "GetFilePayment-XML",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{$guid}}"
													}
												],
												"url": {
													"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments/{{xml_file_payment_id}}",
													"protocol": "https",
													"host": [
														"{{MTLS-IG-FQDN}}"
													],
													"path": [
														"rs",
														"open-banking",
														"{{API-VERSION}}",
														"pisp",
														"file-payments",
														"{{xml_file_payment_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "DomesticVRPPayments",
							"item": [
								{
									"name": "CreateDomesticVRPConsentsConsentIdFundsConfirmation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request",
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get(\"jsrsasign_js\"));",
													"eval(pm.environment.get(\"client_jws_helpers\"));",
													"",
													"var jws = client_jws_helpers.createCompactSerializedJws();",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_domestic_vrp_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-fapi-financial-id",
												"value": "{{X-FAPI-FINANCIAL-ID}}",
												"type": "text"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_vrp_payment_consent_id}}\",\n        \"InstructedAmount\": {\n            \"Amount\": \"10.01\",\n            \"Currency\": \"GBP\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents/{{domestic_vrp_payment_consent_id}}/funds-confirmation",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-vrp-consents",
												"{{domestic_vrp_payment_consent_id}}",
												"funds-confirmation"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateDomesticVRPPayment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 and return json body\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a DomesticVRPId\", function () {",
													"    pm.expect(data.Data.DomesticVRPId).to.not.be.null;",
													"});",
													"",
													"postman.setEnvironmentVariable(\"domestic_vrp_id\", data.Data.DomesticVRPId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_domestic_vrp_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_vrp_payment_consent_id}}\",\n        \"PSUAuthenticationMethod\": \"UK.OBIE.SCANotRequired\",\n        \"VRPType\": \"UK.OBIE.VRPType.Sweeping\",\n        \"Initiation\": {\n            \"DebtorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"01233243245676\",\n                \"Name\": \"psu4test\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"RemittanceInformation\": {\n                \"Unstructured\": \"Internal ops code 5120103\",\n                \"Reference\": \"FRESCO-037\"\n            }\n        },\n        \"Instruction\": {\n            \"EndToEndIdentification\": \"12345\",\n            \"InstructionIdentification\": \"54321\",\n            \"LocalInstrument\": \"1.85\",\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"InstructedAmount\": {\n                \"Amount\": \"1.85\",\n                \"Currency\": \"GBP\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-vrps"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateDomesticVRPPayment-PeriodicLimitBreach",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get(\"jsrsasign_js\"));\r",
													"eval(pm.environment.get(\"client_jws_helpers\"));\r",
													"\r",
													"var jws = client_jws_helpers.createCompactSerializedJws();\r",
													"var x_jws_signature = client_jws_helpers.createDetatchedSignatureForm(jws);\r",
													"pm.environment.set('x_jws_signature', x_jws_signature);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400 and return json body\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var data = JSON.parse(responseBody);",
													"",
													"pm.test(\"To have a Errors\", function () {",
													"    pm.expect(data.Errors).to.not.be.null;",
													"    pm.expect(data.Errors[0].ErrorCode).to.be.equal(\"UK.OBIE.Rules.FailsControlParameters\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{access_token_with_domestic_vrp_payment_consent}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											},
											{
												"key": "x-jws-signature",
												"value": "{{x_jws_signature}}"
											},
											{
												"key": "x-vrp-limit-breach-response-simulation",
												"value": "Month-Calendar",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_vrp_payment_consent_id}}\",\n        \"PSUAuthenticationMethod\": \"UK.OBIE.SCANotRequired\",\n        \"VRPType\": \"UK.OBIE.VRPType.Sweeping\",\n        \"Initiation\": {\n            \"DebtorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"01233243245676\",\n                \"Name\": \"psu4test\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"RemittanceInformation\": {\n                \"Unstructured\": \"Internal ops code 5120103\",\n                \"Reference\": \"FRESCO-037\"\n            }\n        },\n        \"Instruction\": {\n            \"EndToEndIdentification\": \"12345\",\n            \"InstructionIdentification\": \"54321\",\n            \"LocalInstrument\": \"1.85\",\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"InstructedAmount\": {\n                \"Amount\": \"1.85\",\n                \"Currency\": \"GBP\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-vrps"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetDomesticVRPPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Rresponse must be 200 and have a json body\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps/{{domestic_vrp_id}}",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-vrps",
												"{{domestic_vrp_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GetDomesticVRPPaymentDetails",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Rresponse must be 200 and have a json body\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{client_credential_access_token_with_payments_scope}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{$guid}}"
											}
										],
										"url": {
											"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps/{{domestic_vrp_id}}/payment-details",
											"protocol": "https",
											"host": [
												"{{MTLS-IG-FQDN}}"
											],
											"path": [
												"rs",
												"open-banking",
												"{{API-VERSION}}",
												"pisp",
												"domestic-vrps",
												"{{domestic_vrp_id}}",
												"payment-details"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "6: Funds confirmation (CBPII)",
			"item": [
				{
					"name": "6.1: Create FundsConformations Consent and Give Consent",
					"item": [
						{
							"name": "5.1.1: Get client_credentials grant access_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"//eval(pm.environment.get('pmlib_code'))",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"",
											"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
											"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have access_token and id_token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"    pm.expect(data.id_token).to.not.be.null;",
											"});",
											"",
											"var access_token_env_var_name = \"client_credential_access_token_with_payments_scope\";",
											"postman.setEnvironmentVariable(access_token_env_var_name, data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"console.log(\"access_token with payment scope being stored in environment variable: '\" + access_token_env_var_name)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_id",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13.1.2: CreateFundsConfirmationConsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"funds_confirmation_consent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require(\"moment\")",
											"var current = moment()",
											"var expirationDateTime = current.add(2, \"M\")",
											"console.log(expirationDateTime)",
											"postman.setEnvironmentVariable(\"expirationDateTime\", expirationDateTime.format());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{client_credential_access_token_with_funds_conformation_scope}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"DebtorAccount\": {\n      \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n      \"Identification\": \"01233243245676\",\n      \"Name\": \"psu4test\"\n    },\n    \"ExpirationDateTime\": \"{{expirationDateTime}}\"\n  }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/cbpii/funds-confirmation-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"cbpii",
										"funds-confirmation-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "13.1.3: GetFundsConformationConsent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 200 and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{client_credential_access_token_with_funds_conformation_scope}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/cbpii/funds-confirmation-consents/{{funds_confirmation_consent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"cbpii",
										"funds-confirmation-consents",
										"{{funds_confirmation_consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13.1.4: Delete Funds Confirmation Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 204 and no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{client_credential_access_token_with_funds_conformation_scope}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/cbpii/funds-confirmation-consents/{{funds_confirmation_consent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"cbpii",
										"funds-confirmation-consents",
										"{{funds_confirmation_consent_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "In this step the TPP is using the Account Access Consent APIs to create a new account-access-consent resource. The consent object, when created, will have the status 'AwaitingAuthorisation'. The TPP will not be able to access any account information until the PSU (the bank account owner) has given their consent and the status has changed to 'Authorized'."
				},
				{
					"name": "6.2: Resource Owner gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "13.2.1: Resource Owner gives Consent (Hybrid Flow)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"var link = client_jws_helpers.createAuthorizeRequestUrl(\"fundsconfirmations openid\", pm.environment.get(\"funds_confirmation_consent_id\"))",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.3: Api Client gets Access Token with User Consent",
					"item": [
						{
							"name": "13.3.2 (optional): Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13.3.1: get authrorization_code grant Access Token (with consent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_fundsconformations_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token_with_fundsconformations_consent\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"",
											"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
											"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "J-u4X34Yr5kO_KSfeOYDvqWEui0",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.4: Create Funds Conformation",
					"item": [
						{
							"name": "13.4.1: Funds Confirmation availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});",
											"",
											"pm.test(\"To have FundsConfirmationId\", function () {",
											"    pm.expect(data.Data.FundsConfirmationId).to.not.be.null;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_fundsconformations_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/cbpii/funds-confirmations",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"ConsentId\": \"{{funds_confirmation_consent_id}}\",\n\t\"Reference\": \"Purchase01\",\n    \"InstructedAmount\": {\n       \"Amount\": \"20.00\",\n       \"Currency\": \"GBP\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/cbpii/funds-confirmations",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"cbpii",
										"funds-confirmations"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "7: Event Notification",
			"item": [
				{
					"name": "7.1 Aggregated polling",
					"item": [
						{
							"name": "7.1.1: Get client_credentials grant Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have access_token and id_token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"    pm.expect(data.id_token).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_accounts_payments_and_fundsconformations_scope\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token_with_accounts_payments_and_fundsconformations_scope\", data.id_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"//eval(pm.environment.get('pmlib_code'))",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"",
											"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
											"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid accounts payments fundsconfirmations",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								},
								"description": "In this step, the TPP needs to obtain an access token using the client_credential OAuth2 grant flow. This access_token must be provided in the request to create the account-access-consent.\n\n[The FAPI Security Profile 1.0 - Part 2: Advanced](https://openid.net/specs/openid-financial-api-part-2-1_0.html#authorization-server) states that the token_endpoint_client_auth_method must be tls_client_auth, or private_key_jwt. self_signed_tls_client_auth is also allowed, but the spec, but is not supported by the Secure API Gateway.\n\nWhen our TPP performed Dynamic Client Registration (back in step 3.2) we requested that the token_endpoint_auth_method to use should be private_key_jwt.\n\nThe url_encoded body of the request contains the scope 'accounts' as specified in the [account and transactions Security and Access Control](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html#security-access-control) part of the Open Banking specifications."
							},
							"response": []
						},
						{
							"name": "7.1.2: EventAggregatedPolling - Initial polling",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200 and return json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"data SETs is not empty\", function () {",
											"    pm.expect(data.sets).to.be.not.empty;",
											"});",
											"",
											"pm.test(\"Have at last one SET\", function () {",
											"    pm.expect(Object.keys(data.sets).length).gte(1)",
											"}); ",
											"",
											" /**",
											"  * delete the imported event",
											"  */",
											"const deleteImportedEventsURL = pm.environment.replaceIn(\"https://{{MTLS-IG-FQDN}}/rs/admin/data/events?apiClientId={{client_id}}&jti={{jti}}\");",
											"const authBearer = pm.environment.replaceIn(\"Bearer {{access_token}}\")",
											"",
											"const postRequest = {",
											"    url: deleteImportedEventsURL,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': authBearer",
											"    }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test(\"response must be 204 and have a json body\", () => {",
											"        pm.expect(response).to.have.status(204);",
											"    });",
											"    pm.environment.unset(\"jti\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * import an event to be sure that at last an event exist in the system for test purposes.",
											" * This event will be deleted after run the request",
											" */",
											"const eventToImport = pm.environment.replaceIn({",
											"    \"client_id\": \"{{client_id}}\",",
											"    \"events\":",
											"        [",
											"",
											"            {",
											"                \"iss\": \"https://examplebank.com/\",",
											"                \"iat\": 1516239022,",
											"                \"jti\": \"{{$randomUUID}}\",",
											"                \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-001\",",
											"                \"aud\": \"7umx5nTR33811QyQfi\",",
											"                \"txn\": \"dfc51628-3479-4b81-ad60-210b43d02306\",",
											"                \"toe\": 1516239022,",
											"                \"events\": {",
											"                    \"urn:uk:org:openbanking:events:resource-update\": {",
											"                        \"subject\": {",
											"                            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",",
											"                            \"http://openbanking.org.uk/rid\": \"pmt-7290-001\",",
											"                            \"http://openbanking.org.uk/rty\": \"domestic-payment\",",
											"                            \"http://openbanking.org.uk/rlk\": [",
											"                                {",
											"                                    \"version\": \"v3.1.10\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v3.1.0/pisp/domestic-payments/pmt-7290-001\"",
											"                                },",
											"                                {",
											"                                    \"version\": \"v1.1\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-001\"",
											"                                }",
											"                            ]",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        ]",
											"});",
											"",
											"const importEventsURL = pm.environment.replaceIn(\"https://{{MTLS-IG-FQDN}}/rs/admin/data/events\");",
											"const authBearer = pm.environment.replaceIn(\"Bearer {{access_token}}\")",
											"",
											"const postRequest = {",
											"    url: importEventsURL,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': authBearer",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(eventToImport)",
											"    }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"",
											"    var data = response.json();",
											"    console.log(\"response: \" + JSON.stringify(data))",
											"    ",
											"    pm.test(\"Import Event: Status code is 201 and return json body\", () => {",
											"        pm.expect(response).to.have.status(201);",
											"        pm.expect(response).to.be.withBody;",
											"        pm.expect(response).to.be.json;",
											"    });",
											"",
											"    pm.test(\"Import Event: data sets is not empty\", function () {",
											"        pm.expect(data.events).to.be.not.empty;",
											"    });",
											"",
											"    pm.test(\"Import Event: Have at last one event\", function () {",
											"        pm.expect(Object.keys(data.events).length).gte(1)",
											"    });",
											"",
											"    postman.setEnvironmentVariable(\"jti\", data.events[0].jti);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_accounts_payments_and_fundsconformations_scope}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"returnImmediately\": true\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/events",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"events"
									]
								},
								"description": "## Initial polling\n\n### pre-requisites\n\nAs a pre requisite to perform this request, an event must be exist in the system, for that reason, the pre request script (see pre request tab) runs a request to import an event, to be sure that there is at least an event in the system for test purposes, the imported event will be deleted after the request runs (see test tab).\n\n### Step 1\n\nIn this first step, the TPP call an ASPSP to poll pending events.\n\nThe ASPSP responds with an array of awaiting events encoded as signed event notifications."
							},
							"response": []
						},
						{
							"name": "7.1.3: EventAggregatedPolling - Acknowledge only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200 and return json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"data sets is empty and have not any event\", function () {",
											"    pm.expect(data.sets).to.be.empty;",
											"});",
											"",
											"pm.environment.unset(\"jti\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * import an event to be sure that at last an event exist in the system for test purposes.",
											" * This event will be deleted after run the request",
											" */",
											"const eventToImport = pm.environment.replaceIn({",
											"    \"client_id\": \"{{client_id}}\",",
											"    \"events\":",
											"        [",
											"",
											"            {",
											"                \"iss\": \"https://examplebank.com/\",",
											"                \"iat\": 1516239022,",
											"                \"jti\": \"{{$randomUUID}}\",",
											"                \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-001\",",
											"                \"aud\": \"7umx5nTR33811QyQfi\",",
											"                \"txn\": \"dfc51628-3479-4b81-ad60-210b43d02306\",",
											"                \"toe\": 1516239022,",
											"                \"events\": {",
											"                    \"urn:uk:org:openbanking:events:resource-update\": {",
											"                        \"subject\": {",
											"                            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",",
											"                            \"http://openbanking.org.uk/rid\": \"pmt-7290-001\",",
											"                            \"http://openbanking.org.uk/rty\": \"domestic-payment\",",
											"                            \"http://openbanking.org.uk/rlk\": [",
											"                                {",
											"                                    \"version\": \"v3.1.10\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v3.1.0/pisp/domestic-payments/pmt-7290-001\"",
											"                                },",
											"                                {",
											"                                    \"version\": \"v1.1\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-001\"",
											"                                }",
											"                            ]",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        ]",
											"});",
											"",
											"const importEventsURL = pm.environment.replaceIn(\"https://{{MTLS-IG-FQDN}}/rs/admin/data/events\");",
											"const authBearer = pm.environment.replaceIn(\"Bearer {{access_token}}\")",
											"",
											"const postRequest = {",
											"    url: importEventsURL,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': authBearer",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(eventToImport)",
											"    }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"",
											"    var data = response.json();",
											"    console.log(\"response: \" + JSON.stringify(data))",
											"    ",
											"    pm.test(\"Import Event: Status code is 201 and return json body\", () => {",
											"        pm.expect(response).to.have.status(201);",
											"        pm.expect(response).to.be.withBody;",
											"        pm.expect(response).to.be.json;",
											"    });",
											"",
											"    pm.test(\"Import Event: data sets is not empty\", function () {",
											"        pm.expect(data.events).to.be.not.empty;",
											"    });",
											"",
											"    pm.test(\"Import Event: Have at last one event\", function () {",
											"        pm.expect(Object.keys(data.events).length).gte(1)",
											"    });",
											"",
											"    postman.setEnvironmentVariable(\"jti\", data.events[0].jti);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_accounts_payments_and_fundsconformations_scope}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ack\": [\"{{jti}}\"]\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/events",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"events"
									]
								},
								"description": "## Acknowledge only\n\n### pre-requisites\n\nAs a pre requisite to perform this request, an event must be exist in the system, for that reason, the pre request script (see pre request tab) runs a request to import an event, to be sure that there is at least an event in the system for test purposes.\n\n### Step 2a\n\nFollowing the initial poll the TPP has the option to only acknowledge receipt if they do not wish to receive further events at a given time:\n\n- A TPP calls an ASPSP to acknowledge the event notifications that have been successfully processed.\n- If required, the TPP also sends indicators of event notifications which they could not process due to an error.\n- The ASPSP responds positively but sends no further events."
							},
							"response": []
						},
						{
							"name": "7.1.4: EventAggregatedPolling - Poll and Acknowledge",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200 and return json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"data sets is empty and have not any event\", function () {",
											"    pm.expect(data.sets).to.be.empty;",
											"});",
											"",
											"/**",
											"  * delete the imported event",
											"  */",
											"const deleteImportedEventsURL = pm.environment.replaceIn(\"https://{{MTLS-IG-FQDN}}/rs/admin/data/events?apiClientId={{client_id}}&jti={{jti}}\");",
											"const authBearer = pm.environment.replaceIn(\"Bearer {{access_token}}\")",
											"",
											"const postRequest = {",
											"    url: deleteImportedEventsURL,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Authorization': authBearer",
											"    }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"    pm.test(\"response must be 204 and have a json body\", () => {",
											"        pm.expect(response).to.have.status(204);",
											"    });",
											"    pm.environment.unset(\"jti\");",
											"    pm.environment.unset(\"jti_ack\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/**",
											" * import two events to be sure that at last an event exist in the system for test purposes.",
											" * the imported events will be deleted after run the request",
											" */",
											"const eventToImport = pm.environment.replaceIn({",
											"    \"client_id\": \"{{client_id}}\",",
											"    \"events\":",
											"        [",
											"            {",
											"                \"iss\": \"https://examplebank.com/\",",
											"                \"iat\": 1516239022,",
											"                \"jti\": \"{{$randomUUID}}\",",
											"                \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-001\",",
											"                \"aud\": \"7umx5nTR33811QyQfi\",",
											"                \"txn\": \"dfc51628-3479-4b81-ad60-210b43d02306\",",
											"                \"toe\": 1516239022,",
											"                \"events\": {",
											"                    \"urn:uk:org:openbanking:events:resource-update\": {",
											"                        \"subject\": {",
											"                            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",",
											"                            \"http://openbanking.org.uk/rid\": \"pmt-7290-001\",",
											"                            \"http://openbanking.org.uk/rty\": \"domestic-payment\",",
											"                            \"http://openbanking.org.uk/rlk\": [",
											"                                {",
											"                                    \"version\": \"v3.1.10\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v3.1.0/pisp/domestic-payments/pmt-7290-001\"",
											"                                },",
											"                                {",
											"                                    \"version\": \"v1.1\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-001\"",
											"                                }",
											"                            ]",
											"                        }",
											"                    }",
											"                }",
											"            },",
											"            {",
											"                \"iss\": \"https://examplebank.com/\",",
											"                \"iat\": 1516239022,",
											"                \"jti\": \"{{$randomUUID}}\",",
											"                \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-001\",",
											"                \"aud\": \"7umx5nTR33811QyQfi\",",
											"                \"txn\": \"dfc51628-3479-4b81-ad60-210b43d02306\",",
											"                \"toe\": 1516239022,",
											"                \"events\": {",
											"                    \"urn:uk:org:openbanking:events:resource-update\": {",
											"                        \"subject\": {",
											"                            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",",
											"                            \"http://openbanking.org.uk/rid\": \"pmt-7290-001\",",
											"                            \"http://openbanking.org.uk/rty\": \"domestic-payment\",",
											"                            \"http://openbanking.org.uk/rlk\": [",
											"                                {",
											"                                    \"version\": \"v3.1.10\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v3.1.0/pisp/domestic-payments/pmt-7290-001\"",
											"                                },",
											"                                {",
											"                                    \"version\": \"v1.1\",",
											"                                    \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-001\"",
											"                                }",
											"                            ]",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        ]",
											"});",
											"",
											"const importEventsURL = pm.environment.replaceIn(\"https://{{MTLS-IG-FQDN}}/rs/admin/data/events\");",
											"const authBearer = pm.environment.replaceIn(\"Bearer {{access_token}}\")",
											"",
											"const postRequest = {",
											"    url: importEventsURL,",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'Authorization': authBearer",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify(eventToImport)",
											"    }",
											"};",
											"",
											"pm.sendRequest(postRequest, (error, response) => {",
											"    if (error) {",
											"        console.log(error);",
											"    }",
											"",
											"    var data = response.json();",
											"    console.log(\"response: \" + JSON.stringify(data))",
											"",
											"    pm.test(\"Import Event: Status code is 201 and return json body\", () => {",
											"        pm.expect(response).to.have.status(201);",
											"        pm.expect(response).to.be.withBody;",
											"        pm.expect(response).to.be.json;",
											"    });",
											"",
											"    pm.test(\"Import Event: data sets is not empty\", function () {",
											"        pm.expect(data.events).to.be.not.empty;",
											"    });",
											"",
											"    pm.test(\"Import events: Have at last two events\", function () {",
											"       pm.expect(Object.keys(data.events).length).gte(2)",
											"    });    ",
											"",
											"    postman.setEnvironmentVariable(\"jti_ack\", data.events[0].jti);",
											"    postman.setEnvironmentVariable(\"jti\", data.events[1].jti);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_accounts_payments_and_fundsconformations_scope}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"returnImmediately\": true,\n    \"ack\": [\n        \"{{jti_ack}}\"\n    ],\n    \"setErrs\": {\n        \"{{jti}}\": {\n            \"err\": \"jwtIss\",\n            \"description\": \"Issuer is invalid or could not be verified\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/events",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"events"
									]
								},
								"description": "In this step, the TPP needs to obtain an access token using the client_credential OAuth2 grant flow. This access_token must be provided in the request to create the account-access-consent.\n\n[The FAPI Security Profile 1.0 - Part 2: Advanced](https://openid.net/specs/openid-financial-api-part-2-1_0.html#authorization-server) states that the token_endpoint_client_auth_method must be tls_client_auth, or private_key_jwt. self_signed_tls_client_auth is also allowed, but the spec, but is not supported by the Secure API Gateway.\n\nWhen our TPP performed Dynamic Client Registration (back in step 3.2) we requested that the token_endpoint_auth_method to use should be private_key_jwt.\n\nThe url_encoded body of the request contains the scope 'accounts' as specified in the [account and transactions Security and Access Control](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html#security-access-control) part of the Open Banking specifications."
							},
							"response": []
						}
					],
					"description": "The Aggregated Polling API allows a ASPSPs to deliver multiple signed event notifications to TPPs though the use of polling.\n\n- [Aggregated polling api profile](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/aggregated-polling-api-profile.html)\n- [Aggregated polling flow](https://github.com/SecureApiGateway/SecureApiGateway/wiki/Aggregated-polling-flow)"
				},
				{
					"name": "Event Management (via Admin API)",
					"item": [
						{
							"name": "14.1.2.1: Get client_credentials grant Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have access_token and id_token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"    pm.expect(data.id_token).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_accounts_payments_and_fundsconformations_scope\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token_with_accounts_payments_and_fundsconformations_scope\", data.id_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"//eval(pm.environment.get('pmlib_code'))",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"eval(pm.environment.get(\"client_jws_helpers\"));",
											"",
											"var token_endpoint_auth_method = pm.environment.get(\"TOKEN_ENDPOINT_AUTH_METHOD\");",
											"client_jws_helpers.setClientCredentialRequestHeaders(token_endpoint_auth_method);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid accounts payments fundsconfirmations",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								},
								"description": "In this step, the TPP needs to obtain an access token using the client_credential OAuth2 grant flow. This access_token must be provided in the request to create the account-access-consent.\n\n[The FAPI Security Profile 1.0 - Part 2: Advanced](https://openid.net/specs/openid-financial-api-part-2-1_0.html#authorization-server) states that the token_endpoint_client_auth_method must be tls_client_auth, or private_key_jwt. self_signed_tls_client_auth is also allowed, but the spec, but is not supported by the Secure API Gateway.\n\nWhen our TPP performed Dynamic Client Registration (back in step 3.2) we requested that the token_endpoint_auth_method to use should be private_key_jwt.\n\nThe url_encoded body of the request contains the scope 'accounts' as specified in the [account and transactions Security and Access Control](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html#security-access-control) part of the Open Banking specifications."
							},
							"response": []
						},
						{
							"name": "14.1.2: import events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"jti\", data.events[0].jti);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"{{client_id}}\",\n  \"events\":\n  [\n    {\n      \"iss\": \"https://examplebank.com/\",\n      \"iat\": 1516239022,\n      \"jti\": \"{{$randomUUID}}\",\n      \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-001\",\n      \"aud\": \"7umx5nTR33811QyQfi\",\n      \"txn\": \"dfc51628-3479-4b81-ad60-210b43d02306\",\n      \"toe\": 1516239022,\n      \"events\": {\n        \"urn:uk:org:openbanking:events:resource-update\": {\n          \"subject\": {\n            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",\n            \"http://openbanking.org.uk/rid\": \"pmt-7290-001\",\n            \"http://openbanking.org.uk/rty\": \"domestic-payment\",\n            \"http://openbanking.org.uk/rlk\": [\n              {\n                \"version\": \"v3.1.10\",\n                \"link\": \"https://examplebank.com/api/open-banking/v3.1.0/pisp/domestic-payments/pmt-7290-001\"\n              },\n              {\n                \"version\": \"v1.1\",\n                \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-001\"\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"iss\": \"https://examplebank.com/\",\n      \"iat\": 1516239022,\n      \"jti\": \"{{$randomUUID}}\",\n      \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-002\",\n      \"aud\": \"7umx5nTR33811QyQfi\",\n      \"txn\": \"dfc51628-3479-4b81-ad60-210b43d02306\",\n      \"toe\": 1516239022,\n      \"events\": {\n        \"urn:uk:org:openbanking:events:resource-update\": {\n          \"subject\": {\n            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",\n            \"http://openbanking.org.uk/rid\": \"pmt-7290-002\",\n            \"http://openbanking.org.uk/rty\": \"domestic-payment\",\n            \"http://openbanking.org.uk/rlk\": [\n              {\n                \"version\": \"v3.1.10\",\n                \"link\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-002\"\n              },\n              {\n                \"version\": \"v1.1\",\n                \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-002\"\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      \"iss\": \"https://examplebank.com/\",\n      \"iat\": 1516239022,\n      \"jti\": \"{{$randomUUID}}\",\n      \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-003\",\n      \"aud\": \"7umx5nTR33811QyQfi\",\n      \"txn\": \"dfc51628-3479-4b81-ad60-210b43d02306\",\n      \"toe\": 1516239022,\n      \"events\": {\n        \"urn:uk:org:openbanking:events:resource-update\": {\n          \"subject\": {\n            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",\n            \"http://openbanking.org.uk/rid\": \"pmt-7290-003\",\n            \"http://openbanking.org.uk/rty\": \"domestic-payment\",\n            \"http://openbanking.org.uk/rlk\": [\n              {\n                \"version\": \"v3.1.10\",\n                \"link\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-003\"\n              },\n              {\n                \"version\": \"v1.1\",\n                \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-003\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/admin/data/events",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"admin",
										"data",
										"events"
									]
								},
								"description": "Push events to the system for test purposes."
							},
							"response": []
						},
						{
							"name": "14.1.3: update events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 200 and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"{{client_id}}\",\n  \"events\":\n  [\n    {\n      \"iss\": \"https://examplebank.com/\",\n      \"iat\": 1516239022,\n      \"jti\": \"{{jti}}\",\n      \"sub\": \"https://examplebank.com/api/open-banking/v3.1.10/pisp/domestic-payments/pmt-7290-xx1\",\n      \"aud\": \"7umx5nTR33811QyQfi\",\n      \"txn\": \"dfc51628-3479-4b81-ad60-210b43d00001\",\n      \"toe\": 1516239022,\n      \"events\": {\n        \"urn:uk:org:openbanking:events:resource-update\": {\n          \"subject\": {\n            \"subject_type\": \"http://openbanking.org.uk/rid_http://openbanking.org.uk/rty\",\n            \"http://openbanking.org.uk/rid\": \"pmt-7290-XX1\",\n            \"http://openbanking.org.uk/rty\": \"domestic-payment\",\n            \"http://openbanking.org.uk/rlk\": [\n              {\n                \"version\": \"v3.1.10\",\n                \"link\": \"https://examplebank.com/api/open-banking/v3.1.0/pisp/domestic-payments/pmt-7290-xx1\"\n              },\n              {\n                \"version\": \"v1.1\",\n                \"link\": \"https://examplebank.com/api/open-banking/v1.1/payment-submissions/pmt-7290-xx1\"\n              }\n            ]\n          }\n        }\n      }\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/admin/data/events",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"admin",
										"data",
										"events"
									]
								},
								"description": "Update existing events."
							},
							"response": []
						},
						{
							"name": "14.1.5: export events by client id (tpp id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 200 and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/admin/data/events?apiClientId={{client_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"admin",
										"data",
										"events"
									],
									"query": [
										{
											"key": "apiClientId",
											"value": "{{client_id}}"
										}
									]
								},
								"description": "Export all events by client."
							},
							"response": []
						},
						{
							"name": "14.1.6: delete cilent (tpp) events by jti",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 204 and have a json body\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/admin/data/events?apiClientId={{client_id}}&jti={{jti}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"admin",
										"data",
										"events"
									],
									"query": [
										{
											"key": "apiClientId",
											"value": "{{client_id}}"
										},
										{
											"key": "jti",
											"value": "{{jti}}"
										}
									]
								},
								"description": "Delete an event by client and jti"
							},
							"response": []
						},
						{
							"name": "14.1.7: delete all client (tpp) events",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 204 and have a json body\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/admin/data/events?apiClientId={{client_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"admin",
										"data",
										"events"
									],
									"query": [
										{
											"key": "apiClientId",
											"value": "{{client_id}}"
										}
									]
								},
								"description": "Delete all events by client"
							},
							"response": []
						}
					],
					"description": "SAPI-G provides a feature that lets you create your own collection of `Event Notification messages` for test purposes.\n\nPlease see: [Create Test Facility Bank Event Notification Messages Data](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/Create-Test-Facility-Bank-Event-Notification-Messages-Data)"
				}
			],
			"description": "The Event Notification API is an API to allow a TPP to receive event notifications\n\n- [Event notification API profile](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/event-notification-api-profile.html)\n    \n\nEvent notifications are aligned with the Security Event Token standard (SET), a proposed IETF standard for exchanging information about security events.\n\nAn event notification is structured as a JWT, indicating an event has occurred through a set of claims.\nSee [RFC8417](https://datatracker.ietf.org/doc/html/rfc8417)"
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "Query OBIE Directory OBThirdPartyProviders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be a string and status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"var data = pm.response.text()",
									"console.log(\"software statement\", data)",
									"",
									"postman.setEnvironmentVariable(\"software_statement\", data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/jws+json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://matls-api.openbankingtest.org.uk/scim/v2/OBThirdPartyProviders/0015800001041REAAY",
							"protocol": "https",
							"host": [
								"matls-api",
								"openbankingtest",
								"org",
								"uk"
							],
							"path": [
								"scim",
								"v2",
								"OBThirdPartyProviders",
								"0015800001041REAAY"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}