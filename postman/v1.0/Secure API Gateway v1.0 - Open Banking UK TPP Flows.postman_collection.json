{
	"info": {
		"_postman_id": "98563349-adc1-4529-bfbe-28c0338393b5",
		"name": "Secure API Gateway v1.0 - Open Banking UK TPP Flows",
		"description": "# Welcome to the Postman Collection for the Secure API Gateway, Open Banking Edition.\n\nThis collection can be used to try out the [Secure API Gateway](https://github.com/SecureApiGateway), v1.0.0 Open Banking APIs. Requests made by this postman collection will be made against a UK Open Banking Test Facility created using the Secure API Gateway, hosted by ForgeRock.\n\nA UK Open Banking Test Facility is an implementation of the UK Open Banking specifications, backed by a 'Test Facility' Bank that returns representative error codes and API responses. A test Facility allows developers to build applications against a bank's APIs without having to use the live bank APIs. In other words it is a developer sandbox that allows FinTecs to develop applications against a safe representation of a bank's offered APIs. In the UK every financial insitution that offers open banking APIs must also offer a Test Facility.\n\nThe Secure API Gateway can also be used to build production Open Banking system, and to develop and deploy custom APIs secured to the same highly secure FAPI standards as Open Banking APIs.\n\nThe Secure API Gateway is an Open Source project inititated by ForgeRock. It uses ForgeRock's Identity Gateway and Identity Cloud to provide FAPI level API identity and access management for your APIs. It is intended to be used by ForgeRock customers wishing to develop highly secure APIs that are protected by;\n\n- Dynamic Client Registration - Use API endpoints to securely register a client to use the protected API. The client must have both TLS certificates and a Software Statment Assertion issued by a trusted directory\n- Mutual Auth TLS (MTLS) - client certs issued by a trusted directory are used to identify both client and server in the TLS transport layer encryption\n- Software Statement bound Access Tokens. Checks are made during API access to ensure that the MTLS certificate presented by the Api Client and the presented access_token are associated with the same software statement in the trusted directory\n    \n\n## Environment variables:\n\n- This is meant to be run with the environment **v1.0.0 release cluster**\n    \n\n#### Variables Types:\n\nThere are two kind of variables used across this collection:\n\n- The upper case with dash variables (_**VAR-NAME**_) are used as constants dynamically in the requests and they need to be initialise with the proper values before run any collection request.\n- The lower case with underscore variables (_**dynamic_var_name**_) are created dynamically when a request is running and are used across the next requests, these variables are updated with the proper value depending of the request step. These variables can be deleted to reset the environment variables.\n    \n\n## Initialise the collection\n\nTo start sending request to **SAPI-G Open Banking edition**, make sure that you have set the **CURRENT VALUE** of below environment variables first:\n\n| **Variable** | **Description** | **INITIAL VALUE** |\n| --- | --- | --- |\n| ENVIRONMENT | Environment to send the request, this value will be replace in the FQDN variables defined. | {{ENVIRONMENT}} |\n| IG-FQDN | Identity Gateway Host name | obdemo.{ENVIRONMENT}.forgerock.financial |\n| RCS-FQDN | Resource Consent service Host name | rcs.{ENVIRONMENT}.forgerock.financial |\n| RS-FQDN | Resource service Host name | rs.{ENVIRONMENT}.forgerock.financial |\n| IDENTITY-PLATFORM-FQDN | Identity platform Host name | iam.{ENVIRONMENT}.forgerock.financial |\n| REALM | Identity access management realm name | {{REALM}} |\n| API-VERSION | Api version for requests | {{API-VERSION}} |\n| OB-SIGNING-KEY-ID | OB Directory Signing key Id | {{OB-SIGNING-KEY-ID}} |\n| OB-SEAL-PRIVATE-KEY | OB Seal private key | {{OB-SEAL-PRIVATE-KEY}} |\n| OB-SOFTWARE-ID | OB Directory Software Statement Client Id | {{OB-SOFTWARE-ID}} |\n| OB-SCOPES | Scopes expected by OB directory to obtain the access token from OB Authorisation server | {{OB-SCOPES}} |\n| OB-AUDIENCE | Auth resource identifier | {{OB-AUDIENCE}} |\n| OB-TOKEN-URL | OB directory Access token endpoint | {{OB-TOKEN-URL}} |\n| OB-SSA-URL | OB directory endpoint to retrieve an SSA | {{OB-SSA-URL}} |\n| OB-ORGANIZATION-ID | OB directory Organisation ID | {{OB-ORGANIZATION-ID}} |\n| X-FAPI-FINANCIAL-ID | Header value to trace the request across services | {{X-FAPI-FINANCIAL-ID}} |\n| X-FAPI-CUSTOMER-LAST-LOGGED-TIME | Header value to trace the request across services | {{X-FAPI-CUSTOMER-LAST-LOGGED-TIME}} |\n| X-FAPI-CUSTOMER-IP-ADDRESS | Header value to trace the request across services | {{X-FAPI-CUSTOMER-IP-ADDRESS}} |\n| X-FAPI-INTERACTION-ID | Header value to trace the request across services | {{X-FAPI-INTERACTION-ID}} |\n| END-USER-ACCOUNT-USER-ID | User ID created in the IDM platform for test purposes | {{END-USER-ACCOUNT-USER-ID}} |\n| END-USER-ACCOUNT-USER-NAME | User Name created in the IDM platform for test purposes | {{END-USER-ACCOUNT-USER-NAME}} |\n| END-USER-ACCOUNT-PASSWORD | User password created in the IDM platform for test purposes | {{END-USER-ACCOUNT-PASSWORD}} |\n\n> After set these variables you need initialise the collection running the",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8510292",
		"_collection_link": "https://forgerock-obri.postman.co/workspace/02b51b27-f1d1-4b38-9b77-0e8d085c9a91/collection/32106-98563349-adc1-4529-bfbe-28c0338393b5?action=share&creator=8510292&source=collection_link"
	},
	"item": [
		{
			"name": "1: Initialise postman variables from the discovery endpoints",
			"item": [
				{
					"name": "Load JSRASign library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200)",
									"    pm.environment.set('jsrsasign_js', responseBody);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
							"protocol": "http",
							"host": [
								"kjur",
								"github",
								"io"
							],
							"path": [
								"jsrsasign",
								"jsrsasign-latest-all-min.js"
							]
						},
						"description": "This request loads a library that is used by postman requests in this collection. This request must be run once in order for later requests to succeed."
					},
					"response": []
				},
				{
					"name": "Load pmlib_code library",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200)",
									"    pm.environment.set(\"pmlib_code\", responseBody)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://joolfe.github.io/postman-util-lib/dist/bundle.js",
							"protocol": "https",
							"host": [
								"joolfe",
								"github",
								"io"
							],
							"path": [
								"postman-util-lib",
								"dist",
								"bundle.js"
							]
						},
						"description": "This request loads a library that is used by postman requests in this collection. This request must be run once in order for later requests to succeed."
					},
					"response": []
				},
				{
					"name": "Openid Connect well known endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a json body\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"as_issuer_id\", data.issuer);",
									"postman.setEnvironmentVariable(\"as_introspection_endpoint\", data.introspection_endpoint);",
									"postman.setEnvironmentVariable(\"as_userinfo_endpoint\", data.userinfo_endpoint);",
									"postman.setEnvironmentVariable(\"as_authorization_endpoint\", data.authorization_endpoint);",
									"// build auth endpoint, of the form: /am/json/realms/root/realms/alpha/authenticate",
									"postman.setEnvironmentVariable(\"as_authentication_endpoint\", data.authorization_endpoint.replace(\"/am/oauth2/\", \"/am/json/\").replace(\"/authorize\", \"/authenticate\"));",
									"postman.setEnvironmentVariable(\"as_token_endpoint\", data.token_endpoint);",
									"postman.setEnvironmentVariable(\"aspsp_registration_endpoint\", data.registration_endpoint);",
									"",
									"console.log(pm.environment.get(\"as_authorization_endpoint\"))",
									"console.log(pm.environment.get(\"as_authentication_endpoint\"))",
									"",
									"// variable to store the psu_auth_code manually when the hibrid flow is used",
									"pm.environment.set(\"psu_auth_code\", \"\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true
						}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IG-FQDN}}/am/oauth2/realms/root/realms/alpha/.well-known/openid-configuration",
							"protocol": "https",
							"host": [
								"{{IG-FQDN}}"
							],
							"path": [
								"am",
								"oauth2",
								"realms",
								"root",
								"realms",
								"alpha",
								".well-known",
								"openid-configuration"
							]
						},
						"description": "Get the AS discovery endpoints. This will load all the AS endpoints and constants into your postman environment."
					},
					"response": [
						{
							"name": "Openid Connect well known endpoint",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/.well-known/openid-configuration",
									"protocol": "https",
									"host": [
										"sapig",
										"ob-sandbox-v1",
										"forgerock",
										"financial"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										".well-known",
										"openid-configuration"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 13 Apr 2023 14:07:56 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "5301"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15724800; includeSubDomains"
								},
								{
									"key": "via",
									"value": "1.1 google"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-fapi-interaction-id",
									"value": "01e1274e-e7c2-495c-ba2e-cc2344777620"
								},
								{
									"key": "x-forgerock-transactionid",
									"value": "01e1274e-e7c2-495c-ba2e-cc2344777620/0"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								}
							],
							"cookie": [],
							"body": "{\n    \"request_parameter_supported\": true,\n    \"pushed_authorization_request_endpoint\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/par\",\n    \"introspection_encryption_alg_values_supported\": [\n        \"ECDH-ES+A256KW\",\n        \"ECDH-ES+A192KW\",\n        \"RSA-OAEP\",\n        \"ECDH-ES+A128KW\",\n        \"RSA-OAEP-256\",\n        \"A128KW\",\n        \"A256KW\",\n        \"ECDH-ES\",\n        \"dir\",\n        \"A192KW\"\n    ],\n    \"claims_parameter_supported\": true,\n    \"introspection_endpoint\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/introspect\",\n    \"issuer\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha\",\n    \"id_token_encryption_enc_values_supported\": [\n        \"A256GCM\",\n        \"A192GCM\",\n        \"A128GCM\",\n        \"A128CBC-HS256\",\n        \"A192CBC-HS384\",\n        \"A256CBC-HS512\"\n    ],\n    \"userinfo_encryption_enc_values_supported\": [\n        \"A256GCM\",\n        \"A192GCM\",\n        \"A128GCM\",\n        \"A128CBC-HS256\",\n        \"A192CBC-HS384\",\n        \"A256CBC-HS512\"\n    ],\n    \"authorization_endpoint\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/authorize\",\n    \"authorization_encryption_alg_values_supported\": [\n        \"ECDH-ES+A256KW\",\n        \"ECDH-ES+A192KW\",\n        \"RSA-OAEP\",\n        \"ECDH-ES+A128KW\",\n        \"RSA-OAEP-256\",\n        \"A128KW\",\n        \"A256KW\",\n        \"ECDH-ES\",\n        \"dir\",\n        \"A192KW\"\n    ],\n    \"introspection_encryption_enc_values_supported\": [\n        \"A256GCM\",\n        \"A192GCM\",\n        \"A128GCM\",\n        \"A128CBC-HS256\",\n        \"A192CBC-HS384\",\n        \"A256CBC-HS512\"\n    ],\n    \"claims_supported\": [\n        \"acr\",\n        \"openbanking_intent_id\"\n    ],\n    \"rcs_request_signing_alg_values_supported\": [\n        \"PS256\"\n    ],\n    \"token_endpoint_auth_methods_supported\": [\n        \"private_key_jwt\",\n        \"tls_client_auth\"\n    ],\n    \"tls_client_certificate_bound_access_tokens\": true,\n    \"response_modes_supported\": [\n        \"query.jwt\",\n        \"fragment\",\n        \"jwt\",\n        \"form_post.jwt\",\n        \"form_post\",\n        \"fragment.jwt\",\n        \"query\"\n    ],\n    \"backchannel_logout_session_supported\": true,\n    \"token_endpoint\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/access_token\",\n    \"response_types_supported\": [\n        \"code\",\n        \"code id_token\",\n        \"id_token\"\n    ],\n    \"authorization_encryption_enc_values_supported\": [\n        \"A256GCM\",\n        \"A192GCM\",\n        \"A128GCM\",\n        \"A128CBC-HS256\",\n        \"A192CBC-HS384\",\n        \"A256CBC-HS512\"\n    ],\n    \"revocation_endpoint_auth_methods_supported\": [\n        \"client_secret_post\",\n        \"private_key_jwt\",\n        \"self_signed_tls_client_auth\",\n        \"tls_client_auth\",\n        \"none\",\n        \"client_secret_basic\"\n    ],\n    \"request_uri_parameter_supported\": true,\n    \"grant_types_supported\": [\n        \"implicit\",\n        \"urn:ietf:params:oauth:grant-type:saml2-bearer\",\n        \"refresh_token\",\n        \"password\",\n        \"client_credentials\",\n        \"urn:ietf:params:oauth:grant-type:device_code\",\n        \"authorization_code\",\n        \"urn:openid:params:grant-type:ciba\",\n        \"urn:ietf:params:oauth:grant-type:uma-ticket\",\n        \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\n    ],\n    \"version\": \"3.0\",\n    \"userinfo_endpoint\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/userinfo\",\n    \"require_request_uri_registration\": true,\n    \"code_challenge_methods_supported\": [\n        \"plain\",\n        \"S256\"\n    ],\n    \"id_token_encryption_alg_values_supported\": [\n        \"ECDH-ES+A256KW\",\n        \"ECDH-ES+A192KW\",\n        \"RSA-OAEP\",\n        \"ECDH-ES+A128KW\",\n        \"RSA-OAEP-256\",\n        \"A128KW\",\n        \"A256KW\",\n        \"ECDH-ES\",\n        \"dir\",\n        \"A192KW\"\n    ],\n    \"authorization_signing_alg_values_supported\": [\n        \"PS384\",\n        \"RS384\",\n        \"EdDSA\",\n        \"ES384\",\n        \"HS256\",\n        \"HS512\",\n        \"ES256\",\n        \"RS256\",\n        \"HS384\",\n        \"ES512\",\n        \"PS256\",\n        \"PS512\",\n        \"RS512\"\n    ],\n    \"request_object_signing_alg_values_supported\": [\n        \"PS256\"\n    ],\n    \"request_object_encryption_alg_values_supported\": [\n        \"ECDH-ES+A256KW\",\n        \"ECDH-ES+A192KW\",\n        \"ECDH-ES+A128KW\",\n        \"RSA-OAEP\",\n        \"RSA-OAEP-256\",\n        \"A128KW\",\n        \"A256KW\",\n        \"ECDH-ES\",\n        \"dir\",\n        \"A192KW\"\n    ],\n    \"rcs_response_signing_alg_values_supported\": [\n        \"PS256\"\n    ],\n    \"introspection_signing_alg_values_supported\": [\n        \"PS256\"\n    ],\n    \"check_session_iframe\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/connect/checkSession\",\n    \"scopes_supported\": [\n        \"openid\",\n        \"payments\",\n        \"fundsconfirmations\",\n        \"accounts\",\n        \"eventpolling\"\n    ],\n    \"backchannel_logout_supported\": true,\n    \"acr_values_supported\": [\n        \"urn:openbanking:psd2:sca\",\n        \"urn:openbanking:psd2:ca\"\n    ],\n    \"request_object_encryption_enc_values_supported\": [\n        \"A256GCM\",\n        \"A192GCM\",\n        \"A128GCM\",\n        \"A128CBC-HS256\",\n        \"A192CBC-HS384\",\n        \"A256CBC-HS512\"\n    ],\n    \"rcs_request_encryption_alg_values_supported\": [\n        \"ECDH-ES+A256KW\",\n        \"ECDH-ES+A192KW\",\n        \"RSA-OAEP\",\n        \"ECDH-ES+A128KW\",\n        \"RSA-OAEP-256\",\n        \"A128KW\",\n        \"A256KW\",\n        \"ECDH-ES\",\n        \"dir\",\n        \"A192KW\"\n    ],\n    \"userinfo_signing_alg_values_supported\": [\n        \"PS256\"\n    ],\n    \"require_pushed_authorization_requests\": false,\n    \"rcs_response_encryption_enc_values_supported\": [\n        \"A256GCM\",\n        \"A192GCM\",\n        \"A128GCM\",\n        \"A128CBC-HS256\",\n        \"A192CBC-HS384\",\n        \"A256CBC-HS512\"\n    ],\n    \"userinfo_encryption_alg_values_supported\": [\n        \"ECDH-ES+A256KW\",\n        \"ECDH-ES+A192KW\",\n        \"RSA-OAEP\",\n        \"ECDH-ES+A128KW\",\n        \"RSA-OAEP-256\",\n        \"A128KW\",\n        \"A256KW\",\n        \"ECDH-ES\",\n        \"dir\",\n        \"A192KW\"\n    ],\n    \"end_session_endpoint\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/connect/endSession\",\n    \"rcs_request_encryption_enc_values_supported\": [\n        \"A256GCM\",\n        \"A192GCM\",\n        \"A128GCM\",\n        \"A128CBC-HS256\",\n        \"A192CBC-HS384\",\n        \"A256CBC-HS512\"\n    ],\n    \"revocation_endpoint\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/token/revoke\",\n    \"rcs_response_encryption_alg_values_supported\": [\n        \"ECDH-ES+A256KW\",\n        \"ECDH-ES+A192KW\",\n        \"ECDH-ES+A128KW\",\n        \"RSA-OAEP\",\n        \"RSA-OAEP-256\",\n        \"A128KW\",\n        \"A256KW\",\n        \"ECDH-ES\",\n        \"dir\",\n        \"A192KW\"\n    ],\n    \"token_endpoint_auth_signing_alg_values_supported\": [\n        \"PS256\"\n    ],\n    \"jwks_uri\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/connect/jwk_uri\",\n    \"subject_types_supported\": [\n        \"public\",\n        \"pairwise\"\n    ],\n    \"id_token_signing_alg_values_supported\": [\n        \"PS256\"\n    ],\n    \"registration_endpoint\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/register\"\n}"
						}
					]
				}
			],
			"description": "The Secure API Gateway offers a number of endpoints that can be used to help client applications manage authentication and authorization as well as manipulate resources. Before we can register to use the Open Banking APIs the Api Client will need to obtain information from one of these endpoints.\n\n## The Openid Connect well-known endpoint.\n\nThis endpoint is covered by the following RFC specifcations document;\n\n[https://openid.net/specs/openid-connect-discovery-1_0.html](https://openid.net/specs/openid-connect-discovery-1_0.html)\n\nThis endpoint can be used to obtain the URLs to be used for authorization and authentication as well as the OAuth2/OIDC settings supported by the authorization server. A client of the APIs should use the links specified in this document rather than hard coding the URLs in the client application.\n\n## The Resource Server's discovery endpoint.\n\nThere returned json document contains all of the resources and endpoints via which they can be managed. Again, a client should use the contents of this response rather than hard coding urls into their applications.\n\nThis collection will make GET requests agains the Secure API Gateway deployment's Open ID Connect well known endpoint, and the resource server discovery endpoints. The responses from those requests will be used to initialise environment variables used through all the following requests. For example the token endpoint will be found in the response of the AS well_known endpoint.\n\n**NOTE:** You must run the requests in this section before trying any requests in later steps.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "2: Perform Dynamic Client Registration (DCR)",
			"item": [
				{
					"name": "2.1a Create Registration Request JWT using Secure API Gateway issued test Software Statement",
					"item": [
						{
							"name": "2.1a.1 Get test certificates JWKS from Secure API Gateway",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"ApiClientJWKs\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"org_id\": \"PSDGB-FFA-5f563e89742b2800145c7da1\",\n    \"org_name\": \"Acme Fintech\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/issuecert",
									"protocol": "https",
									"host": [
										"{{TRUSTEDDIR-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"issuecert"
									]
								},
								"description": "The Secure API Gateway's Trusted Directory functionality works in a different way from a production grade Trusted Directory such as the Open Banking Test Directory. In a production grade directory you, as a participant in the trusted ecosystem, would typically create a Software statement by providing the necessary information to do so. There will typically be some background checks and validation to ensure that no bad actors are entering the trusted ecosystem.\n\nOnce the Software Statement has been created it is then usually necessary for the participant to create a [Certificate Signing Request](https://www.rfc-editor.org/rfc/rfc4211) and upload it to the trusted directory where a public key will be created, signed and made available for download. The public key will be made available in JWKS form at a jwks_uri. This way the private key is kept by the client and can be protected using best key management practices, while the public key is available for other participants in the ecosystem to validate signatures etc against.\n\nThe participant will need to create two sets of keys;\n\na) Transport Keys - used for Mutual Authentication Transport Layer Security (MaTLS). This allows both client and server to identifiy and trust each other, based on their shared trust of the Trusted Directory in which the Software Statement is managed.\n\nb) Signing Keys - Used to create JSON Web Signatures used for authenticity, integrity and non-repudiation purposes.\n\nA Software Statement Assertion (SSA) is a JSON representation of the software statement signed by the Trusted Directory. It is in a JWS format. A Trusted Directory will also provide a secure mechanism to obtain an SSA for a specific Software Statement also.\n\n## The Secure API Gateway's Trusted Directory\n\nBecause it is only for use in demonstration systems and for API providers to use during development of API systems the Secure API Gateway Trusted Directory works in a convenient but insecure way."
							},
							"response": [
								{
									"name": "2.1a.1 Get test certificates JWKS from Secure API Gateway",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"org_id\": \"PSDGB-FFA-5f563e89742b2800145c7da1\",\n    \"org_name\": \"Acme Fintech\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/issuecert",
											"protocol": "https",
											"host": [
												"{{TRUSTEDDIR-FQDN}}"
											],
											"path": [
												"jwkms",
												"apiclient",
												"issuecert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 12 Jun 2023 10:42:44 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/jwk+json"
										},
										{
											"key": "Content-Length",
											"value": "6650"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15724800; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "{\n    \"keys\": [\n        {\n            \"d\": \"B3wrVHxGBH9du08fjsWwqJTVeMrxdzVjbXcP6Vz1VFC3Dq0hhBDGNPsBZZA3d7A8Ho0D0r43L-CTR8_S79ns01eT-T_OM_MMOPxjuQeg5tE2-A18DjERTqCH4BQy0Ro19rDvs0Zvlwwpo7PIaNxLLYmroqRkQcPWnRsK2Xh0NTxMpKSLPyUl2VMwqlwH_rv-wMWLM2jOnU-4u1myuDiDQcKTX2-QZbCHxnqy6WZBbw2gL7ZY-R2diHyWTk742FE8o34SCGjxEady19ur-8hFnksU1OTFYTcOqn6-QkqMt37wu-XKkVMdVW5DlrD2be0MiBmctnIDg1BXh6qdGMJHgQ\",\n            \"e\": \"AQAB\",\n            \"use\": \"tls\",\n            \"kid\": \"53920171943470008805453294008701576132\",\n            \"x5c\": [\n                \"MIIEhDCCA2ygAwIBAgIQKJClumJMGT48jP/1D+xjxDANBgkqhkiG9w0BAQsFADApMScwJQYDVQQDDB5UZXN0IFRydXN0ZWQgRGlyZWN0b3J5IFJvb3QgQ0EwHhcNMjMwNjExMTA0MjQ0WhcNMjQwNjEwMTA0MjQ0WjBEMRUwEwYDVQQDDAxBY21lIEZpbnRlY2gxKzApBgNVBGEMIlBTREdCLUZGQS01ZjU2M2U4OTc0MmIyODAwMTQ1YzdkYTEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+hz1yXyv1ZivADUb7nda68eLc6MJNTyS90/1kDBEYmMuSpTTAMc79ViTpfYRuiXW8w+o73GWghfLH9v4+hyj1bylQDXfShNsl2CpuonZdzrpCdu3wEfrujOjcNmDGkK1/B2WSkulYRQG1xHxJHjsLfFaaDa2e9ye7wa+UJfNO8EewlQ/lp8uYXX2vbB7kKLnhIIlJCcWKOFr0Xb2q6pOCWOqf2LT9Egk7k+575hkoviiMGFwfXTzHPdQ2Q43I08Ikf6CvhCxp7zbVRMOMyWlyjxaxIaD8AzV2s5kIRpFcDVfwio4cDpwMwtMCtpnu5bfiN1dEdwEs6nW8Cd3ow947AgMBAAGjggGLMIIBhzAMBgNVHRMBAf8EAjAAMFgGA1UdIwRRME+AFELPWlnLkb0B3Pn3WJmD4Rdecu0soS2kKzApMScwJQYDVQQDEx5UZXN0IFRydXN0ZWQgRGlyZWN0b3J5IFJvb3QgQ0GCCHzQZSsGw4FtMB0GA1UdDgQWBBRNfkhBFuxtPPHkNJsdCt7u2RVHsjALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwIwgdsGCCsGAQUFBwEDBIHOMIHLMAgGBgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAzAJBgcEAIvsSQECMIGeBgYEAIGYJwIwgZMwajApBgcEAIGYJwEEDB5DYXJkIEJhc2VkIFBheW1lbnQgSW5zdHJ1bWVudHMwHgYHBACBmCcBAwwTQWNjb3VudCBJbmZvcm1hdGlvbjAdBgcEAIGYJwECDBJQYXltZW50IEluaXRpYXRpb24MHUZvcmdlUm9jayBGaW5hbmNpYWwgQXV0aG9yaXR5DAZHQi1GRkEwDQYJKoZIhvcNAQELBQADggEBAHiOVghPYIoq7TDTzWDHw1R3HMjVNLscBkKYlCVMIHVj2GBErqlcC21SMmNQySUi5FOFFW5DIglYFpgupkgZhN7jf+0yVmBB8S7Cf3WUyy/0mbk6wm77Q4l59Ue3vfw/TwMTaEsmihvkCWMp7m24lcC2faJZ00cLhyzfwpmHZ/2VAE3eHh8rfeD42sjGhdcOjgSKiCU6J9UZoMmK6yE4mC5moEujSTAJw5DTISPwkr77suNH/5aHeAwlP5h3wBbyiOl+RM7QmTW1JFXkXTvzm0dVbJoYscGdJQ0ldu2lP6QDHSiuPOP5aYWE8h7ITDnEE/IJ7NdHZlICrGDBmUUcdUY=\"\n            ],\n            \"dp\": \"mA-Rv3ewnH_Ab_AZSugdRyhH05OYTWhS1Ix-NuDzhwesDp0zP-Ocr-_fprWcIxd32ExH3M1Rx_QoMMDhar2U3_9n6m_T3ddcOXzjcf5ZJcXT812ESJI0PYIcmQ4G5i6yLtd130-bnog1s6aRR42upkKJ_2gllu2OGpFBgkxusOE\",\n            \"dq\": \"GSxRAE44C1nvaUnxI7IQraeBvFKY0ND4z6blXh4SST9eS8RdlaM18xwu0_RyZbCCrQ1wpLwlXO8GAlbpXWAyjkWQPXhEkuiNW_QxA_qAhp3EGkQpz9fZdWegaOnKZoJN7cB5c1tMIRh_N_5Iu0HVgquoa68A7JYWGhxL7lSxC58\",\n            \"n\": \"voc9cl8r9WYrwA1G-53WuvHi3OjCTU8kvdP9ZAwRGJjLkqU0wDHO_VYk6X2Ebol1vMPqO9xloIXyx_b-Poco9W8pUA130oTbJdgqbqJ2Xc66Qnbt8BH67ozo3DZgxpCtfwdlkpLpWEUBtcR8SR47C3xWmg2tnvcnu8GvlCXzTvBHsJUP5afLmF19r2we5Ci54SCJSQnFijha9F29quqTgljqn9i0_RIJO5Pue-YZKL4ojBhcH108xz3UNkONyNPCJH-gr4Qsae821UTDjMlpco8WsSGg_AM1drOZCEaRXA1X8IqOHA6cDMLTAraZ7uW34jdXRHcBLOp1vAnd6MPeOw\",\n            \"p\": \"39Xrr4I8uIHLKuLml0c4W2MuWvvwmInol1XRH2bJ6mvo_YMBppfNa7M5XXG3WPMgHjMVaFh-zjpZ-w-p9JA0-k8kXKRY53F1bkGZ2eZH_YKXdgJd8YY-ThM3jSddL2aAQY8e6o-mqGduhmmqrsUfG2NfVYmOccCeSSis-ruR0LE\",\n            \"kty\": \"RSA\",\n            \"x5t#S256\": \"9d4ZCzps8O3SQUFddV6r4s6V99iTSG6QAkldiKqrYfg\",\n            \"q\": \"2egQ7XpQdgHrWQIlDAtftz18U1O560yTCoGKBq0R3TpymP5SO-BWPA6Jn-DWCtnWU8sJxycgDsFxjp8ddgb2lPwySAoT7AVIrodadMZMQLp4cZ8YCpscjAYDMlrMlIgUSjMqkK2lu2Fb4xtP0UoLCkjwL9wts53DE0DSRZvS-Ks\",\n            \"qi\": \"oV97kvBLBFdYVJfNVcdbwF2FiD1-rdbKKon2NmLBGlhGqEvXLx6--ph4sGE-rJS8D2sZ_xnssorPQ9Eh7e1N5w81hIdXp-DyKS9uR79uGvmHUKV6t8-CDAdXQfQnPf4Nv48o-YcCHR62J152I2CoUzXAVn3oLM-O7SonsJRBEls\",\n            \"alg\": \"PS256\"\n        },\n        {\n            \"d\": \"ExGe0NND7ziJcJRklXK4uF3-n0gih0z5LzHEzpTp8pcVHXwsg7n1NdLjsT3Ipzs-dpeN2CnHS2695jW9KU_Mrz5PrOaPtea_B-wN4nrbDt93d9s3OrbGm6QfmeGIEla5-Z0SFSOjeno5QPpOm7R7ClR4w2Rf2jpXpdU8GRHqCBneGAVhjHQRhJUDqSBb9cryf1gPb0H9u9byR_W5MDzX3BSrPMcSuCk47pt8nj286Y6DbymLlwTOxtfqx3MqLtiGWdWNo4xLJdRl3SP29_Qh4s7riUi3xj3h1zKdo4xpk3cm4oMbdNFDlK8mzTsdYeMAUSm0UGnYgb_2PtvtIS2egQ\",\n            \"e\": \"AQAB\",\n            \"use\": \"sig\",\n            \"kid\": \"135451294950384135177988261033323522239\",\n            \"x5c\": [\n                \"MIIEhDCCA2ygAwIBAgIQZeb4cl3fksI9LL1Fjx/ovzANBgkqhkiG9w0BAQsFADApMScwJQYDVQQDDB5UZXN0IFRydXN0ZWQgRGlyZWN0b3J5IFJvb3QgQ0EwHhcNMjMwNjExMTA0MjQ0WhcNMjQwNjEwMTA0MjQ0WjBEMRUwEwYDVQQDDAxBY21lIEZpbnRlY2gxKzApBgNVBGEMIlBTREdCLUZGQS01ZjU2M2U4OTc0MmIyODAwMTQ1YzdkYTEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvWWZsVjwTRRjut3Kvn2HG12kKDH5GBo4IXhwaEVUTeDZ5huDtA/Lq2MtPeLjziDuMjfhyWtuDXBwx/L6gvUwB+bYMgjHx75UOFWa2tuMAxe4WcECUx54ZBsL49ukdTaJC/fEQnu5eGVmE7FZHl1tNGiclyuIsHc8VZ2kTgT4tei0qY513JJjL0VAQpgouCv9qmk4FeRCKWajK9IkvCfTYBxzuuIQ9gZaDRA81itRm3RIn5H5izzXIRj8EnwwkSHB/kaFoV5pAcm5akRBF1DrmqQbndJ7JwJ3UUueUhVJvSbM4wpG+BBMcP+a8tc82A4GHO8DGkAVOOpM26adt9BFvAgMBAAGjggGLMIIBhzAMBgNVHRMBAf8EAjAAMFgGA1UdIwRRME+AFELPWlnLkb0B3Pn3WJmD4Rdecu0soS2kKzApMScwJQYDVQQDEx5UZXN0IFRydXN0ZWQgRGlyZWN0b3J5IFJvb3QgQ0GCCHzQZSsGw4FtMB0GA1UdDgQWBBSZM+EYXhUWSSvWf/d/oKNg5wP8JDALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwIwgdsGCCsGAQUFBwEDBIHOMIHLMAgGBgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAjAJBgcEAIvsSQECMIGeBgYEAIGYJwIwgZMwajApBgcEAIGYJwEEDB5DYXJkIEJhc2VkIFBheW1lbnQgSW5zdHJ1bWVudHMwHgYHBACBmCcBAwwTQWNjb3VudCBJbmZvcm1hdGlvbjAdBgcEAIGYJwECDBJQYXltZW50IEluaXRpYXRpb24MHUZvcmdlUm9jayBGaW5hbmNpYWwgQXV0aG9yaXR5DAZHQi1GRkEwDQYJKoZIhvcNAQELBQADggEBAI7H/5BlEuA6ze+fv/IN4zL5ShatsiMVFYUdLd/pmSCjupvxgHKUngr1EoBh4tX+zj6O4S3ohInMG1Dg/FiNyuBqCbqWho+pemEhx+Wc7sDWHz21JvjwE/G/FKWZd5qLtE34w6Obv9bmTJ4WCVddNyWlrfIUmZzSxgaQvGZ+w9dm7SIih/5xcH2vv3U3ucrxzqQRmdDmWnRVuVS0EpOAvFLwTYQis/BcI2jcYX6HmlpEYTYvIKaOaziUKv1S2YT1TryLbvlEw252E1X/mQFALmGjky0ZZyG/R7Ax7Zxl+odmGc16/k3UuOymQWchXSjrbBEFxNkzhjdqwOC4Z1cVgrk=\"\n            ],\n            \"dp\": \"sWXzy6lImo5Po1hMjl2R0aBMMyQ8t6OBKcszP-YjDUL3OqodMzTDd5s3Ysy64rTyi7EUWuvC3-pmSMKXsaojf4tf8_EeRPI1qHRbGlP9qsHYsZa6o9MKMA5SIEigC00LZeK2JNwqNI9cZ-JyG_44OwAfAmQ5jVfPOilkFmR65Ss\",\n            \"dq\": \"bpah0tfSPCQ7IBDmln72EajyNv3G0KBjDR5t0lJMKa9zhC5n2KtYD5OCOGKN9fzKeeahqNI1Ru2-x2XRyaBCSpcNvQ66Qj1wygPPyWnqQHSoKi3vY3gW5_97vC_64A6Au5_MGQRM0zj0SyW0mtoW2Sg7QY3ORAYDS7Tygo6XFUE\",\n            \"n\": \"r1lmbFY8E0UY7rdyr59hxtdpCgx-RgaOCF4cGhFVE3g2eYbg7QPy6tjLT3i484g7jI34clrbg1wcMfy-oL1MAfm2DIIx8e-VDhVmtrbjAMXuFnBAlMeeGQbC-PbpHU2iQv3xEJ7uXhlZhOxWR5dbTRonJcriLB3PFWdpE4E-LXotKmOddySYy9FQEKYKLgr_appOBXkQilmoyvSJLwn02Acc7riEPYGWg0QPNYrUZt0SJ-R-Ys81yEY_BJ8MJEhwf5GhaFeaQHJuWpEQRdQ65qkG53SeycCd1FLnlIVSb0mzOMKRvgQTHD_mvLXPNgOBhzvAxpAFTjqTNumnbfQRbw\",\n            \"p\": \"4gAnvU1MqQ1fXFYhdulIouCnJNeiyCQnBXNxO6syfgq4uLCuR4pP2lUKlbhRke56uw9xI1Z-VC1Gr3EUoN2dL_jAe6iQ5xDUAdJI5b69XXBoo_qWOtG5hR2ioE2NtkkJb1PB88yos_QpOHijLYAtgpZEUX1KQqkSB39cnUbBcK8\",\n            \"kty\": \"RSA\",\n            \"x5t#S256\": \"RT-DKrMmPX6Wlrr_hYHTuNNf4Wfj5Kn2YC815HJI1F4\",\n            \"q\": \"xqAImQMr9CyzGgzF-2T7iQhwa8NIps1oHkM31IC3KzGTPQB_ka18MYAkdBM2M3H5om5MrdKmhXKr4aPHR8BEjOo_C3z3xvkuSyTBI9BKRaGdFTk5lrBhUu_I2nhtR0-2UiF91ZXOu0rniVzTEVAY8WTFYaHqq7T7bkTsxCRMG0E\",\n            \"qi\": \"zHwNYRmNhzSiVUxPSOgV_CF3U4v5cUuRo344290Fmrr2pPFkDIElo-gqCdQ68jngtjIClUqtTzzcnICx1ChffrQ__1qJysv-FNpp56UjoiyV7Ta9BwLrEbI3CmyVgKsWUL0XT8Y1dFTbLyJHz--X4eYaApp6WCvB3NQgLqcB9gw\",\n            \"alg\": \"PS256\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "2.1a.2 Get TLS cert key/pem from JWKS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{ApiClientJWKs}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/gettlscert",
									"protocol": "https",
									"host": [
										"{{TRUSTEDDIR-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"gettlscert"
									]
								}
							},
							"response": [
								{
									"name": "2.1a.2 Get TLS cert key/pem from JWKS",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{ApiClientJWKs}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/gettlscert",
											"protocol": "https",
											"host": [
												"{{TRUSTEDDIR-FQDN}}"
											],
											"path": [
												"jwkms",
												"apiclient",
												"gettlscert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 12 Jun 2023 10:43:18 GMT"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "Content-Length",
											"value": "3306"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15724800; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "-----BEGIN CERTIFICATE-----\nMIIEhDCCA2ygAwIBAgIQKJClumJMGT48jP/1D+xjxDANBgkqhkiG9w0BAQsFADAp\nMScwJQYDVQQDDB5UZXN0IFRydXN0ZWQgRGlyZWN0b3J5IFJvb3QgQ0EwHhcNMjMw\nNjExMTA0MjQ0WhcNMjQwNjEwMTA0MjQ0WjBEMRUwEwYDVQQDDAxBY21lIEZpbnRl\nY2gxKzApBgNVBGEMIlBTREdCLUZGQS01ZjU2M2U4OTc0MmIyODAwMTQ1YzdkYTEw\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC+hz1yXyv1ZivADUb7nda6\n8eLc6MJNTyS90/1kDBEYmMuSpTTAMc79ViTpfYRuiXW8w+o73GWghfLH9v4+hyj1\nbylQDXfShNsl2CpuonZdzrpCdu3wEfrujOjcNmDGkK1/B2WSkulYRQG1xHxJHjsL\nfFaaDa2e9ye7wa+UJfNO8EewlQ/lp8uYXX2vbB7kKLnhIIlJCcWKOFr0Xb2q6pOC\nWOqf2LT9Egk7k+575hkoviiMGFwfXTzHPdQ2Q43I08Ikf6CvhCxp7zbVRMOMyWly\njxaxIaD8AzV2s5kIRpFcDVfwio4cDpwMwtMCtpnu5bfiN1dEdwEs6nW8Cd3ow947\nAgMBAAGjggGLMIIBhzAMBgNVHRMBAf8EAjAAMFgGA1UdIwRRME+AFELPWlnLkb0B\n3Pn3WJmD4Rdecu0soS2kKzApMScwJQYDVQQDEx5UZXN0IFRydXN0ZWQgRGlyZWN0\nb3J5IFJvb3QgQ0GCCHzQZSsGw4FtMB0GA1UdDgQWBBRNfkhBFuxtPPHkNJsdCt7u\n2RVHsjALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwIwgdsGCCsGAQUF\nBwEDBIHOMIHLMAgGBgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAzAJBgcEAIvs\nSQECMIGeBgYEAIGYJwIwgZMwajApBgcEAIGYJwEEDB5DYXJkIEJhc2VkIFBheW1l\nbnQgSW5zdHJ1bWVudHMwHgYHBACBmCcBAwwTQWNjb3VudCBJbmZvcm1hdGlvbjAd\nBgcEAIGYJwECDBJQYXltZW50IEluaXRpYXRpb24MHUZvcmdlUm9jayBGaW5hbmNp\nYWwgQXV0aG9yaXR5DAZHQi1GRkEwDQYJKoZIhvcNAQELBQADggEBAHiOVghPYIoq\n7TDTzWDHw1R3HMjVNLscBkKYlCVMIHVj2GBErqlcC21SMmNQySUi5FOFFW5DIglY\nFpgupkgZhN7jf+0yVmBB8S7Cf3WUyy/0mbk6wm77Q4l59Ue3vfw/TwMTaEsmihvk\nCWMp7m24lcC2faJZ00cLhyzfwpmHZ/2VAE3eHh8rfeD42sjGhdcOjgSKiCU6J9UZ\noMmK6yE4mC5moEujSTAJw5DTISPwkr77suNH/5aHeAwlP5h3wBbyiOl+RM7QmTW1\nJFXkXTvzm0dVbJoYscGdJQ0ldu2lP6QDHSiuPOP5aYWE8h7ITDnEE/IJ7NdHZlIC\nrGDBmUUcdUY=\n-----END CERTIFICATE-----\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAvoc9cl8r9WYrwA1G+53WuvHi3OjCTU8kvdP9ZAwRGJjLkqU0\nwDHO/VYk6X2Ebol1vMPqO9xloIXyx/b+Poco9W8pUA130oTbJdgqbqJ2Xc66Qnbt\n8BH67ozo3DZgxpCtfwdlkpLpWEUBtcR8SR47C3xWmg2tnvcnu8GvlCXzTvBHsJUP\n5afLmF19r2we5Ci54SCJSQnFijha9F29quqTgljqn9i0/RIJO5Pue+YZKL4ojBhc\nH108xz3UNkONyNPCJH+gr4Qsae821UTDjMlpco8WsSGg/AM1drOZCEaRXA1X8IqO\nHA6cDMLTAraZ7uW34jdXRHcBLOp1vAnd6MPeOwIDAQABAoIBAAd8K1R8RgR/XbtP\nH47FsKiU1XjK8Xc1Y213D+lc9VRQtw6tIYQQxjT7AWWQN3ewPB6NA9K+Ny/gk0fP\n0u/Z7NNXk/k/zjPzDDj8Y7kHoObRNvgNfA4xEU6gh+AUMtEaNfaw77NGb5cMKaOz\nyGjcSy2Jq6KkZEHD1p0bCtl4dDU8TKSkiz8lJdlTMKpcB/67/sDFizNozp1PuLtZ\nsrg4g0HCk19vkGWwh8Z6sulmQW8NoC+2WPkdnYh8lk5O+NhRPKN+Egho8RGnctfb\nq/vIRZ5LFNTkxWE3Dqp+vkJKjLd+8LvlypFTHVVuQ5aw9m3tDIgZnLZyA4NQV4eq\nnRjCR4ECgYEA39Xrr4I8uIHLKuLml0c4W2MuWvvwmInol1XRH2bJ6mvo/YMBppfN\na7M5XXG3WPMgHjMVaFh+zjpZ+w+p9JA0+k8kXKRY53F1bkGZ2eZH/YKXdgJd8YY+\nThM3jSddL2aAQY8e6o+mqGduhmmqrsUfG2NfVYmOccCeSSis+ruR0LECgYEA2egQ\n7XpQdgHrWQIlDAtftz18U1O560yTCoGKBq0R3TpymP5SO+BWPA6Jn+DWCtnWU8sJ\nxycgDsFxjp8ddgb2lPwySAoT7AVIrodadMZMQLp4cZ8YCpscjAYDMlrMlIgUSjMq\nkK2lu2Fb4xtP0UoLCkjwL9wts53DE0DSRZvS+KsCgYEAmA+Rv3ewnH/Ab/AZSugd\nRyhH05OYTWhS1Ix+NuDzhwesDp0zP+Ocr+/fprWcIxd32ExH3M1Rx/QoMMDhar2U\n3/9n6m/T3ddcOXzjcf5ZJcXT812ESJI0PYIcmQ4G5i6yLtd130+bnog1s6aRR42u\npkKJ/2gllu2OGpFBgkxusOECgYAZLFEATjgLWe9pSfEjshCtp4G8UpjQ0PjPpuVe\nHhJJP15LxF2VozXzHC7T9HJlsIKtDXCkvCVc7wYCVuldYDKORZA9eESS6I1b9DED\n+oCGncQaRCnP19l1Z6Bo6cpmgk3twHlzW0whGH83/ki7QdWCq6hrrwDslhYaHEvu\nVLELnwKBgQChX3uS8EsEV1hUl81Vx1vAXYWIPX6t1soqifY2YsEaWEaoS9cvHr76\nmHiwYT6slLwPaxn/Geyyis9D0SHt7U3nDzWEh1en4PIpL25Hv24a+YdQpXq3z4IM\nB1dB9Cc9/g2/jyj5hwIdHrYnXnYjYKhTNcBWfegsz47tKiewlEESWw==\n-----END RSA PRIVATE KEY-----\n"
								}
							]
						},
						{
							"name": "2.1a.3 Get SIG cert key/pem from JWKS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{ApiClientJWKs}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/getsigcert",
									"protocol": "https",
									"host": [
										"{{TRUSTEDDIR-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"getsigcert"
									]
								}
							},
							"response": [
								{
									"name": "2.1a.3 Get SIG cert key/pem from JWKS",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{ApiClientJWKs}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/getsigcert",
											"protocol": "https",
											"host": [
												"{{TRUSTEDDIR-FQDN}}"
											],
											"path": [
												"jwkms",
												"apiclient",
												"getsigcert"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 12 Jun 2023 10:43:28 GMT"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "Content-Length",
											"value": "3306"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15724800; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "-----BEGIN CERTIFICATE-----\nMIIEhDCCA2ygAwIBAgIQZeb4cl3fksI9LL1Fjx/ovzANBgkqhkiG9w0BAQsFADAp\nMScwJQYDVQQDDB5UZXN0IFRydXN0ZWQgRGlyZWN0b3J5IFJvb3QgQ0EwHhcNMjMw\nNjExMTA0MjQ0WhcNMjQwNjEwMTA0MjQ0WjBEMRUwEwYDVQQDDAxBY21lIEZpbnRl\nY2gxKzApBgNVBGEMIlBTREdCLUZGQS01ZjU2M2U4OTc0MmIyODAwMTQ1YzdkYTEw\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvWWZsVjwTRRjut3Kvn2HG\n12kKDH5GBo4IXhwaEVUTeDZ5huDtA/Lq2MtPeLjziDuMjfhyWtuDXBwx/L6gvUwB\n+bYMgjHx75UOFWa2tuMAxe4WcECUx54ZBsL49ukdTaJC/fEQnu5eGVmE7FZHl1tN\nGiclyuIsHc8VZ2kTgT4tei0qY513JJjL0VAQpgouCv9qmk4FeRCKWajK9IkvCfTY\nBxzuuIQ9gZaDRA81itRm3RIn5H5izzXIRj8EnwwkSHB/kaFoV5pAcm5akRBF1Drm\nqQbndJ7JwJ3UUueUhVJvSbM4wpG+BBMcP+a8tc82A4GHO8DGkAVOOpM26adt9BFv\nAgMBAAGjggGLMIIBhzAMBgNVHRMBAf8EAjAAMFgGA1UdIwRRME+AFELPWlnLkb0B\n3Pn3WJmD4Rdecu0soS2kKzApMScwJQYDVQQDEx5UZXN0IFRydXN0ZWQgRGlyZWN0\nb3J5IFJvb3QgQ0GCCHzQZSsGw4FtMB0GA1UdDgQWBBSZM+EYXhUWSSvWf/d/oKNg\n5wP8JDALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwIwgdsGCCsGAQUF\nBwEDBIHOMIHLMAgGBgQAjkYBATATBgYEAI5GAQYwCQYHBACORgEGAjAJBgcEAIvs\nSQECMIGeBgYEAIGYJwIwgZMwajApBgcEAIGYJwEEDB5DYXJkIEJhc2VkIFBheW1l\nbnQgSW5zdHJ1bWVudHMwHgYHBACBmCcBAwwTQWNjb3VudCBJbmZvcm1hdGlvbjAd\nBgcEAIGYJwECDBJQYXltZW50IEluaXRpYXRpb24MHUZvcmdlUm9jayBGaW5hbmNp\nYWwgQXV0aG9yaXR5DAZHQi1GRkEwDQYJKoZIhvcNAQELBQADggEBAI7H/5BlEuA6\nze+fv/IN4zL5ShatsiMVFYUdLd/pmSCjupvxgHKUngr1EoBh4tX+zj6O4S3ohInM\nG1Dg/FiNyuBqCbqWho+pemEhx+Wc7sDWHz21JvjwE/G/FKWZd5qLtE34w6Obv9bm\nTJ4WCVddNyWlrfIUmZzSxgaQvGZ+w9dm7SIih/5xcH2vv3U3ucrxzqQRmdDmWnRV\nuVS0EpOAvFLwTYQis/BcI2jcYX6HmlpEYTYvIKaOaziUKv1S2YT1TryLbvlEw252\nE1X/mQFALmGjky0ZZyG/R7Ax7Zxl+odmGc16/k3UuOymQWchXSjrbBEFxNkzhjdq\nwOC4Z1cVgrk=\n-----END CERTIFICATE-----\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEAr1lmbFY8E0UY7rdyr59hxtdpCgx+RgaOCF4cGhFVE3g2eYbg\n7QPy6tjLT3i484g7jI34clrbg1wcMfy+oL1MAfm2DIIx8e+VDhVmtrbjAMXuFnBA\nlMeeGQbC+PbpHU2iQv3xEJ7uXhlZhOxWR5dbTRonJcriLB3PFWdpE4E+LXotKmOd\ndySYy9FQEKYKLgr/appOBXkQilmoyvSJLwn02Acc7riEPYGWg0QPNYrUZt0SJ+R+\nYs81yEY/BJ8MJEhwf5GhaFeaQHJuWpEQRdQ65qkG53SeycCd1FLnlIVSb0mzOMKR\nvgQTHD/mvLXPNgOBhzvAxpAFTjqTNumnbfQRbwIDAQABAoIBABMRntDTQ+84iXCU\nZJVyuLhd/p9IIodM+S8xxM6U6fKXFR18LIO59TXS47E9yKc7PnaXjdgpx0tuveY1\nvSlPzK8+T6zmj7XmvwfsDeJ62w7fd3fbNzq2xpukH5nhiBJWufmdEhUjo3p6OUD6\nTpu0ewpUeMNkX9o6V6XVPBkR6ggZ3hgFYYx0EYSVA6kgW/XK8n9YD29B/bvW8kf1\nuTA819wUqzzHErgpOO6bfJ49vOmOg28pi5cEzsbX6sdzKi7YhlnVjaOMSyXUZd0j\n9vf0IeLO64lIt8Y94dcynaOMaZN3JuKDG3TRQ5SvJs07HWHjAFEptFBp2IG/9j7b\n7SEtnoECgYEA4gAnvU1MqQ1fXFYhdulIouCnJNeiyCQnBXNxO6syfgq4uLCuR4pP\n2lUKlbhRke56uw9xI1Z+VC1Gr3EUoN2dL/jAe6iQ5xDUAdJI5b69XXBoo/qWOtG5\nhR2ioE2NtkkJb1PB88yos/QpOHijLYAtgpZEUX1KQqkSB39cnUbBcK8CgYEAxqAI\nmQMr9CyzGgzF+2T7iQhwa8NIps1oHkM31IC3KzGTPQB/ka18MYAkdBM2M3H5om5M\nrdKmhXKr4aPHR8BEjOo/C3z3xvkuSyTBI9BKRaGdFTk5lrBhUu/I2nhtR0+2UiF9\n1ZXOu0rniVzTEVAY8WTFYaHqq7T7bkTsxCRMG0ECgYEAsWXzy6lImo5Po1hMjl2R\n0aBMMyQ8t6OBKcszP+YjDUL3OqodMzTDd5s3Ysy64rTyi7EUWuvC3+pmSMKXsaoj\nf4tf8/EeRPI1qHRbGlP9qsHYsZa6o9MKMA5SIEigC00LZeK2JNwqNI9cZ+JyG/44\nOwAfAmQ5jVfPOilkFmR65SsCgYBulqHS19I8JDsgEOaWfvYRqPI2/cbQoGMNHm3S\nUkwpr3OELmfYq1gPk4I4Yo31/Mp55qGo0jVG7b7HZdHJoEJKlw29DrpCPXDKA8/J\naepAdKgqLe9jeBbn/3u8L/rgDoC7n8wZBEzTOPRLJbSa2hbZKDtBjc5EBgNLtPKC\njpcVQQKBgQDMfA1hGY2HNKJVTE9I6BX8IXdTi/lxS5Gjfjjb3QWauvak8WQMgSWj\n6CoJ1DryOeC2MgKVSq1PPNycgLHUKF9+tD//WonKy/4U2mnnpSOiLJXtNr0HAusR\nsjcKbJWAqxZQvRdPxjV0VNsvIkfP75fh5hoCmnpYK8Hc1CAupwH2DA==\n-----END RSA PRIVATE KEY-----\n"
								}
							]
						},
						{
							"name": "2.1a.4 Generate SSA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"ssa_jwt\", responseBody);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"var software_id = uuid.v4();",
											"console.log(\"software_id is \" + software_id);",
											"postman.setEnvironmentVariable('generated_software_id', software_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"software_id\": \"{{generated_software_id}}\",\n    \"software_client_name\": \"Secure API Gateway test generated client\",\n    \"software_client_id\": \"{{generated_software_id}}\",\n    \"software_tos_uri\": \"https://github.com/SecureApiGateway\",\n    \"software_client_description\": \"Open Banking UK TPP Flows Postman Client\",\n    \"software_redirect_uris\": [\"https://www.google.com\", \"https://postman-echo.com/get\"],\n    \"software_policy_uri\": \"https://github.com/SecureApiGateway\",\n    \"software_logo_uri\": \"https://avatars.githubusercontent.com/u/74596995?s=96&v=4\",\n    \"software_roles\": [    \n        \"DATA\",\n        \"AISP\",\n        \"CBPII\",\n        \"PISP\"],\n    \"software_jwks\": {{ApiClientJWKs}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/getssa",
									"protocol": "https",
									"host": [
										"{{TRUSTEDDIR-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"getssa"
									]
								}
							},
							"response": [
								{
									"name": "2.1a.4 Generate SSA",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"software_id\": \"{{generated_software_id}}\",\n    \"software_client_name\": \"Secure API Gateway test generated client\",\n    \"software_client_id\": \"{{generated_software_id}}\",\n    \"software_tos_uri\": \"https://github.com/SecureApiGateway\",\n    \"software_client_description\": \"Open Banking UK TPP Flows Postman Client\",\n    \"software_redirect_uris\": [\"https://www.google.com\", \"https://postman-echo.com/get\"],\n    \"software_policy_uri\": \"https://github.com/SecureApiGateway\",\n    \"software_logo_uri\": \"https://avatars.githubusercontent.com/u/74596995?s=96&v=4\",\n    \"software_roles\": [    \n        \"DATA\",\n        \"AISP\",\n        \"CBPII\",\n        \"PISP\"],\n    \"software_jwks\": {{ApiClientJWKs}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/getssa",
											"protocol": "https",
											"host": [
												"{{TRUSTEDDIR-FQDN}}"
											],
											"path": [
												"jwkms",
												"apiclient",
												"getssa"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 12 Jun 2023 10:43:39 GMT"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "Content-Length",
											"value": "10250"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-fapi-interaction-id",
											"value": "453bc163-8987-48d5-831f-e22ae391c0fb"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15724800; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "eyJ0eXAiOiJKV1QiLCJraWQiOiJqd3Qtc2lnbmVyIiwiYWxnIjoiUFMyNTYifQ..hnYT7I7dutWD1Upop84T0RYVQwFmWJDTjT3Aelzh5P63Xf_yPQfhC10EKg1zn0FIyIhihE9tOXMoUbBWAgCo8OhPozgikQvtXrPprOmQSlt4y2VHumvwvQcUeUHg3VUrXO5RmVCeQAhDRYBt6hEcKbm6uzQaqI7rbZe4XSDdCTHaiMfo_wk7PtklshpAwOZQ4WsVj39HMfXttHPgyzLqGr67g-BccABEIb5KQxJmqdkyynzRCnLKLdUpvvZsGZED7sL6VLIt0RQTPOtd8D1e2AXNf1Hl3YuDeu5_WLuojcATSd2FjyC3IFPvV37vucusffudwuwaqnEaEUksShoyyg"
								}
							]
						},
						{
							"name": "2.1a.5 Generate registration request JWT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable('exp',(new Date().getTime() / 1000) + 60*5);",
											"var SSA_JWT_SERIALISED = \"\\\"\" + pm.variables.get('SSA_JWT') + \"\\\"\";",
											"console.log(\"SSA_JWT_SERIALISED: \" + SSA_JWT_SERIALISED);",
											"postman.setEnvironmentVariable('SSA_JWT_SERIALISED', SSA_JWT_SERIALISED);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"dynamic_registration_request\", responseBody);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "issuerId",
										"value": "{{software_statement_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"claims\": { \n        \"iss\": \"softwareid\",\n        \"exp\": {{exp}},\n        \"scope\": \"openid accounts payments\",\n        \"response_types\": [\n            \"code id_token\"\n        ],\n        \"redirect_uris\": [\n            \"https://www.google.com\",\n            \"https://postman-echo.com/get\"\n        ],\n        \"application_type\": \"web\",\n        \"subject_type\": \"pairwise\",\n        \"grant_types\": [\n        \"authorization_code\",\n        \"refresh_token\",\n        \"client_credentials\"\n        ],\n        \"software_statement\": \"{{ssa_jwt}}\",\n        \"token_endpoint_auth_method\": \"private_key_jwt\",\n        \"token_endpoint_auth_signing_alg\": \"PS256\",\n        \"id_token_signed_response_alg\": \"PS256\",\n        \"request_object_signing_alg\": \"PS256\",\n        \"request_object_encryption_alg\": \"RSA-OAEP-256\",\n        \"request_object_encryption_enc\": \"A128CBC-HS256\"\n    },\n  \"jwks\": {{ApiClientJWKs}}\n}"
								},
								"url": {
									"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/signclaims",
									"protocol": "https",
									"host": [
										"{{TRUSTEDDIR-FQDN}}"
									],
									"path": [
										"jwkms",
										"apiclient",
										"signclaims"
									]
								}
							},
							"response": [
								{
									"name": "2.1a.5 Generate registration request JWT",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "issuerId",
												"value": "{{software_statement_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \n    \"claims\": { \n        \"iss\": \"softwareid\",\n        \"exp\": {{exp}},\n        \"scope\": \"openid accounts payments\",\n        \"response_types\": [\n            \"code id_token\"\n        ],\n        \"redirect_uris\": [\n            \"https://www.google.com\",\n            \"https://postman-echo.com/get\"\n        ],\n        \"application_type\": \"web\",\n        \"subject_type\": \"pairwise\",\n        \"grant_types\": [\n        \"authorization_code\",\n        \"refresh_token\",\n        \"client_credentials\"\n        ],\n        \"software_statement\": \"{{ssa_jwt}}\",\n        \"token_endpoint_auth_method\": \"private_key_jwt\",\n        \"token_endpoint_auth_signing_alg\": \"PS256\",\n        \"id_token_signed_response_alg\": \"PS256\",\n        \"request_object_signing_alg\": \"PS256\",\n        \"request_object_encryption_alg\": \"RSA-OAEP-256\",\n        \"request_object_encryption_enc\": \"A128CBC-HS256\"\n    },\n  \"jwks\": {{ApiClientJWKs}}\n}"
										},
										"url": {
											"raw": "https://{{TRUSTEDDIR-FQDN}}/jwkms/apiclient/signclaims",
											"protocol": "https",
											"host": [
												"{{TRUSTEDDIR-FQDN}}"
											],
											"path": [
												"jwkms",
												"apiclient",
												"signclaims"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 12 Jun 2023 10:44:29 GMT"
										},
										{
											"key": "Content-Type",
											"value": "text/plain"
										},
										{
											"key": "Content-Length",
											"value": "14898"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-fapi-interaction-id",
											"value": "28bc3fad-f2c3-4dec-92c4-08b1d8b77d76"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=15724800; includeSubDomains"
										}
									],
									"cookie": [],
									"body": "eyJ0eXAiOiJKV1QiLCJraWQiOiIxMzU0NTEyOTQ5NTAzODQxMzUxNzc5ODgyNjEwMzMzMjM1MjIyMzkiLCJhbGciOiJQUzI1NiJ9..X5fHqBrFhDe8UAzNTZ9AKoe3JmB8L5OAQiJ8ySvsXUSJiF6y9_H7W9ZZKU-0_TJUdLoQprfXJ_0kTOQaryJc7vwD-AEHluvfe5x06PPQWJt7muBajANZa7HpEbB1PeWekvT_a7BeMMKjUd2CQn1ByF6eC2nTpfV-xaFuLRYNg8YhCpmVk6yRS-ai9fR1QBGyQSA1C4gpRNduD8vvQJiiZrm-HOdWX7IhQHYZGh2Ssor3tdkBN6az0_iZRLWtDDEp6zTKwIwDbVe4MoMifNfeROPU_HZH2hfuIntLYCQlf21BHOtbR-PvG3RCQ5HWhKkda8-VEyuj1fcgM_IJtIIQEA"
								}
							]
						}
					],
					"description": "In these steps we will use the Secure API Gateway's built in Trusted Directory to obtain the transport and signing keys and the software statement assertion that we will need to perform Dynamic Client Registration. If you haven't already done so, now would be a great time to have a read of [this article](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-Dynamic-Client-Registration) that will give you an overview of the Dynamic Client Registration process.\n\nIf you have already registered with the Open Banking test Directory, you should use that trusted directory to perform dynamic client registration by following the steps in section 2.1b.\n\nIf you have not registered with the Open Banking Test Directory, then it is possible to register using the Secure API Gateway's own Trusted Directory by following the steps in this section.\n\nYou can read more about this trusted directory [here](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-the-Secure-API-Gateway's-Trusted-Directory)."
				},
				{
					"name": "2.1b Create Registration Request JWT using the Open Banking Test Directory",
					"item": [
						{
							"name": "Step 2.1: Acquire access Token from OB Test Directory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*",
											"pmlib postman util lib (the Cryptojs don't support rs265 alg)",
											"pmlib: https://joolfe.github.io/postman-util-lib/dist/bundle.js",
											"docs: https://joolfe.github.io/postman-util-lib/",
											"*/",
											"// Loading the library",
											"eval(pm.environment.get('pmlib_code'))",
											"// Generate a PKCE challenge",
											"const challenge  = pmlib.pkceChallenge()",
											"console.log('PKCE challenge: ' +JSON.stringify(challenge))",
											"",
											"var jwtSecret = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"console.log(\"signing key: \" + jwtSecret)",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'RS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get('OB-SOFTWARE-ID') || '',",
											"\t'sub': pm.environment.get('OB-SOFTWARE-ID') || '',",
											"\t'scope': pm.environment.get('OB-SCOPES') || '',",
											"\t'exp': currentTimestamp + 180,",
											"\t'aud': pm.environment.get('OB-AUDIENCE') || ''",
											"}",
											"",
											"// sign token, default alg = RS256",
											"var signedToken = pmlib.jwtSign(jwtSecret, data, header, exp = 600, alg = pmlib.DEFAULT_ALG)",
											"console.log(signedToken)",
											"pm.environment.set('ob_jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have access_token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"ob_access_token\", data.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{OB-SOFTWARE-ID}}",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{ob_jwt_signed}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{OB-SCOPES}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{OB-TOKEN-URL}}",
									"host": [
										"{{OB-TOKEN-URL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2.2: get SSA associated with Transport Cert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response must be a string and status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"var data = pm.response.text()",
											"console.log(\"software statement: \" + data)",
											"",
											"postman.setEnvironmentVariable(\"ssa_jwt\", data);",
											"var software_id = pm.environment.get(\"OB-SOFTWARE-ID\")",
											"postman.setEnvironmentVariable(\"generated_software_id\", software_id)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ob_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/jws+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{OB-SSA-URL}}/organisation/tpp/{{OB-ORGANIZATION-ID}}/software-statement/{{OB-SOFTWARE-ID}}/software-statement-assertion",
									"host": [
										"{{OB-SSA-URL}}"
									],
									"path": [
										"organisation",
										"tpp",
										"{{OB-ORGANIZATION-ID}}",
										"software-statement",
										"{{OB-SOFTWARE-ID}}",
										"software-statement-assertion"
									]
								}
							},
							"response": []
						}
					],
					"description": "## The Open Banking Test/Sandbox Directory\n\nIn these steps we will use the Open Banking Test/Sandbox Directory to obtain the transport and signing keys and the software statement assertion that we will need to perform Dynamic Client Registration. If you haven't already done so, now would be a great time to have a read of [this article](https://desktop.postman.com/?desktopVersion=10.13.0&userId=32106&teamId=111655) that will give you an overview of the Dynamic Client Registration process.\n\nThis directory is run and operated by the Open Banking Implementation Entity (OBIE). You can sign up to use the directory, or login if you are already signed up [here](https://desktop.postman.com/?desktopVersion=10.13.0&userId=32106&teamId=111655). This is the Directory in which TPPs will need to manage software statements in order to register with real financial institution's Open Banking Test facilities.\n\nThe signup process can take a significant amount of time. Financial institutions looking to implement a protected API will find that providing developers with Open Banking Software Statements and certificates becomes afor use when building the system to be an overhead. For that reason the Secure API Gateway can be configured to act as a Trusted Directory.\n\nIf you have access to the Open Banking Test directory and have a Software Statement in that directory that you would like to use to register and use this API you can follow the steps in this section. If you don't have access to the Open Banking Test Directory you can follow the steps in section 2.1.a an use the Secure API Gateway trusted directory."
				},
				{
					"name": "2.2: Perform Dynamic Client Registration",
					"item": [
						{
							"name": "3.1: TPP performs registration using registration request jwt",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request",
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') ;",
											"console.log(privateKey)",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'PS256',",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || ''",
											"};",
											"",
											"var data = {",
											"    'iss': pm.environment.get('generated_software_id'),",
											"    'exp': currentTimestamp + 180,",
											"    'scope': \"openid accounts payments eventpolling fundsconfirmations\",",
											"    'response_types': [\"code id_token\"],",
											"    'redirect_uris': [\"https://postman-echo.com/get\"],",
											"    'application_type': \"web\",",
											"    'grant_types': [\"authorization_code\", \"refresh_token\", \"client_credentials\"],",
											"    'software_statement': pm.environment.get('ssa_jwt'),",
											"    'token_endpoint_auth_method': \"private_key_jwt\",",
											"    // 'tls_client_auth_subject_dn':  pm.environment.get(\"OB-TLS-CERT-DN\"),",
											"    'token_endpoint_auth_signing_alg': \"PS256\",",
											"    'id_token_signed_response_alg': \"PS256\",",
											"    'request_object_signing_alg': \"PS256\",",
											"    'request_object_encryption_alg': \"RSA-OAEP-256\",",
											"    'request_object_encryption_enc': \"A128CBC-HS256\",",
											"    'subject_type' : 'pairwise'",
											"}",
											"",
											"var jwt =  KJUR.jws.JWS.sign(\"PS256\", header, data, privateKey);",
											"console.log(jwt);",
											"pm.environment.set('dynamic_registration_request', jwt)",
											"pm.environment.set('dynamic_registration_request_raw_data', JSON.stringify(data))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"if (pm.expect(responseBody).not.eql(undefined)){",
											"    var data = JSON.parse(responseBody);",
											"    if (data.client_id !== null){",
											"        pm.environment.set(\"client_id\", data.client_id);",
											"        pm.environment.set(\"client_secret\", data.client_secret);",
											"        console.log(\"Redirect uris found: \" + data.redirect_uris);",
											"        if(data.redirect_uris.length > 1) {",
											"            console.log(\"setting the first redirect_uri found: \" + data.redirect_uris[0]);",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        } else {",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        }",
											"        pm.environment.set(\"registration_access_token\", data.registration_access_token)",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{dynamic_registration_request}}"
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									]
								}
							},
							"response": [
								{
									"name": "3.1: TPP performs registration using registration request jwt",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/jwt",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{dynamic_registration_request}}"
										},
										"url": {
											"raw": "{{aspsp_registration_endpoint}}",
											"host": [
												"{{aspsp_registration_endpoint}}"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 12 Jun 2023 10:48:35 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=UTF-8"
										},
										{
											"key": "Content-Length",
											"value": "20123"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "alt-svc",
											"value": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"
										},
										{
											"key": "content-security-policy-report-only",
											"value": "script-src 'self' 'unsafe-eval' 'unsafe-inline'; frame-ancestors 'self'"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15724800; includeSubDomains"
										},
										{
											"key": "via",
											"value": "1.1 google"
										},
										{
											"key": "x-content-type-options",
											"value": "nosniff"
										},
										{
											"key": "x-fapi-interaction-id",
											"value": "219d7bef-6720-4a3a-9ff3-127b8e2aa720"
										},
										{
											"key": "x-forgerock-transactionid",
											"value": "219d7bef-6720-4a3a-9ff3-127b8e2aa720/0"
										},
										{
											"key": "x-frame-options",
											"value": "SAMEORIGIN"
										}
									],
									"cookie": [],
									"body": "{\n    \"authorization_signed_response_alg\": \"RS256\",\n    \"token_endpoint_auth_signing_alg\": \"PS256\",\n    \"request_object_encryption_alg\": \"RSA-OAEP-256\",\n    \"introspection_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"default_max_age\": 0,\n    \"jwks\": {\n        \"keys\": [\n            {\n                \"d\": \"RYmuFxLWpmDH_L-3HW8s5IfT6HNrVN4K7Vz-dhMvMQ0lSVOQ_iR6MebCDl_EX-HR5wli2vzX7p0xUme74-c_-Ix18fCd3GPOFj0zt9_dKBsLmcjo_sgl2eGUKrtBMOCg7QNhPhhOLhmGeAtBr9OWBT5f-to2_8LYhmqDrjLzOezvNVrCG4fdc9NKZxUihnQg9DcEb9tR2xVfJsfPbfoeEWVXxaH5iJ69ppsNXT80qUqNYGeVrU5HikmLxXlCnNZVfNYoQdzj2JtFcNMOFjk91bmkSsYX8FmQPXJ4ttcousCvto6KLZJZJRjm1FiUcVTtUn5SvRBPR03CyFB5KCVI9w\",\n                \"e\": \"AQAB\",\n                \"use\": \"tls\",\n                \"kid\": \"249885412258314855950105143722461972632\",\n                \"x5c\": [\n                    \"MIIEhTCCA22gAwIBAgIRALv+Lgg/+ruwTuPYLJMtSJgwDQYJKoZIhvcNAQELBQAwKTEnMCUGA1UEAwweVGVzdCBUcnVzdGVkIERpcmVjdG9yeSBSb290IENBMB4XDTIzMDYxMTEwNDYzMloXDTI0MDYxMDEwNDYzMlowRDEVMBMGA1UEAwwMQWNtZSBGaW50ZWNoMSswKQYDVQRhDCJQU0RHQi1GRkEtNWY1NjNlODk3NDJiMjgwMDE0NWM3ZGExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzgfmgC/vKb6r/QK2YH3aoDJ3LPAZ7Y5hbi9Ap/lBd91mLp3JAszppnGX6NPrXzkkQ47PV/MGcimVNOitUg1L5weFz8ecknhnlVSVnItJlAKQ4AXFyxZuVJt0rot4qTnBWTfFFbZiWD6Yl3KXhW2g0Uy6pgA9x3BCrY5/9ApRIPnZwrJfmuUVfxWeGSNR26dy1hZR+EQr0pdDhyxtOWOmMLJfvskjvhTTiR2yvJcof7ocAFDvWg8ECitCKhwnt5zwSEfBlkdSj8GG3cME8EXoaUmWX3YvfR45Ok+Yb1wigzkFvJsQaQ/k1LJL6oCCh7KbQs0jOsrfRBYbtW6+V3OPaQIDAQABo4IBizCCAYcwDAYDVR0TAQH/BAIwADBYBgNVHSMEUTBPgBRCz1pZy5G9Adz591iZg+EXXnLtLKEtpCswKTEnMCUGA1UEAxMeVGVzdCBUcnVzdGVkIERpcmVjdG9yeSBSb290IENBggh80GUrBsOBbTAdBgNVHQ4EFgQUji57W6SiwZDRaudMlwRj4pOo5xIwCwYDVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMCMIHbBggrBgEFBQcBAwSBzjCByzAIBgYEAI5GAQEwEwYGBACORgEGMAkGBwQAjkYBBgMwCQYHBACL7EkBAjCBngYGBACBmCcCMIGTMGowKQYHBACBmCcBBAweQ2FyZCBCYXNlZCBQYXltZW50IEluc3RydW1lbnRzMB4GBwQAgZgnAQMME0FjY291bnQgSW5mb3JtYXRpb24wHQYHBACBmCcBAgwSUGF5bWVudCBJbml0aWF0aW9uDB1Gb3JnZVJvY2sgRmluYW5jaWFsIEF1dGhvcml0eQwGR0ItRkZBMA0GCSqGSIb3DQEBCwUAA4IBAQAuFMbx5nk6Nx5POlatNbNQgYpBKxVkPB5yYqxQxKzRGkWY5JagfJShH66U7Bkh/pa/0KABdJkQ1vffkvM7lOrOqQ7uTi/45K/+5Nr2onVxkYEj3OF4EK2DHH7KmLikRk2ID+9h+L2pj8/joZGsI4+4jjN2QexS5JoDB/wSkRp2p+y6QDSu+sSxo5if8EzgiKTylgxDwmhb4OXiK/a6tpj5YeMCIq69sEfiGomFQzVEmojR9FrzzlPTgEJ01Zn/vrhX0AIR7xwDe6agh7K41nawrW3+WLjYC63+Fm8m04Ddw/YjMKlhThZzdpsaGFZdN5eaHzJWMFKmJlRZmApvniXQ\"\n                ],\n                \"dp\": \"YL8ky8r6KMOmOlYaB0-dfKTKt6AfupX3gRaiYLntgfoHXlAIv0_VykhDHOFCiREhVaRTxPbZu9XlEh0Wcqbh-C0gQPvQL6dlXisBNJvJEDZpcYSSYksNQmQRm-RAsPBt5kcHTBPMcZg8y4bMkmI5rb4mK5nSt6hiLeTUWhyry1k\",\n                \"dq\": \"yoAz1k-i8hPV1leE-gQAQ8bNNdTNaDgDjFAIoSDrWS95rs7_DfdoBnBuia-UMfjVHl-1cCT86u4DT0Rqbs65NCiybr5t925fZmO_TEsuFm4XGWPpTMxMwg5_Cl6dD4LT5zEZp7jN4_li8qyxMYK4piwgQzs4kQ0HkwTqZaKJi6k\",\n                \"n\": \"zgfmgC_vKb6r_QK2YH3aoDJ3LPAZ7Y5hbi9Ap_lBd91mLp3JAszppnGX6NPrXzkkQ47PV_MGcimVNOitUg1L5weFz8ecknhnlVSVnItJlAKQ4AXFyxZuVJt0rot4qTnBWTfFFbZiWD6Yl3KXhW2g0Uy6pgA9x3BCrY5_9ApRIPnZwrJfmuUVfxWeGSNR26dy1hZR-EQr0pdDhyxtOWOmMLJfvskjvhTTiR2yvJcof7ocAFDvWg8ECitCKhwnt5zwSEfBlkdSj8GG3cME8EXoaUmWX3YvfR45Ok-Yb1wigzkFvJsQaQ_k1LJL6oCCh7KbQs0jOsrfRBYbtW6-V3OPaQ\",\n                \"p\": \"55LYWLWq_QZiynJonqoQMklMExmv_YKU12dxM9axwlx22-dh3liI-hwsxyf5g6SxVlVvDSbYkY49L44WEDTZ9LJmYeASW7MnSL7hqlOtrvzWJjQr5X9EOvRBrFrGMQD_ueJugeFWVMqKfQXfZg1aK4gPDQ1pJN4YhJwNTemwto8\",\n                \"kty\": \"RSA\",\n                \"x5t#S256\": \"nN0KOhpLfsp2AZV51ZugIPfZYY04TaZFpLOkmrz_Q_Q\",\n                \"q\": \"48NTzcDzOzOLSIQiu5-9ZMhY-tMT3PI4knEptUhEKT2t_gjiDuVd2mTKfx8vOmKfAXrXWcvK2yAHlHszdALG2DQMQ6DgDwb4w0u3UHJqwFkN1BQL0BUzd4jscah6qHasp9F3xSxUIUgr6ujfQHYASPzz7IIZZUSqC8JW05y9Foc\",\n                \"qi\": \"2BjlQNa1KVXRVoOjVPRpDM-2CCZtZmYvwVSqpjftSro3PJtf-naOzZULBxGkpfLGA4gpH39UmC_fbyjcmHWpZogyK1RNoGULYid2P4GTEVsnglkzxi7PMAeJ-BI8dnS-_8jDFZSRDHSNb_-_j61aNNRr_dbP9UO5BsfjLWbti4U\",\n                \"alg\": \"PS256\"\n            },\n            {\n                \"d\": \"AkrpoBrWoR_yNjpJ3VjfLDWZONgRhoeUmzuKgQrSAF15iblkpXXjotW3wMhFWBv-pGkXBj1gCsXN8R2ZqyYyzQWBB3iTegSZkZ5e3VvDJVZGIvzGKbqw02G8fWG0WEQq8tvyAZNYLDUlHlTz5aJajvNgYwdzcl5PF0q1inbQzbJRaIt8so9UOzrXAwhiSq8u7Ve8AcSOjBQktTmULo3hozEfBhCzaHEmyCVUacP8rekdtRUl9A-3MHGAZkBE4H0DTOrQvPO7bRXsSN9lR--tu1u3b9eloLHJRXI5ae_2zIUBf0BLauimD1fLx1BKU7tHscem2_ad2s_Ct2Rf0_iPbQ\",\n                \"e\": \"AQAB\",\n                \"use\": \"sig\",\n                \"kid\": \"255221004675495024260691600377467698997\",\n                \"x5c\": [\n                    \"MIIEhTCCA22gAwIBAgIRAMABxwx5wx1HBW4IMPEM/zUwDQYJKoZIhvcNAQELBQAwKTEnMCUGA1UEAwweVGVzdCBUcnVzdGVkIERpcmVjdG9yeSBSb290IENBMB4XDTIzMDYxMTEwNDYzMloXDTI0MDYxMDEwNDYzMlowRDEVMBMGA1UEAwwMQWNtZSBGaW50ZWNoMSswKQYDVQRhDCJQU0RHQi1GRkEtNWY1NjNlODk3NDJiMjgwMDE0NWM3ZGExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzxy3laYH2+I7j+glOOkVXT38yk1UVPj9i5odd7aW6FXL+thrFnmBfZY8OFxIHxdrZBiOb2EWOq/ExQQojATQaW2nlNtkBSFSyVYxCTTBw/f/JGV9/hNOOp0DTIjf7pdaLwEJywB7L8cjgqv1urUDa0eCWvxJR9+5cjwstsEQmmu6iwAGfEE17VIP6hsCQ7tsePBENIkLe8qeixr6vVMdt0XGohiPjRkVk6p3u60VTaKrdKqeTGF6d6ojijMXBWgDMYj54z3A8y7IGfQ43XFhhjsQEBb72zsvSoay6b/Hp4A6ZgljvpAgK78cp0ZBVPamZN6tPVAkuW2kvESxdIGq8QIDAQABo4IBizCCAYcwDAYDVR0TAQH/BAIwADBYBgNVHSMEUTBPgBRCz1pZy5G9Adz591iZg+EXXnLtLKEtpCswKTEnMCUGA1UEAxMeVGVzdCBUcnVzdGVkIERpcmVjdG9yeSBSb290IENBggh80GUrBsOBbTAdBgNVHQ4EFgQU+3ht5sT1GGsZBf8LuJymzEFpKyEwCwYDVR0PBAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMCMIHbBggrBgEFBQcBAwSBzjCByzAIBgYEAI5GAQEwEwYGBACORgEGMAkGBwQAjkYBBgIwCQYHBACL7EkBAjCBngYGBACBmCcCMIGTMGowKQYHBACBmCcBBAweQ2FyZCBCYXNlZCBQYXltZW50IEluc3RydW1lbnRzMB4GBwQAgZgnAQMME0FjY291bnQgSW5mb3JtYXRpb24wHQYHBACBmCcBAgwSUGF5bWVudCBJbml0aWF0aW9uDB1Gb3JnZVJvY2sgRmluYW5jaWFsIEF1dGhvcml0eQwGR0ItRkZBMA0GCSqGSIb3DQEBCwUAA4IBAQAMb3+KgvM08dgDqkQTih8ShwGyfbskzq6zRWz3t/MN0qfUg3QZHU7Otvw/akkLa9aP+u/Y6m3LRfb0UUVHTY565GtcRPqqmpLxX+zNTmYsvsAnbmhikV/V55R3X40j97hIZeqr8rIqA7epq6cjfbM282GysvCP/J3NLkgY06Vj41DVaBI/ZfXl1CIHPo3RmwTbnIJW0ThYMq6ejrE8YbVW8ahMCjDkiTl/49Wh3IPQInF/H8dnH7hxmueYqTj5JNofAWggDyTaUWnzuWh4q2k3wAIp9p5bTulhBSjgutjowKJwQ9xYOKo7P07opa3BNHMZKNBGMnUftT4SQ02Ar6YB\"\n                ],\n                \"dp\": \"dLBrW2uTHHPO2B-_XHmCxLSqOXnTUbRydbnvrQX6_EhkUuiYcYph5a6kCrIR3XXVN7yV6lcIHXkrAnmZMSY5Gu_gmPgl2nbXudgoHxl_ivjopakQFr4Ba8EnyUVAV_wb-msRnBn6MAwFvV2Y1-L6vc7g-nEFhIt7bhBa9nmP7mM\",\n                \"dq\": \"VctqlXM1p9iA18T34uddxsUgGVYOvcKbt-Q7KHoRhSovBl2_7YTFeM-SUzhqRILS77k_NB7U5MbaLejdh_J2ZudOT1Z-d3JiCM350IaYM26tJ4aA1jU-KU8dYaSZIS8gTAyJaKHXMfsajVVY7hjlqtIOq0vZxHGWz5OiVKjyNkc\",\n                \"n\": \"zxy3laYH2-I7j-glOOkVXT38yk1UVPj9i5odd7aW6FXL-thrFnmBfZY8OFxIHxdrZBiOb2EWOq_ExQQojATQaW2nlNtkBSFSyVYxCTTBw_f_JGV9_hNOOp0DTIjf7pdaLwEJywB7L8cjgqv1urUDa0eCWvxJR9-5cjwstsEQmmu6iwAGfEE17VIP6hsCQ7tsePBENIkLe8qeixr6vVMdt0XGohiPjRkVk6p3u60VTaKrdKqeTGF6d6ojijMXBWgDMYj54z3A8y7IGfQ43XFhhjsQEBb72zsvSoay6b_Hp4A6ZgljvpAgK78cp0ZBVPamZN6tPVAkuW2kvESxdIGq8Q\",\n                \"p\": \"8TjKnYBSwJQnRqcIvzjE0gp4_wHW5Q1RIWB_tHbUun5xQOff-dI-KVT4bazAeHnKs66eLfQ_HiuXqzfNonBffM5kUFXobRT9An6EmcrW-Zmnsm4C0xy1LwZqdqlgf1yYWJ922TJRO_EoEi3ulhRam3SuZa4BtVjdVKG7uZc5CG8\",\n                \"kty\": \"RSA\",\n                \"x5t#S256\": \"Ckjv1qXk2P2dQUGxD2hm3CrlO0x1KGdQKog-8NFH0Dg\",\n                \"q\": \"28z3Ra39fRq8mkrpgxRulVwgh1yt96CVfva2rsMQkxsxLAfJ6ZxBgSLjIvF-fj6e9qUXgEkaudXbuH9UM1upWW726OGBYqv2Yn5CiM49hqOB2TARvYLuTWkDzObhC3sn_c6EkfDY1tKKpbO0vRQfYWZH4wswXmxz-kzbKmTscp8\",\n                \"qi\": \"qb0aNK6--5EMdYaImaRsEN_PLCXGJDxIWE_Rmem8Q2Va2kh4Au4ZeyZ7T-nquEmJJq2UEj8Fl6NNUukX4-sxEYr8DeEv90rfcd-NCX1zz8o7iOz4TYulNmTmQ6ligkYTp11AkzqWLc8NiL0K3m1in5ybfMDWCqsj3Bs2zhrKAOE\",\n                \"alg\": \"PS256\"\n            }\n        ]\n    },\n    \"application_type\": \"web\",\n    \"introspection_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"introspection_signed_response_alg\": \"RS256\",\n    \"userinfo_encrypted_response_enc\": \"\",\n    \"registration_client_uri\": \"https://sapig.ob-sandbox-v1.forgerock.financial/am/oauth2/realms/root/realms/alpha/register?client_id=024541d4-6fbe-4cda-a047-278433881a2e\",\n    \"client_type\": \"Confidential\",\n    \"userinfo_encrypted_response_alg\": \"\",\n    \"registration_access_token\": \"eyJ0eXAiOiJKV1QiLCJraWQiOiJmNUtZdHBqQU5BK2NFV0VtUjhlT2JjMFRPbEk9IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiIwMjQ1NDFkNC02ZmJlLTRjZGEtYTA0Ny0yNzg0MzM4ODFhMmUiLCJjdHMiOiJPQVVUSDJfU1RBVEVMRVNTX0dSQU5UIiwiYXVkaXRUcmFja2luZ0lkIjoiNGZhZDY5ZjEtZWJhNi00Y2Y4LWE4ZDYtOTkwMGNiMTM1MjFkLTEwNDUwNCIsInN1Ym5hbWUiOiIwMjQ1NDFkNC02ZmJlLTRjZGEtYTA0Ny0yNzg0MzM4ODFhMmUiLCJpc3MiOiJodHRwczovL3NhcGlnLm9iLXNhbmRib3gtdjEuZm9yZ2Vyb2NrLmZpbmFuY2lhbC9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoidTR0TmtvNVExVWVOWkNwQmJoVWlPaHlkRnl3IiwiYXVkIjoiMDI0NTQxZDQtNmZiZS00Y2RhLWEwNDctMjc4NDMzODgxYTJlIiwibmJmIjoxNjg2NTY2OTE1LCJncmFudF90eXBlIjoiZHluYW1pY19jbGllbnRfcmVnaXN0cmF0aW9uIiwic2NvcGUiOltdLCJhdXRoX3RpbWUiOjE2ODY1NjY5MTUsInJlYWxtIjoiL2FscGhhIiwiZXhwIjoxNjg2OTI2OTE1LCJpYXQiOjE2ODY1NjY5MTUsImV4cGlyZXNfaW4iOjM2MDAwMCwianRpIjoiZkFfZ0tDczl4WnktLVNpc25sUWlhNS1EOVh3In0.SiXucooH4tRqHcSYNdN3J6L2903rzGNolF5jo8hVTEvwi76yzmvtRiZ6vpYc1dw0kTtPSTYWfSfm-Ij0MRCp0JGJYM46NtumXl50eqwNy62PV1298aykXHMRyb7tZnXVmr1ZYzS6E9BBC1FRzZfmzLkeFUI4B2r7lJPsSOSLBWRErYLmR4neaoSA4PyUzssTTPiSUrPzy0bKn9Ox0NgOpiDeEOGL7f72gIQP-SDyjBqArl2XTeoCCFC7fsSJI04rMeDVpNR_BHPM8bmzq7A9BdyMlJnQAMAOjrPqIBjnsM_31R76foEA_ToI5_sDZKTgMFMrKPIJWkPQQyPuVhwv6w\",\n    \"client_id\": \"024541d4-6fbe-4cda-a047-278433881a2e\",\n    \"token_endpoint_auth_method\": \"private_key_jwt\",\n    \"userinfo_signed_response_alg\": \"\",\n    \"software_statement\": \"eyJ0eXAiOiJKV1QiLCJraWQiOiJqd3Qtc2lnbmVyIiwiYWxnIjoiUFMyNTYifQ..PlXOHPbM_UIHxu3UGLoSIA09R0ID4jOr1eYGxSw2hE51-iho88ZRv8vJQEQZdfDUGMtxb9HxeQp5X6DVDwxx3boUO7FynOiIlam-cjsEiWGoov13MrchOUV1YYcXWAt5EbODCuGDmM9LChN-_8qVxlV6v3-MnWoQVqLjiJ6_saUpg2UCV1d8IFO4w-osgUFKnd1-6ZaOxa5qPxA7IPjj82cQZyESXhRJtxqApspk15Sg7LfXo3buzmPs2SugIhN3XQ5nwxuJ8ct6VI7uU0xTSSnwW5zu40FQkoge33RO4IvVOMKR6gLgRz7ZmAHiOmv-CjCNa0VmJDSOSUw4ZdlVWA\",\n    \"software_id\": \"b92a42ff-f594-477e-bc32-4a7b49f1c68e\",\n    \"public_key_selector\": \"jwks\",\n    \"scope\": \"openid payments fundsconfirmations accounts eventpolling\",\n    \"require_pushed_authorization_requests\": false,\n    \"authorization_code_lifetime\": 0,\n    \"client_secret\": \"Pe-kYme_L5RQ10LJPbns0pHjtdrUvjYePMBxROVBs3A\",\n    \"user_info_response_format_selector\": \"JSON\",\n    \"tls_client_certificate_bound_access_tokens\": true,\n    \"backchannel_logout_session_required\": false,\n    \"request_object_encryption_enc\": \"A128CBC-HS256\",\n    \"id_token_signed_response_alg\": \"PS256\",\n    \"default_max_age_enabled\": false,\n    \"token_intro_response_format_selector\": \"JSON\",\n    \"subject_type\": \"pairwise\",\n    \"grant_types\": [\n        \"authorization_code\",\n        \"refresh_token\",\n        \"client_credentials\"\n    ],\n    \"jwt_token_lifetime\": 0,\n    \"id_token_encryption_enabled\": false,\n    \"redirect_uris\": [\n        \"https://postman-echo.com/get\"\n    ],\n    \"jwks_cache_miss_cache_time\": 60000,\n    \"jwks_cache_timeout\": 3600000,\n    \"id_token_encrypted_response_alg\": \"RSA-OAEP-256\",\n    \"id_token_encrypted_response_enc\": \"A128CBC-HS256\",\n    \"client_secret_expires_at\": 0,\n    \"access_token_lifetime\": 0,\n    \"refresh_token_lifetime\": 0,\n    \"scopes\": [\n        \"openid\",\n        \"payments\",\n        \"fundsconfirmations\",\n        \"accounts\",\n        \"eventpolling\"\n    ],\n    \"request_object_signing_alg\": \"PS256\",\n    \"response_types\": [\n        \"code id_token\"\n    ]\n}"
								}
							]
						},
						{
							"name": "3.2: (optional) Get TPP Dynamic Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registration_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}/{{client_id}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									],
									"path": [
										"{{client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3: (optional) Update TPP Dynamic Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request",
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get(\"jsrsasign_js\"));",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') ;",
											"console.log(privateKey)",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"// Update the original dcr",
											"var data = JSON.parse(pm.environment.get('dynamic_registration_request_raw_data'))",
											"data.client_id = pm.environment.get('client_id')",
											"data.exp = currentTimestamp + 180",
											"data.redirect_uris = [pm.environment.get('client_redirect_uri')]",
											"data.software_statement = pm.environment.get('ob_software_statement_assertion')",
											"",
											"console.log(\"data\", data)",
											"// sign token",
											"var dynamic_registration_jws =  KJUR.jws.JWS.sign(\"PS256\", header, data, privateKey);",
											"pm.environment.set('dynamic_registration_request_updated', dynamic_registration_jws)",
											"console.log('Signed dynamic_registration_request', dynamic_registration_jws)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 200 and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"if (pm.expect(responseBody).not.eql(undefined)){",
											"    var data = JSON.parse(responseBody);",
											"    if (data.client_id !== null){",
											"        pm.environment.set(\"client_id\", data.client_id);",
											"        pm.environment.set(\"client_secret\", data.client_secret);",
											"        console.log(\"Redirect uris found: \" + data.redirect_uris);",
											"        if(data.redirect_uris.length > 1) {",
											"            console.log(\"setting the first redirect_uri found: \" + data.redirect_uris[0]);",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        } else {",
											"            pm.environment.set(\"client_redirect_uri\", data.redirect_uris[0]);",
											"        }",
											"        pm.environment.set(\"registration_access_token\", data.registration_access_token)",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registration_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{dynamic_registration_request_updated}}"
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}/{{client_id}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									],
									"path": [
										"{{client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.3 (optional): Delete Dynamic Registration",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 204 and no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registration_access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{aspsp_registration_endpoint}}/{{client_id}}",
									"host": [
										"{{aspsp_registration_endpoint}}"
									],
									"path": [
										"{{client_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Before an Api Client can use the protected API they must create a registration and obtain a clientId. Registration is the process whereby the API Client identifies itself to the API Provider and the API Provider creates an OAuth2 client definition for the Api Client. The Api Provider will return details to the Api Client to allow them to access the APIs.\n\nTo understand this process is will be helpful to read [this article](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-Dynamic-Client-Registration). It explains the approach that the Secure API Gateway takes to Dynamic Client Registration and the actors and resources involved in this process. Dynamic Client Registration is a fairly complex topic and a good understanding of the bigger picture will be necessary to understand the choices we can make and the individual steps that we will take to register to use the Open Banking Test Facility APIs.\n\nThe API that we will be testing is configured to trust two Trusted Directories;  \n\\- The Secure API Gateway Trusted Directory  \n\\- The Open Banking Test/Sandbox Directory\n\nIf you have already registered with the Open Banking test Directory, you should use that trusted directory to perform dynamic client registration.\n\nIf you have not registered with the Open Banking Test Directory, then it is possible to register using the Secure API Gateway's own Trusted Directory. You can read more about this trusted directory [here](https://github.com/SecureAPIGateway/SecureApiGateway/wiki/About-the-Secure-API-Gateway's-Trusted-Directory)."
		},
		{
			"name": "3: Get resources and endpoint URIs",
			"item": [
				{
					"name": "3.1: Resource Server's discovery document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response must be valid and have a json body\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var data = JSON.parse(responseBody);",
									"",
									"pm.test(\"To have payments and accounts apis\", function () {",
									"    pm.expect(data.Data.PaymentInitiationAPI).to.not.be.null;",
									"    pm.expect(data.Data.AccountAndTransactionAPI).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-OpenIDM-Username",
								"value": "openidm-admin",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-OpenIDM-Password",
								"value": "openidm-admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/discovery",
							"protocol": "https",
							"host": [
								"{{MTLS-IG-FQDN}}"
							],
							"path": [
								"rs",
								"open-banking",
								"discovery"
							]
						},
						"description": "Call the RS discovery endpoints. This will load all the OB endpoints into your postman environment"
					},
					"response": [
						{
							"name": "Resource Server's discovery document",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "X-OpenIDM-Username",
										"value": "openidm-admin",
										"type": "text",
										"disabled": true
									},
									{
										"key": "X-OpenIDM-Password",
										"value": "openidm-admin",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/discovery",
									"protocol": "https",
									"host": [
										"mtls",
										"sapig",
										"ob-sandbox-v1",
										"forgerock",
										"financial"
									],
									"path": [
										"rs",
										"open-banking",
										"discovery"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 13 Apr 2023 14:08:41 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=UTF-8"
								},
								{
									"key": "Content-Length",
									"value": "20760"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "x-fapi-interaction-id",
									"value": "1e2037e4-6771-4e62-8d80-58df42e5854f"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15724800; includeSubDomains"
								}
							],
							"cookie": [],
							"body": "{\n    \"Data\": {\n        \"FinancialId\": \"0015800001041REAAY\",\n        \"PaymentInitiationAPI\": [\n            {\n                \"Version\": \"v3.1.10\",\n                \"Links\": {\n                    \"@type\": \"GenericOBDiscoveryAPILinks\",\n                    \"links\": {\n                        \"GetDomesticScheduledPaymentDomesticPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details\",\n                        \"CreateDomesticPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments\",\n                        \"CreateFilePayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments\",\n                        \"CreateInternationalStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders\",\n                        \"GetInternationalPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}\",\n                        \"GetInternationalStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}\",\n                        \"GetInternationalScheduledPaymentPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details\",\n                        \"CreateInternationalPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments\",\n                        \"CreateDomesticVrpPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps\",\n                        \"GetDomesticStandingOrderDomesticStandingOrderIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}/payment-details\",\n                        \"GetInternationalStandingOrderInternationalStandingOrderIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details\",\n                        \"CreateDomesticScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments\",\n                        \"GetDomesticVrpPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}/payment-details\",\n                        \"CreateDomesticStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders\",\n                        \"GetDomesticPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}\",\n                        \"GetDomesticScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}\",\n                        \"GetFilePayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments/{FilePaymentId}\",\n                        \"CreateInternationalScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments\",\n                        \"GetDomesticPaymentDomesticPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}/payment-details\",\n                        \"GetInternationalScheduledPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}\",\n                        \"GetInternationalPaymentInternationalPaymentIdPaymentDetails\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}/payment-details\",\n                        \"GetDomesticStandingOrder\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}\",\n                        \"GetDomesticVrpPayment\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}\",\n                        \"CreateDomesticPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents\",\n                        \"GetDomesticPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}\",\n                        \"GetDomesticPaymentConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"CreateDomesticScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents\",\n                        \"GetDomesticScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents/{ConsentId}\",\n                        \"CreateDomesticStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents\",\n                        \"GetDomesticStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents/{ConsentId}\",\n                        \"CreateInternationalPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents\",\n                        \"GetInternationalPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}\",\n                        \"GetInternationalPaymentConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"CreateInternationalScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents\",\n                        \"GetInternationalScheduledPaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}\",\n                        \"GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"CreateInternationalStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents\",\n                        \"GetInternationalStandingOrderConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents/{ConsentId}\",\n                        \"CreateFilePaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents\",\n                        \"CreateFilePaymentFile\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"GetFilePaymentConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}\",\n                        \"GetFilePaymentFile\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"CreateDomesticVRPConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents\",\n                        \"GetDomesticVRPConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"DeleteDomesticVRPConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"GetDomesticVRPConsentsConsentIdFundsConfirmation\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}/funds-confirmation\"\n                    },\n                    \"linkValues\": [\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payments/{DomesticScheduledPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payments/{FilePaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payments/{DomesticPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payments/{InternationalScheduledPaymentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payments/{InternationalPaymentId}/payment-details\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-orders/{DomesticStandingOrderId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrps/{DomesticVRPId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-scheduled-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-standing-order-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-scheduled-payment-consents/{ConsentId}/funds-confirmation\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/international-standing-order-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/file-payment-consents/{ConsentId}/file\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/pisp/domestic-vrp-consents/{ConsentId}/funds-confirmation\"\n                    ]\n                }\n            }\n        ],\n        \"AccountAndTransactionAPI\": [\n            {\n                \"Version\": \"v3.1.10\",\n                \"Links\": {\n                    \"@type\": \"GenericOBDiscoveryAPILinks\",\n                    \"links\": {\n                        \"GetParty\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/party\",\n                        \"GetAccountStatements\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements\",\n                        \"GetScheduledPayments\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/scheduled-payments\",\n                        \"GetAccountParties\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/parties\",\n                        \"GetTransactions\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/transactions\",\n                        \"GetProducts\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/products\",\n                        \"GetAccountTransactions\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/transactions\",\n                        \"GetAccountScheduledPayments\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/scheduled-payments\",\n                        \"GetAccountStatementFile\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/file\",\n                        \"GetAccounts\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts\",\n                        \"GetAccountStandingOrders\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/standing-orders\",\n                        \"GetAccountBeneficiaries\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/beneficiaries\",\n                        \"GetBalances\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/balances\",\n                        \"GetAccount\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}\",\n                        \"GetAccountProduct\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/product\",\n                        \"GetOffers\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/offers\",\n                        \"GetBeneficiaries\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/beneficiaries\",\n                        \"GetAccountStatementTransactions\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/transactions\",\n                        \"GetAccountOffers\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/offers\",\n                        \"GetAccountDirectDebits\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/direct-debits\",\n                        \"GetStatements\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/statements\",\n                        \"GetAccountBalances\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/balances\",\n                        \"GetAccountParty\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/party\",\n                        \"GetStandingOrders\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/standing-orders\",\n                        \"GetAccountStatement\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}\",\n                        \"GetDirectDebits\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/direct-debits\",\n                        \"CreateAccountAccessConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents\",\n                        \"GetAccountAccessConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\",\n                        \"DeleteAccountAccessConsent\": \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\"\n                    },\n                    \"linkValues\": [\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/party\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/parties\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/transactions\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/products\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/transactions\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/scheduled-payments\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/file\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/beneficiaries\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/balances\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/product\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/offers\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/beneficiaries\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}/transactions\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/offers\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/direct-debits\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/statements\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/balances\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/party\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/standing-orders\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/accounts/{AccountId}/statements/{StatementId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/direct-debits\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\",\n                        \"https://mtls.sapig.ob-sandbox-v1.forgerock.financial/rs/open-banking/v3.1.10/aisp/account-access-consents/{ConsentId}\"\n                    ]\n                }\n            }\n        ],\n        \"FundsConfirmationAPI\": null,\n        \"EventNotificationAPI\": null\n    }\n}"
						}
					]
				}
			],
			"description": "You have performed Dynamic Client Registration and have configured Postman to use your transport certificates. You can now use the Secure API Gateway's Resource Server Discovery Endpoint to discover all of the resources we can manage via the REST API and the URIs we must use to do so.\n\nIn this case the returned resources and endpoints will be the [UK Open Banking read write api specifications](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/read-write-data-api-profile.html). However, you could use the Secure API Gateway to create custom APIs and include them in the Resource Server Discovery response.\n\n## The Resource Server's Discovery Endpoint.\n\nThe returned json document contains all of the resources and the endpoint URIs via which they can be managed. A client should use the contents of this response rather than hard coding urls into their applications."
		},
		{
			"name": "4: Get Accounts Journey",
			"item": [
				{
					"name": "4.1: TPP Creates Account Access Consent Request",
					"item": [
						{
							"name": "4.1.1: Get client_credentials grant Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var jwtSecret = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID'),",
											"\t'alg': 'PS256'",
											"};",
											"console.info(\"kid is \" + pm.environment.get('OB-SIGNING-KEY-ID'))",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"console.log(pm.environment.get(\"as_issuer_id\"))",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"// console.log(\"call: \" + JSON.stringify({jwtSecret: jwtSecret, data: data, header: header}) );",
											"var signedToken = pmlib.jwtSign(jwtSecret, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "accounts",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								},
								"description": "In this step, the TPP needs to obtain an access token using the client_credential OAuth2 grant flow. This access_token must be provided in the request to create the account-access-consent.\n\n[The FAPI Security Profile 1.0 - Part 2: Advanced](https://openid.net/specs/openid-financial-api-part-2-1_0.html#authorization-server) states that the token_endpoint_client_auth_method must be tls_client_auth, or private_key_jwt. self_signed_tls_client_auth is also allowed, but the spec, but is not supported by the Secure API Gateway.\n\nWhen our TPP performed Dynamic Client Registration (back in step 3.2) we requested that the token_endpoint_auth_method to use should be private_key_jwt.\n\nThe url_encoded body of the request contains the scope 'accounts' as specified in the [account and transactions Security and Access Control](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html#security-access-control) part of the Open Banking specifications."
							},
							"response": []
						},
						{
							"name": "4.1.2: Create Account Access Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"Permissions\": [\n      \"ReadAccountsDetail\",\n      \"ReadBalances\",\n      \"ReadTransactionsDetail\",\n      \"ReadTransactionsCredits\",\n      \"ReadBeneficiariesDetail\",\n      \"ReadDirectDebits\",\n      \"ReadStandingOrdersDetail\",\n      \"ReadProducts\",\n      \"ReadOffers\",\n      \"ReadParty\",\n      \"ReadScheduledPaymentsDetail\",\n      \"ReadStatementsDetail\"\n    ],\n    \"ExpirationDateTime\": \"2019-08-01T00:00:00.000Z\",\n    \"TransactionFromDateTime\": \"2019-04-03T00:00:00.000Z\",\n    \"TransactionToDateTime\": \"2019-08-01T00:00:00.000Z\"\n  },\n  \"Risk\": {}\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/account-access-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"account-access-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.3: Get  Account Access Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/account-access-consents/{{account_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"account-access-consents",
										"{{account_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.1.4: Delete Account Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 204 and no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-fapi-financial-id",
										"type": "text",
										"value": "{{X-FAPI-FINANCIAL-ID}}"
									},
									{
										"key": "x-fapi-customer-last-logged-time",
										"type": "text",
										"value": "{{X-FAPI-CUSTOMER-LAST-LOGGED-TIME}}"
									},
									{
										"key": "x-fapi-customer-ip-address",
										"type": "text",
										"value": "{{X-FAPI-CUSTOMER-IP-ADDRESS}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"type": "text",
										"value": "{{X-FAPI-INTERACTION-ID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/account-access-consents/{{account_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"account-access-consents",
										"{{account_intent_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "In this step the TPP is using the Account Access Consent APIs to create a new account-access-consent resource. The consent object, when created, will have the status 'AwaitingAuthorisation'. The TPP will not be able to access any account information until the PSU (the bank account owner) has given their consent and the status has changed to 'Authorized'."
				},
				{
					"name": "4.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "4.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var jwtSecret = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"console.log(\"jwtSecret is \" + jwtSecret)",
											"var kid = pm.environment.get('OB-SIGNING-KEY-ID')",
											"console.log(\"kid is \" + kid)",
											"// Set headers for JWT",
											"var audience = pm.environment.get('as_issuer_id')",
											"console.log(\"audience is \" +audience)",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': kid,",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": audience,",
											"      \"scope\": \"openid accounts\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"account_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(jwtSecret, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"tlsPreferServerCiphers": false,
								"disableCookies": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.3: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "4.3.1: get authorization_code grant Access Token (with consent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// const cookieJar = pm.cookies.jar();",
											"// // Clear the OAUTH_REQUEST_ATTRIBUTES cookie",
											"// cookieJar.unset(pm.environment.get(\"AS_token_endpoint\") , \"OAUTH_REQUEST_ATTRIBUTES\", function(error) {",
											"//     if (error) {",
											"//         console.log(\"Failed to delete cookie: \" + error)",
											"//     }",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.3.2 (optional): Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4.4 TPP Gets Account Data on behalf of PSU",
					"item": [
						{
							"name": "Accounts List Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Account[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Account[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balances Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Balance[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/balances",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/balances",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Balances Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Balance[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/balances",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/balances",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Transactions Bulk Query Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Transaction[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/v3.1/aisp/transactions",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/transactions",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Transactions Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Transaction[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/transactions",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/transactions",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Beneficiaries Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Beneficiary[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/beneficiaries",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/beneficiaries",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"beneficiaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Beneficiaries Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Beneficiary[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/beneficiaries",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/beneficiaries",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"beneficiaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Direct Debits Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.DirectDebit[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/direct-debits",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/direct-debits",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Direct Debits Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.DirectDebit[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/direct-debits",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/direct-debits",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Standing Orders Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.StandingOrder[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/standing-orders",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/standing-orders",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"standing-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Standing Orders Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.StandingOrder[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/standing-orders",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/standing-orders",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"standing-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Product Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Product[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/products",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/products",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Product Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"account_id\", data.Data.Product[0].AccountId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/product",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/product",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"product"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Offers Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"offer_id\", data.Data.Offer[0].OfferId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/offers",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/offers",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Offers Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"offer_id\", data.Data.Offer[0].OfferId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/offers",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/offers",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Party Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"party_id\", data.Data.Party.PartyId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/party",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/party",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"party"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Party Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"party_id\", data.Data.Party.PartyId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/party",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/party",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"party"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Parties Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"party_id\", data.Data.Party.PartyId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/parties",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/parties",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"parties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Scheduled Payments Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"scheduled_payment_id\", data.Data.ScheduledPayment.ScheduledPaymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/scheduled-payments",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/scheduled-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"scheduled-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Scheduled Payments Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"scheduled_payment_id\", data.Data.ScheduledPayment.ScheduledPaymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/scheduled-payments",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/scheduled-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"scheduled-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Statements Bulk Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"statement_id\", data.Data.Statement.StatementId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/statements",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/statements",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"statements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Statements Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"statement_id\", data.Data.Statement[0].StatementId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Statements Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"statement_id\", data.Data.Statement[0].StatementId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements",
										"{{statement_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Statements Transactions Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/transactions",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/transactions",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements",
										"{{statement_id}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Account Statements File Download",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{$guid}}"
									},
									{
										"key": "Accept",
										"value": "application/pdf"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									},
									{
										"key": "x-ob-url",
										"value": "http://localhost:8080/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/file",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/aisp/accounts/{{account_id}}/statements/{{statement_id}}/file",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"aisp",
										"accounts",
										"{{account_id}}",
										"statements",
										"{{statement_id}}",
										"file"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Auth & Consent (automation)",
					"item": [
						{
							"name": "Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"console.log(\"consent Request: \" + consentRequest)",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consented_account_id\", data.accounts[0].account.accountId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"consentJwt\": \"{{consent_request}}\",\n  \"decision\": \"Authorised\",\n  \"sharedAccounts\": [\n    \"{{consented_account_id}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "This collection allows you perform the flow that allows a TPP to access bank account data on behalf of a bank account owner user (PSU).\n\nThe Open Banking UK APIs implemented here adhere to the following specification;\n\n[https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html](https://openbankinguk.github.io/read-write-api-site3/v3.1.10/profiles/account-and-transaction-api-profile.html)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "5: Domestic Payments",
			"item": [
				{
					"name": "5.1: TPP Create Payment Consent",
					"item": [
						{
							"name": "5.1.1: Get client_credentials grant access_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have access_token and id_token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"    pm.expect(data.id_token).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.2: Create Domestic Payment Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"pm.globals.unset(\"variable_key\");",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"domestic_payment_intent_id\", data.Data.ConsentId);",
											"pm.environment.unset(\"variable_key\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '', \r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.2.1 (optional): Create Domestic Payment Consent with debtorAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"domestic_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '', \r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"DebtorAccount\": {{user_debtor_account}},\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.1.3 v1: Get Domestic Payments Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents/{{domestic_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payment-consents",
										"{{domestic_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "5.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var jwtSecret = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"domestic_payment_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(jwtSecret, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.3: Auth & Consent (automation)",
					"item": [
						{
							"name": "5.3.1 Clear Session",
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.2 Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.3 Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"console.log(\"consent Request: \" + consentRequest)",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.4 Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"if((data.accounts != null || data.accounts != undefined) && data.accounts.length > 0){",
											"    console.log(\"set debtor_account variable\")",
											"    postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));",
											"} else {",
											"    throw new Error(\"No there is any account in the consent details\")",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.5 Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.consentJwt).to.not.be.null;",
											"    pm.expect(data.redirectUri).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.6 Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   location = pm.response.headers.get(\"Location\");",
											"   pm.expect(location).not.to.include(\"error=\");",
											"   pm.expect(location).to.include(\"code=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc: \" + loc)",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.3.7 Get Patched Domestic Payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()\r",
											"delete responseData._id;\r",
											"delete responseData._rev;\r",
											"delete responseData.Data.CreationDateTime;\r",
											"delete responseData.Data.StatusUpdateDateTime;\r",
											"\r",
											"postman.setEnvironmentVariable(\"patched_domestic_payment_consent\", JSON.stringify(responseData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents/{{domestic_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payment-consents",
										"{{domestic_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "5.4.1 get authorization_code access_token (with consent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.5: TPP checks PSU has funds",
					"item": [
						{
							"name": "5.5.1 Get Domestic Payment Funds Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payment-consents/{{domestic_payment_intent_id}}/funds-confirmation",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payment-consents",
										"{{domestic_payment_intent_id}}",
										"funds-confirmation"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5.6 TPP Creates Payment",
					"item": [
						{
							"name": "5.6.1 Submit Domestic Payment - Include Signing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"//postman.setEnvironmentVariable(\"domestic_payment_id\", data.Data.DomesticPaymentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_payment_intent_id}}\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"LocalInstrument\": null,\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"DebtorAccount\": null,\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"CreditorPostalAddress\": null,\n            \"RemittanceInformation\": {\n                \"Unstructured\": \"Internal ops code 5120101\",\n                \"Reference\": \"FRESCO-101\"\n            },\n            \"SupplementaryData\": null\n        },\n        \"Authorisation\": null,\n        \"SCASupportData\": null,\n        \"Debtor\": null\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"ContractPresentInidicator\": null,\n        \"BeneficiaryPrepopulatedIndicator\": null,\n        \"PaymentPurposeCode\": null,\n        \"BeneficiaryAccountType\": null,\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountrySubDivision\": null,\n            \"Country\": \"UK\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.6.2 Get Domestic Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payments/{{domestic_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payments",
										"{{domestic_payment_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.6.3 Get Domestic Payment Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"//postman.setEnvironmentVariable(\"DomesticPaymentId\", data.Data.DomesticPaymentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{patched_domestic_payment_consent}}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-payments/{{domestic_payment_intent_id}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-payments",
										"{{domestic_payment_intent_id}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "6: Domestic Scheduled Payments",
			"item": [
				{
					"name": "6.1: TPP Creates Payment Consent",
					"item": [
						{
							"name": "6.1.1: Get client_credentials grant access_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have access_token and id_token\", function () {",
											"    pm.expect(data.access_token).to.not.be.null;",
											"    pm.expect(data.id_token).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1.2: Create Domestic Scheduled Payments Access Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"domestic_scheduled_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '', \r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": \"Yes\",\n        \"permission\": \"Create\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"RequestedExecutionDateTime\":\"2023-10-21T11:46:53+03:00\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-scheduled-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1.2.1 (optional): Create Domestic Scheduled Payments Access Intent with DebtorAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"To have ConsentId\", function () {",
											"    pm.expect(data.Data.ConsentId).to.not.be.null;",
											"});",
											"",
											"postman.setEnvironmentVariable(\"domestic_scheduled_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '', \r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": \"Yes\",\n        \"permission\": \"Create\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"RequestedExecutionDateTime\":\"2023-10-21T11:46:53+03:00\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"DebtorAccount\": {{user_debtor_account}},\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-scheduled-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.1.3 v1: Get Domestic Scheduled Payments Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payment-consents/{{domestic_scheduled_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-scheduled-payment-consents",
										"{{domestic_scheduled_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "6.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var jwtSecret = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"domestic_scheduled_payment_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(jwtSecret, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "6.4.1 get authorization_code grant Access Token (with Consent)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6.6 TPP Creates Payment",
					"item": [
						{
							"name": "6.6.1 Submit Domestic Scheduled Payment - Include Signing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_scheduled_payment_intent_id}}\",\n        \"ReadRefundAccount\": \"Yes\",\n        \"permission\": \"Create\",\n        \"Initiation\": {\n            \"InstructionIdentification\": \"ACME412\",\n            \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n            \"RequestedExecutionDateTime\":\"2023-10-21T11:46:53+03:00\",\n            \"InstructedAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            },\n            \"RemittanceInformation\": {\n                \"Reference\": \"FRESCO-101\",\n                \"Unstructured\": \"Internal ops code 5120101\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"EcommerceGoods\",\n        \"MerchantCategoryCode\": \"5967\",\n        \"MerchantCustomerIdentification\": \"053598653254\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"Flat 7\",\n                \"Acacia Lodge\"\n            ],\n            \"StreetName\": \"Acacia Avenue\",\n            \"BuildingNumber\": \"27\",\n            \"PostCode\": \"GU31 2ZZ\",\n            \"TownName\": \"Sparsholt\",\n            \"CountySubDivision\": [\n                \"Wessex\"\n            ],\n            \"Country\": \"UK\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-scheduled-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6.2 Get Domestic Scheduled Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payments/{{domestic_scheduled_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-scheduled-payments",
										"{{domestic_scheduled_payment_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.6.3 Get Domestic Scheduled Payment Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"//postman.setEnvironmentVariable(\"DomesticPaymentId\", data.Data.DomesticPaymentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{patched_domestic_payment_consent}}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-scheduled-payments/{{domestic_scheduled_payment_intent_id}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-scheduled-payments",
										"{{domestic_scheduled_payment_intent_id}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "7: Domestic Standing Orders",
			"item": [
				{
					"name": "7.1: TPP Creates Payment Consent",
					"item": [
						{
							"name": "7.1.1: get client_credentials grant access_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1.2: Create Domestic Standing Order Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"domestic_standing_order_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') ||'',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"Frequency\": \"QtrDay:ENGLISH\",\n            \"Reference\": \"Reference text\",\n            \"FirstPaymentDateTime\": \"2022-06-21T06:06:06+00:00\",\n            \"FirstPaymentAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"RecurringPaymentAmount\": {\n                \"Amount\": \"65\",\n                \"Currency\": \"GBP\"\n            },\n            \"FinalPaymentDateTime\": \"2023-03-20T06:06:06+00:00\",\n            \"FinalPaymentAmount\": {\n                \"Amount\": \"525.83\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"PartyToParty\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-order-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-standing-order-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1.2.1 (optional): Create Domestic Standing Order Intent with DebtorAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"domestic_standing_order_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') ||'',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"Frequency\": \"QtrDay:ENGLISH\",\n            \"Reference\": \"Reference text\",\n            \"FirstPaymentDateTime\": \"2022-06-21T06:06:06+00:00\",\n            \"FirstPaymentAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"RecurringPaymentAmount\": {\n                \"Amount\": \"65\",\n                \"Currency\": \"GBP\"\n            },\n            \"FinalPaymentDateTime\": \"2023-03-20T06:06:06+00:00\",\n            \"FinalPaymentAmount\": {\n                \"Amount\": \"525.83\",\n                \"Currency\": \"GBP\"\n            },\n            \"DebtorAccount\": {{user_debtor_account}},\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"PartyToParty\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-order-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-standing-order-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.1.3 v1: Get Domestic Standing Order Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-fapi-financial-id",
										"type": "text",
										"value": "{{x-fapi-financial-id}}",
										"disabled": true
									},
									{
										"key": "x-fapi-customer-last-logged-time",
										"type": "text",
										"value": "{{x-fapi-customer-last-logged-time}}",
										"disabled": true
									},
									{
										"key": "x-fapi-customer-ip-address",
										"type": "text",
										"value": "{{x-fapi-customer-ip-address}}",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"type": "text",
										"value": "{{x-fapi-interaction-id}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-order-consents/{{domestic_standing_order_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-standing-order-consents",
										"{{domestic_standing_order_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "7.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"domestic_standing_order_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 302 and Header location doesnt contains error\", function () {",
											"   pm.response.to.have.status(302);",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7.3 Auth & Consent (automation)",
					"item": [
						{
							"name": "7.3.1 Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3.2 Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3.3 Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3.4 Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"if((data.accounts != null || data.accounts != undefined) && data.accounts.length > 0){",
											"    console.log(\"set debtor_account variable\")",
											"    postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));",
											"} else {",
											"    throw new Error(\"No there is any account in the consent details\")",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3.5 Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3.6 Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"console.log(authCode)",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.3.7 Get Patched Domestic Standing Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()\r",
											"delete responseData._id;\r",
											"delete responseData._rev;\r",
											"delete responseData.Data.CreationDateTime;\r",
											"delete responseData.Data.StatusUpdateDateTime;\r",
											"\r",
											"postman.setEnvironmentVariable(\"patched_domestic_standing_order_consent\", JSON.stringify(responseData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-order-consents/{{domestic_standing_order_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-standing-order-consents",
										"{{domestic_standing_order_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "7.4.1 get authorization_code grant Access Token with Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "7.5 TPP Creates Payment",
					"item": [
						{
							"name": "7.5.1 Submit Domestic Standing Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_standing_order_intent_id}}\",\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"Yes\",\n        \"Initiation\": {\n            \"Frequency\": \"QtrDay:ENGLISH\",\n            \"Reference\": \"Reference text\",\n            \"FirstPaymentDateTime\": \"2022-06-21T06:06:06+00:00\",\n            \"FirstPaymentAmount\": {\n                \"Amount\": \"165.88\",\n                \"Currency\": \"GBP\"\n            },\n            \"RecurringPaymentAmount\": {\n                \"Amount\": \"65\",\n                \"Currency\": \"GBP\"\n            },\n            \"FinalPaymentDateTime\": \"2023-03-20T06:06:06+00:00\",\n            \"FinalPaymentAmount\": {\n                \"Amount\": \"525.83\",\n                \"Currency\": \"GBP\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"ACME Inc\",\n                \"SecondaryIdentification\": \"0002\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"PartyToParty\"\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-orders",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-standing-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.5.2 Get Domestic Standing Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-orders/{{domestic_standing_order_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-standing-orders",
										"{{domestic_standing_order_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.5.3 Get Domestic Standing Order Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-standing-orders/{{domestic_standing_order_intent_id}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-standing-orders",
										"{{domestic_standing_order_intent_id}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "8: International Payments",
			"item": [
				{
					"name": "8.1: TPP Creates Payment Consent",
					"item": [
						{
							"name": "8.1.1: get client_credentials grant Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID'),",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1.2: Create International Payment Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"international_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Data\":{\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Normal\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-05T11:47:11+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"b19b8b34-26e3-4434-b1a8-736cda5af4a6\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1.2.1 (optional): Create International Payment Intent with DebtorAccount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"international_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"/// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Data\":{\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Normal\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"DebtorAccount\": {{user_debtor_account}},\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-05T11:47:11+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"b19b8b34-26e3-4434-b1a8-736cda5af4a6\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.1.3: Get International Payment Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-fapi-financial-id",
										"type": "text",
										"value": "{{x-fapi-financial-id}}",
										"disabled": true
									},
									{
										"key": "x-fapi-customer-last-logged-time",
										"type": "text",
										"value": "{{x-fapi-customer-last-logged-time}}",
										"disabled": true
									},
									{
										"key": "x-fapi-customer-ip-address",
										"type": "text",
										"value": "{{x-fapi-customer-ip-address}}",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"type": "text",
										"value": "{{x-fapi-interaction-id}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents/{{international_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payment-consents",
										"{{international_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "8.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID'),",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"international_payment_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.3 Auth & Consent (automation)",
					"item": [
						{
							"name": "8.3.1 Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3.2 Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3.3 Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3.4 Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"if((data.accounts != null || data.accounts != undefined) && data.accounts.length > 0){",
											"    console.log(\"set debtor_account variable\")",
											"    postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));",
											"} else {",
											"    throw new Error(\"No there is any account in the consent details\")",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3.5 Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3.6 Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.3.7 Get Patched International Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()\r",
											"delete responseData._id;\r",
											"delete responseData._rev;\r",
											"delete responseData.Data.CreationDateTime;\r",
											"delete responseData.Data.StatusUpdateDateTime;\r",
											"\r",
											"postman.setEnvironmentVariable(\"patched_international_payment_intent\", JSON.stringify(responseData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents/{{international_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payment-consents",
										"{{international_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "8.4.1 get client_credential grant Access Token with Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.5 TPP checks PSU has funds",
					"item": [
						{
							"name": "8.5.1 Get International Payment Funds Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payment-consents/{{international_payment_intent_id}}/funds-confirmation",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payment-consents",
										"{{international_payment_intent_id}}",
										"funds-confirmation"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.6 TPP Submits Payment",
					"item": [
						{
							"name": "8.6.1 Submit International Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Data\":{\n      \"ConsentId\": \"{{international_payment_intent_id}}\",\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Normal\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-05T11:47:11+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"b19b8b34-26e3-4434-b1a8-736cda5af4a6\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "8.7 Data Access",
					"item": [
						{
							"name": "8.7.1 v1 Get Internationa Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payments/{{international_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payments",
										"{{international_payment_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8.7.2 Get International Payment Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-payments/{{international_payment_intent_id}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-payments",
										"{{international_payment_intent_id}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "9: International Scheduled Payments",
			"item": [
				{
					"name": "9.1: International Scheduled Payment preparation",
					"item": [
						{
							"name": "9.1.1: get client_credentials grant Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval( pm.environment.get('pmlib_code') )",
											"",
											"var jwtSecret = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(jwtSecret, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.1.2: Create International Scheduled Payment Intent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"/// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"international_scheduled_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Data\":{\n      \"Permission\":\"Create\",\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Urgent\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"RequestedExecutionDateTime\":\"2023-10-21T11:46:53+03:00\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"ExchangeRateInformation\":{\n            \"UnitCurrency\":\"EUR\",\n            \"ExchangeRate\": 10,\n            \"RateType\":\"Agreed\",\n            \"ContractIdentification\":\"/tbill/2018/T102993\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-20T11:46:53+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"8c15fac9-6b7f-4ea3-902a-74093673648a\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.1.2.1 (optional): Create International Scheduled Payment Intent with DebtorAccount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"/// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"international_scheduled_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Data\":{\n      \"Permission\":\"Create\",\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Urgent\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"RequestedExecutionDateTime\":\"2023-10-21T11:46:53+03:00\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"ExchangeRateInformation\":{\n            \"UnitCurrency\":\"EUR\",\n            \"ExchangeRate\": 10,\n            \"RateType\":\"Agreed\",\n            \"ContractIdentification\":\"/tbill/2018/T102993\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"DebtorAccount\": {{user_debtor_account}},\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-20T11:46:53+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"8c15fac9-6b7f-4ea3-902a-74093673648a\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.1.3 v1: Get International Scheduled Payment Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents/{{international_scheduled_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payment-consents",
										"{{international_scheduled_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "9.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') ||'',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"international_scheduled_payment_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.3 Auth & Consent (automation)",
					"item": [
						{
							"name": "9.3.1 Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.2 Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.3 Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.4 Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"if((data.accounts != null || data.accounts != undefined) && data.accounts.length > 0){",
											"    console.log(\"set debtor_account variable\")",
											"    postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));",
											"} else {",
											"    throw new Error(\"No there is any account in the consent details\")",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.5 Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.6 Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.3.7 Get Patched International Scheduled Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()\r",
											"delete responseData._id;\r",
											"delete responseData._rev;\r",
											"delete responseData.Data.CreationDateTime;\r",
											"delete responseData.Data.StatusUpdateDateTime;\r",
											"\r",
											"postman.setEnvironmentVariable(\"patched_international_scheduled_payment_intent\", JSON.stringify(responseData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents/{{international_scheduled_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payment-consents",
										"{{international_scheduled_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "9.4.1 get authorization_code grant Access Token with consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exchange code - Direct (should fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh access token - Direct (should fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.5 Payment Funds Confirmation",
					"item": [
						{
							"name": "9.5.1 Get International Scheduled Payment Funds Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payment-consents/{{international_scheduled_payment_intent_id}}/funds-confirmation",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payment-consents",
										"{{international_scheduled_payment_intent_id}}",
										"funds-confirmation"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.6 TPP Submits Payment",
					"item": [
						{
							"name": "9.6.1 Submit International Scheduled Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":pm.environment.get('OB-SIGNING-KEY-ID') ||'',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Data\":{\n      \"ConsentId\": \"{{international_scheduled_payment_intent_id}}\",\n      \"Permission\":\"Create\",\n      \"ReadRefundAccount\":\"No\",\n      \"Initiation\":{\n         \"InstructionIdentification\":\"ANSM020\",\n         \"EndToEndIdentification\":\"FRESCO.21302.GFX.01\",\n         \"LocalInstrument\":\"UK.OBIE.BACS\",\n         \"InstructionPriority\":\"Urgent\",\n         \"Purpose\":\"CDCD\",\n         \"ExtendedPurpose\":\"Extended purpose\",\n         \"ChargeBearer\":\"Shared\",\n         \"RequestedExecutionDateTime\":\"2023-10-21T11:46:53+03:00\",\n         \"CurrencyOfTransfer\":\"EUR\",\n         \"DestinationCountryCode\":\"GB\",\n         \"InstructedAmount\":{\n            \"Amount\":\"10.01\",\n            \"Currency\":\"GBP\"\n         },\n         \"ExchangeRateInformation\":{\n            \"UnitCurrency\":\"EUR\",\n            \"ExchangeRate\": 10,\n            \"RateType\":\"Agreed\",\n            \"ContractIdentification\":\"/tbill/2018/T102993\"\n         },\n         \"Creditor\":{\n            \"Name\":\"Creditor Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAgent\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"40400411270111\",\n            \"Name\":\"Creditor Agent Name\",\n            \"PostalAddress\":{\n               \"AddressType\":\"Residential\",\n               \"Department\":null,\n               \"SubDepartment\":null,\n               \"StreetName\":\"The Mall\",\n               \"BuildingNumber\":\"1\",\n               \"PostCode\":\"WC1 1AB\",\n               \"TownName\":\"London\",\n               \"CountrySubDivision\":null,\n               \"Country\":\"UK\",\n               \"AddressLine\":null\n            }\n         },\n         \"CreditorAccount\":{\n            \"SchemeName\":\"UK.OBIE.SortCodeAccountNumber\",\n            \"Identification\":\"08080021325698\",\n            \"Name\":\"Mr Tim Burgess\",\n            \"SecondaryIdentification\":\"11\"\n         },\n         \"RemittanceInformation\":{\n            \"Unstructured\":\"Internal ops code 5120103\",\n            \"Reference\":\"FRESCO-037\"\n         },\n         \"SupplementaryData\":{\n            \n         }\n      },\n      \"Authorisation\":{\n         \"AuthorisationType\":\"Any\",\n         \"CompletionDateTime\":\"2022-07-20T11:46:53+03:00\"\n      },\n      \"SCASupportData\":{\n         \"RequestedSCAExemptionType\":\"BillPayment\",\n         \"AppliedAuthenticationApproach\":\"CA\",\n         \"ReferencePaymentOrderId\":\"8c15fac9-6b7f-4ea3-902a-74093673648a\"\n      }\n   },\n   \"Risk\":{\n      \"PaymentContextCode\":\"Other\",\n      \"MerchantCategoryCode\":\"mct1\",\n      \"MerchantCustomerIdentification\":\"merchantId123\",\n      \"DeliveryAddress\":{\n         \"AddressLine\":[\n            \"60 Queens Sq\"\n         ],\n         \"StreetName\":\"Queen Square\",\n         \"BuildingNumber\":\"60\",\n         \"PostCode\":\"BS1 1AA\",\n         \"TownName\":\"Bristol\",\n         \"CountrySubDivision\":\"en\",\n         \"Country\":\"GB\"\n      }\n   }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "9.7 Data Access",
					"item": [
						{
							"name": "9.7.1 v1 Get International Scheduled Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payments/{{international_scheduled_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payments",
										"{{international_scheduled_payment_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9.7.2 Get International Payment Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-scheduled-payments/{{international_scheduled_payment_intent_id}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-scheduled-payments",
										"{{international_scheduled_payment_intent_id}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "10: International Standing Orders",
			"item": [
				{
					"name": "10.1: International Standing Order preparation",
					"item": [
						{
							"name": "10.1.1: get client_credentials grant Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') ||'',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.1.2: Create International Standing Order Intent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"/// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"international_standing_order_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"No\",\n        \"Initiation\": {\n            \"Frequency\": \"EvryWorkgDay\",\n            \"Reference\": \"Ipsum Non Arcu Inc.\",\n            \"NumberOfPayments\": \"1\",\n            \"FirstPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"FinalPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"Purpose\": \"CDCD\",\n            \"ExtendedPurpose\": \"Extended purpose\",\n            \"ChargeBearer\": \"Shared\",\n            \"CurrencyOfTransfer\": \"USD\",\n            \"DestinationCountryCode\": \"GB\",\n            \"InstructedAmount\": {\n                \"Amount\": \"10.01\",\n                \"Currency\": \"GBP\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Creditor Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAgent\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"40400411270111\",\n                \"Name\": \"Creditor Agent Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"90611424625555\",\n                \"Name\": \"Mr Steven Morrissey\",\n                \"SecondaryIdentification\": \"44\"\n            },\n            \"SupplementaryData\": {}\n        },\n        \"Authorisation\": {\n            \"AuthorisationType\": \"Any\",\n            \"CompletionDateTime\": \"2022-09-27T13:03:06+03:00\"\n        },\n        \"SCASupportData\": {\n            \"RequestedSCAExemptionType\": \"BillPayment\",\n            \"AppliedAuthenticationApproach\": \"CA\",\n            \"ReferencePaymentOrderId\": \"4bcfdeae-f40b-44f1-824e-d6bb9e5eefe9\"\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-order-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-standing-order-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.1.2.1 (optional): Create International Standing Order Intent with DebtorAccount",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"/// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"international_standing_order_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"No\",\n        \"Initiation\": {\n            \"Frequency\": \"EvryWorkgDay\",\n            \"Reference\": \"Ipsum Non Arcu Inc.\",\n            \"NumberOfPayments\": \"1\",\n            \"FirstPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"FinalPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"Purpose\": \"CDCD\",\n            \"ExtendedPurpose\": \"Extended purpose\",\n            \"ChargeBearer\": \"Shared\",\n            \"CurrencyOfTransfer\": \"USD\",\n            \"DestinationCountryCode\": \"GB\",\n            \"InstructedAmount\": {\n                \"Amount\": \"10.01\",\n                \"Currency\": \"GBP\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Creditor Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAgent\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"40400411270111\",\n                \"Name\": \"Creditor Agent Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"DebtorAccount\": {{user_debtor_account}},\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"90611424625555\",\n                \"Name\": \"Mr Steven Morrissey\",\n                \"SecondaryIdentification\": \"44\"\n            },\n            \"SupplementaryData\": {}\n        },\n        \"Authorisation\": {\n            \"AuthorisationType\": \"Any\",\n            \"CompletionDateTime\": \"2022-09-27T13:03:06+03:00\"\n        },\n        \"SCASupportData\": {\n            \"RequestedSCAExemptionType\": \"BillPayment\",\n            \"AppliedAuthenticationApproach\": \"CA\",\n            \"ReferencePaymentOrderId\": \"4bcfdeae-f40b-44f1-824e-d6bb9e5eefe9\"\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-order-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-standing-order-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.1.3 v1: Get International Standing Order Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-order-consents/{{international_standing_order_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-standing-order-consents",
										"{{international_standing_order_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.2: Auth & consent by Browser (hybrid flow)",
					"item": [
						{
							"name": "10.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"international_standing_order_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.3 Auth & Consent (automation)",
					"item": [
						{
							"name": "10.3.1 Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.2 Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.3 Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.4 Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"if((data.accounts != null || data.accounts != undefined) && data.accounts.length > 0){",
											"    console.log(\"set debtor_account variable\")",
											"    postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));",
											"} else {",
											"    throw new Error(\"No there is any account in the consent details\")",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.5 Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.6 Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.3.7 Get Patched International Standing Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()\r",
											"delete responseData._id;\r",
											"delete responseData._rev;\r",
											"delete responseData.Data.CreationDateTime;\r",
											"delete responseData.Data.StatusUpdateDateTime;\r",
											"\r",
											"postman.setEnvironmentVariable(\"patched_international_standing_order_intent\", JSON.stringify(responseData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept-encoding": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-order-consents/{{international_standing_order_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-standing-order-consents",
										"{{international_standing_order_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "10.4.1 get authorization_code grant Access Token with consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exchange code - Direct (should fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh access token - Direct (should fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.5 TPP Submits Payment",
					"item": [
						{
							"name": "10.5.1 Submit International Standing Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{international_standing_order_intent_id}}\",\n        \"Permission\": \"Create\",\n        \"ReadRefundAccount\": \"No\",\n        \"Initiation\": {\n            \"Frequency\": \"EvryWorkgDay\",\n            \"Reference\": \"Ipsum Non Arcu Inc.\",\n            \"NumberOfPayments\": \"1\",\n            \"FirstPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"FinalPaymentDateTime\": \"2022-09-27T13:03:06+03:00\",\n            \"Purpose\": \"CDCD\",\n            \"ExtendedPurpose\": \"Extended purpose\",\n            \"ChargeBearer\": \"Shared\",\n            \"CurrencyOfTransfer\": \"USD\",\n            \"DestinationCountryCode\": \"GB\",\n            \"InstructedAmount\": {\n                \"Amount\": \"10.01\",\n                \"Currency\": \"GBP\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Creditor Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAgent\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"40400411270111\",\n                \"Name\": \"Creditor Agent Name\",\n                \"PostalAddress\": {\n                    \"AddressType\": \"Residential\",\n                    \"Department\": null,\n                    \"SubDepartment\": null,\n                    \"StreetName\": \"The Mall\",\n                    \"BuildingNumber\": \"1\",\n                    \"PostCode\": \"WC1 1AB\",\n                    \"TownName\": \"London\",\n                    \"CountrySubDivision\": null,\n                    \"Country\": \"UK\",\n                    \"AddressLine\": null\n                }\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"90611424625555\",\n                \"Name\": \"Mr Steven Morrissey\",\n                \"SecondaryIdentification\": \"44\"\n            },\n            \"SupplementaryData\": {}\n        },\n        \"Authorisation\": {\n            \"AuthorisationType\": \"Any\",\n            \"CompletionDateTime\": \"2022-09-27T13:03:06+03:00\"\n        },\n        \"SCASupportData\": {\n            \"RequestedSCAExemptionType\": \"BillPayment\",\n            \"AppliedAuthenticationApproach\": \"CA\",\n            \"ReferencePaymentOrderId\": \"4bcfdeae-f40b-44f1-824e-d6bb9e5eefe9\"\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-orders",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-standing-orders"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "10.6 Data Access",
					"item": [
						{
							"name": "10.6.1 Get International Standing Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-orders/{{international_standing_order_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-standing-orders",
										"{{international_standing_order_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10.6.2 Get International Payment Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/international-standing-orders/{{international_standing_order_intent_id}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"international-standing-orders",
										"{{international_standing_order_intent_id}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "11: File Payments",
			"item": [
				{
					"name": "11.1: Payment preparation",
					"item": [
						{
							"name": "11.1.1: get client_credentials grant Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.1.2: Create XML File Payment Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"file_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"//var data = pm.environment.get('patchedDomesticPaymentConsent')\r",
											"var data=pm.request.body.toString()\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.pain.001.001.08\",\n      \"FileHash\": \"VEzqICCQvK7NHt8g75Kfbsb0XW5Wmeg3pgAgpN6oLQ8=\",\n      \"FileReference\": \"XmlExample\",\n      \"NumberOfTransactions\": \"3\",\n      \"ControlSum\": 11500000.00,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.1.2: Create JSON File Payment Access Intent Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"file_payment_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"//var data = pm.environment.get('patchedDomesticPaymentConsent')\r",
											"var data=pm.request.body.toString()\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.PaymentInitiation.3.1\",\n      \"FileHash\": \"b5OLwRye50tF1mVouNRR+4Mh8uhZKddKiMwT3N8nSlU=\",\n      \"FileReference\": \"JsonExample\",\n      \"NumberOfTransactions\": \"4\",\n      \"ControlSum\": 87.00,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payment-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.1.3 v1: Get File Payment Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200 and return json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"To have a ConsentId id\", function () {",
											"    pm.expect(data.Data.ConsentId).to.eql(postman.getEnvironmentVariable(\"file_payment_intent_id\"));",
											"});",
											"",
											"pm.test(\"Status is AwaitingUpload\", function () {",
											"    pm.expect(data.Data.Status).to.eql(\"AwaitingUpload\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{file_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payment-consents",
										"{{file_payment_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.1.5: Submit XML File Payment Access Intent File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"//var data = pm.environment.get('patchedDomesticPaymentConsent')\r",
											"var data=pm.request.body.raw\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "text/xml"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.08\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema- instance\">\n    <CstmrCdtTrfInitn>\n    <GrpHdr>\n        <MsgId>ABC/120928/CCT001</MsgId>\n        <CreDtTm>2012-09-28T14:07:00</CreDtTm>\n        <NbOfTxs>3</NbOfTxs>\n        <CtrlSum>11500000</CtrlSum>\n        <InitgPty>\n            <Nm>ABC Corporation</Nm>\n            <PstlAdr>\n                <StrtNm>Times Square</StrtNm>\n                <BldgNb>7</BldgNb>\n                <PstCd>NY 10036</PstCd>\n                <TwnNm>New York</TwnNm>\n                <Ctry>US</Ctry>\n            </PstlAdr>\n        </InitgPty>\n    </GrpHdr>\n    <PmtInf>\n        <PmtInfId>ABC/086</PmtInfId>\n        <PmtMtd>TRF</PmtMtd>\n        <BtchBookg>false</BtchBookg>\n        <ReqdExctnDt>\n            <Dt>2012-09-29</Dt>\n        </ReqdExctnDt>\n        <Dbtr>\n            <Nm>ABC Corporation</Nm>\n            <PstlAdr>\n                <StrtNm>Times Square</StrtNm>\n                <BldgNb>7</BldgNb>\n                <PstCd>NY 10036</PstCd>\n                <TwnNm>New York</TwnNm>\n                <Ctry>US</Ctry>\n            </PstlAdr>\n        </Dbtr>\n        <DbtrAcct>\n            <Id>\n                <Othr>\n                    <Id>00125574999</Id>\n                </Othr>\n            </Id>\n        </DbtrAcct>\n        <DbtrAgt>\n            <FinInstnId>\n                <BICFI>BBBBUS33</BICFI>\n            </FinInstnId>\n        </DbtrAgt>\n        <CdtTrfTxInf>\n            <PmtId>\n                <InstrId>ABC/120928/CCT001/01</InstrId>\n                <EndToEndId>ABC/4562/2012-09-08</EndToEndId>\n            </PmtId>\n            <Amt>\n                <InstdAmt Ccy=\"JPY\">10000000</InstdAmt>\n            </Amt>\n            <ChrgBr>SHAR</ChrgBr>\n            <CdtrAgt>\n                <FinInstnId>\n                    <BICFI>AAAAGB2L</BICFI>\n                </FinInstnId>\n            </CdtrAgt>\n            <Cdtr>\n                <Nm>DEF Electronics</Nm>\n                <PstlAdr>\n                    <AdrLine>Corn Exchange 5th Floor</AdrLine>\n                    <AdrLine>Mark Lane 55</AdrLine>\n                    <AdrLine>EC3R7NE London</AdrLine>\n                    <AdrLine>GB</AdrLine>\n                </PstlAdr>\n            </Cdtr>\n            <CdtrAcct>\n                <Id>\n                    <Othr>\n                        <Id>23683707994125</Id>\n                    </Othr>\n                </Id>\n            </CdtrAcct>\n            <Purp>\n                <Cd>GDDS</Cd>\n            </Purp>\n            <RmtInf>\n                <Strd>\n                    <RfrdDocInf>\n                        <Tp>\n                            <CdOrPrtry>\n                                <Cd>CINV</Cd>\n                            </CdOrPrtry>\n                        </Tp>\n                        <Nb>4562</Nb>\n                        <RltdDt>2012-09-08</RltdDt>\n                    </RfrdDocInf>\n                </Strd>\n            </RmtInf>\n        </CdtTrfTxInf>\n        <CdtTrfTxInf>\n            <PmtId>\n                <InstrId>ABC/120928/CCT001/2</InstrId>\n                <EndToEndId>ABC/ABC-13679/2012-09-15</EndToEndId>\n            </PmtId>\n            <Amt>\n                <InstdAmt Ccy=\"EUR\">500000</InstdAmt>\n            </Amt>\n            <ChrgBr>CRED</ChrgBr>\n            <CdtrAgt>\n                <FinInstnId>\n                    <BICFI>DDDDBEBB</BICFI>\n                </FinInstnId>\n            </CdtrAgt>\n            <Cdtr>\n                <Nm>GHI Semiconductors</Nm>\n                <PstlAdr>\n                    <StrtNm>Avenue Brugmann</StrtNm>\n                    <BldgNb>415</BldgNb>\n                    <PstCd>1180</PstCd>\n                    <TwnNm>Brussels</TwnNm>\n                    <Ctry>BE</Ctry>\n                </PstlAdr>\n            </Cdtr>\n            <CdtrAcct>\n                <Id>\n                    <IBAN>BE30001216371411</IBAN>\n                </Id>\n            </CdtrAcct>\n            <InstrForCdtrAgt>\n                <Cd>PHOB</Cd>\n                <InstrInf>+32/2/2222222</InstrInf>\n            </InstrForCdtrAgt>\n            <Purp>\n                <Cd>GDDS</Cd>\n            </Purp>\n            <RmtInf>\n                <Strd>\n                    <RfrdDocInf>\n                        <Tp>\n                            <CdOrPrtry>\n                                <Cd>CINV</Cd>\n                            </CdOrPrtry>\n                        </Tp>\n                        <Nb>ABC-13679</Nb>\n                        <RltdDt>2012-09-15</RltdDt>\n                    </RfrdDocInf>\n                </Strd>\n            </RmtInf>\n        </CdtTrfTxInf>\n        <CdtTrfTxInf>\n            <PmtId>\n                <InstrId>ABC/120928/CCT001/3</InstrId>\n                <EndToEndId>ABC/987-AC/2012-09-27</EndToEndId>\n            </PmtId>\n            <Amt>\n                <InstdAmt Ccy=\"USD\">1000000</InstdAmt>\n            </Amt>\n            <ChrgBr>SHAR</ChrgBr>\n            <CdtrAgt>\n                <FinInstnId>\n                    <BICFI>BBBBUS66</BICFI>\n                </FinInstnId>\n            </CdtrAgt>\n            <Cdtr>\n                <Nm>ABC Corporation</Nm>\n                <PstlAdr>\n                    <Dept>Treasury department</Dept>\n                    <StrtNm>Bush Street</StrtNm>\n                    <BldgNb>13</BldgNb>\n                    <PstCd>CA 94108</PstCd>\n                    <TwnNm>San Francisco</TwnNm>\n                    <Ctry>US</Ctry>\n                </PstlAdr>\n            </Cdtr>\n            <CdtrAcct>\n                <Id>\n                    <Othr>\n                        <Id>4895623</Id>\n                    </Othr>\n                </Id>\n            </CdtrAcct>\n            <Purp>\n                <Cd>INTC</Cd>\n            </Purp>\n            <RmtInf>\n                <Strd>\n                    <RfrdDocInf>\n                        <Tp>\n                            <CdOrPrtry>\n                                <Cd>CINV</Cd>\n                            </CdOrPrtry>\n                        </Tp>\n                        <Nb>987-AC</Nb>\n                        <RltdDt>2012-09-27</RltdDt>\n                    </RfrdDocInf>\n                </Strd>\n            </RmtInf>\n        </CdtTrfTxInf>\n    </PmtInf>\n</CstmrCdtTrfInitn>\n</Document>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{file_payment_intent_id}}/file",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payment-consents",
										"{{file_payment_intent_id}}",
										"file"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.1.5: Submit JSON File Payment Access Intent File Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\":  pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"//var data = pm.environment.get('patchedDomesticPaymentConsent')\r",
											"var data=pm.request.body.raw\r",
											"console.log(\"data: \" + data)\r",
											"\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"DomesticPayments\": [\n      {\n        \"InstructionIdentification\": \"ANSM020\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.01\",\n        \"LocalInstrument\": \"UK.OBIE.CHAPS\",\n        \"InstructedAmount\": {\n          \"Amount\": \"21.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"CreditorPostalAddress\": {\n          \"AddressType\": \"Correspondence\",\n          \"StreetName\": \"Liberty\",\n          \"BuildingNumber\": \"1\",\n          \"PostCode\": \"AB1 2CD\",\n          \"TownName\": \"London\",\n          \"Country\": \"UK\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      },\n      {\n        \"InstructionIdentification\": \"ANSM020\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.01\",\n        \"LocalInstrument\": \"UK.OBIE.CHAPS\",\n        \"InstructedAmount\": {\n          \"Amount\": \"21.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"CreditorPostalAddress\": {\n          \"AddressType\": \"Correspondence\",\n          \"StreetName\": \"Liberty\",\n          \"BuildingNumber\": \"1\",\n          \"PostCode\": \"AB1 2CD\",\n          \"TownName\": \"London\",\n          \"Country\": \"UK\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      },\n      {\n        \"InstructionIdentification\": \"ANSM021\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.02\",\n        \"LocalInstrument\": \"UK.OBIE.BACS\",\n        \"InstructedAmount\": {\n          \"Amount\": \"22.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      },\n      {\n        \"InstructionIdentification\": \"ANSM022\",\n        \"EndToEndIdentification\": \"FRESCO.21302.GFX.03\",\n        \"InstructedAmount\": {\n          \"Amount\": \"23.00\",\n          \"Currency\": \"GBP\"\n        },\n        \"DebtorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"11280001234567\",\n          \"Name\": \"Andrea Smith\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"08080021325698\",\n          \"Name\": \"Bob Clements\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"FRESCO-037\",\n          \"Unstructured\": \"Internal ops code 5120103\"\n        }\n      }\n    ]\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{file_payment_intent_id}}/file",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payment-consents",
										"{{file_payment_intent_id}}",
										"file"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "11.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval( pm.environment.get('pmlib_code') )",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"file_payment_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Header location doesnt contains error\", function () {",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11.3 Auth & Consent (automation)",
					"item": [
						{
							"name": "11.3.1 Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3.2 Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3.3 Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3.4 Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3.4 LOCAL:  test Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://localhost:8080/api/rcs/consent/details/",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"rcs",
										"consent",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3.5 Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3.6 Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.3.7 Get Patched File Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()\r",
											"delete responseData._id;\r",
											"delete responseData._rev;\r",
											"delete responseData.Data.CreationDateTime;\r",
											"delete responseData.Data.StatusUpdateDateTime;\r",
											"\r",
											"postman.setEnvironmentVariable(\"patched_file_payment_consent\", JSON.stringify(responseData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payment-consents/{{file_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payment-consents",
										"{{file_payment_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "11.4.1 get authorization_code grant Access Token with consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exchange code - Direct",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh access token - Direct (should fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{CLIENT_SECRET}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11.5 TPP Submits Payment",
					"item": [
						{
							"name": "11.5.1 Submit JSON File Payment - Include Signing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID'),\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"var data = pm.environment.get('patched_file_payment_consent')\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"ConsentId\": \"{{file_payment_intent_id}}\",\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.PaymentInitiation.3.1\",\n      \"FileHash\": \"b5OLwRye50tF1mVouNRR+4Mh8uhZKddKiMwT3N8nSlU=\",\n      \"FileReference\": \"JsonExample\",\n      \"NumberOfTransactions\": \"4\",\n      \"ControlSum\": 87.00,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.5.1 Submit XML File Payment - Include Signing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID'),\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"var data = pm.environment.get('patched_file_payment_consent')\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Data\": {\n    \"ConsentId\": \"{{file_payment_intent_id}}\",\n    \"Initiation\": {\n      \"FileType\": \"UK.OBIE.pain.001.001.08\",\n      \"FileHash\": \"VEzqICCQvK7NHt8g75Kfbsb0XW5Wmeg3pgAgpN6oLQ8=\",\n      \"FileReference\": \"XmlExample\",\n      \"NumberOfTransactions\": \"3\",\n      \"ControlSum\": 11500000.00,\n      \"RequestedExecutionDateTime\": \"2023-09-27T13:03:06+00:00\",\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "11.6 Data Access",
					"item": [
						{
							"name": "11.6.1 v1 Get File Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments/{{file_payment_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payments",
										"{{file_payment_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "11.6.2 Get File Payment Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/file-payments/{{file_payment_intent_id}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"file-payments",
										"{{file_payment_intent_id}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "12: Domestic VRP",
			"item": [
				{
					"name": "12.1: Payment preparation",
					"item": [
						{
							"name": "12.1.1: get client_credentials grant Access Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"eval(pm.environment.get('pmlib_code'))",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"console.log(privateKey)",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"        \"iss\": pm.environment.get(\"client_id\"),",
											"        \"sub\": pm.environment.get(\"client_id\"),",
											"        \"aud\": pm.environment.get(\"as_issuer_id\"),",
											"        \"jti\": pm.variables.replaceIn('{{$guid}}')",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"pm.environment.set('client_credential_jwt', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "cnf_key",
										"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "payments openid",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "cnf_key",
											"value": "eyJ4NXQjUzI1NiI6Im04VWNXQlNQTnRhS04xOVRkUjh6VUh2V1dPU0NTWDluc2E1dlU2ZnNjZDAifQ==",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.1.2: Create Domestic VRP Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"domestic_vrp_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ReadRefundAccount\": null,\n        \"ControlParameters\": {\n            \"ValidFromDateTime\": \"2022-11-09T10:17:08+02:00\",\n            \"ValidToDateTime\": \"2022-11-19T10:17:08+02:00\",\n            \"MaximumIndividualAmount\": {\n                \"Amount\": \"10.01\",\n                \"Currency\": \"GBP\"\n            },\n            \"PeriodicLimits\": [\n                {\n                    \"PeriodType\": \"Month\",\n                    \"PeriodAlignment\": \"Calendar\",\n                    \"Amount\": \"10.01\",\n                    \"Currency\": \"GBP\"\n                }\n            ],\n            \"VRPType\": [\n                \"UK.OBIE.VRPType.Sweeping\"\n            ],\n            \"PSUAuthenticationMethods\": [\n                \"UK.OBIE.SCANotRequired\"\n            ],\n            \"PSUInteractionTypes\": [\n                \"InSession\"\n            ],\n            \"SupplementaryData\": {}\n        },\n        \"Initiation\": {\n            \"DebtorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"01233243245676\",\n                \"Name\": \"psu4test\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"RemittanceInformation\": {\n                \"Unstructured\": \"Internal ops code 5120103\",\n                \"Reference\": \"FRESCO-037\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrp-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.1.3 (optional): Error Create Domestic VRP Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"domestic_vrp_intent_id\", data.Data.ConsentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// The jsrasign-js library has been loaded when initilise the collection `load JSRASign library` request\r",
											"\r",
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"if(data==null){\r",
											"    throw new Error(\"data must not be null\")\r",
											"}\r",
											"console.log(\"data: \" + data)\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\");\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2];\r",
											"\r",
											"console.log(\"jws_signature:\" + jws_signature);\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"//postman.setEnvironmentVariable(\"x-jws-signature\", jws_signature);\r",
											"pm.environment.set('x_jws_signature', jws_signature);\r",
											"console.log(\"Exit script\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}",
										"type": "text"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Data\": {\n\t\t\"ReadRefundAccount\": null,\n\t\t\"ControlParameters\": {\n\t\t\t\"ValidFromDateTime\": \"2022-11-09T10:17:08+02:00\",\n\t\t\t\"ValidToDateTime\": \"2022-11-19T10:17:08+02:00\",\n\t\t\t\"MaximumIndividualAmount\": {\n\t\t\t\t\"Amount\": \"10.01\",\n\t\t\t\t\"Currency\": \"GBP\"\n\t\t\t},\n\t\t\t\"PeriodicLimits\": [\n\t\t\t\t{\n\t\t\t\t\t\"PeriodType\": \"Month\",\n\t\t\t\t\t\"PeriodAlignment\": \"Calendar\",\n\t\t\t\t\t\"Amount\": \"10.01\",\n\t\t\t\t\t\"Currency\": \"GBP\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"VRPType\": [\n\t\t\t\t\"UK.OBIE.VRPType.Sweeping\"\n\t\t\t],\n\t\t\t\"PSUAuthenticationMethods\": [\n\t\t\t\t\"UK.OBIE.SCANotRequired\"\n\t\t\t],\n\t\t\t\"PSUInteractionTypes\": [\n\t\t\t\t\"InSession\"\n\t\t\t],\n\t\t\t\"SupplementaryData\": {}\n\t\t},\n\t\t\"Initiation\": {\n\t\t\t\"DebtorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"64583559765459\",\n                \"Name\": \"Unknown name\",\n                \"SecondaryIdentification\": \"771642\"\n            },\n\t\t\t\"CreditorAccount\": {\n\t\t\t\t\"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n\t\t\t\t\"Identification\": \"08080021325698\",\n\t\t\t\t\"Name\": \"Mr Tim Burgess\",\n\t\t\t\t\"SecondaryIdentification\": \"11\"\n\t\t\t},\n\t\t\t\"CreditorPostalAddress\": {\n\t\t\t\t\"AddressType\": \"Residential\",\n\t\t\t\t\"Department\": null,\n\t\t\t\t\"SubDepartment\": null,\n\t\t\t\t\"StreetName\": \"The Mall\",\n\t\t\t\t\"BuildingNumber\": \"1\",\n\t\t\t\t\"PostCode\": \"WC1 1AB\",\n\t\t\t\t\"TownName\": \"London\",\n\t\t\t\t\"CountrySubDivision\": null,\n\t\t\t\t\"Country\": \"UK\",\n\t\t\t\t\"AddressLine\": null\n\t\t\t},\n\t\t\t\"RemittanceInformation\": {\n\t\t\t\t\"Unstructured\": \"Internal ops code 5120103\",\n\t\t\t\t\"Reference\": \"FRESCO-037\"\n\t\t\t}\n\t\t}\n\t},\n\t\"Risk\": {\n\t\t\"PaymentContextCode\": \"Other\",\n\t\t\"MerchantCategoryCode\": \"mct1\",\n\t\t\"MerchantCustomerIdentification\": \"merchantId123\",\n\t\t\"ContractPresentInidicator\": false,\n\t\t\"BeneficiaryPrepopulatedIndicator\": false,\n\t\t\"PaymentPurposeCode\": \"pain\",\n\t\t\"BeneficiaryAccountType\": \"Personal\",\n\t\t\"DeliveryAddress\": {\n\t\t\t\"AddressLine\": [\n\t\t\t\t\"60 Queens Sq\"\n\t\t\t],\n\t\t\t\"StreetName\": \"Queen Square\",\n\t\t\t\"BuildingNumber\": \"60\",\n\t\t\t\"PostCode\": \"BS1 1AA\",\n\t\t\t\"TownName\": \"Bristol\",\n\t\t\t\"CountrySubDivision\": \"en\",\n\t\t\t\"Country\": \"GB\"\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrp-consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.1.4 v1: Get Domestic VRP Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status code is 200 and return json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"To have a ConsentId id\", function () {",
											"    pm.expect(data.Data.ConsentId).to.eql(postman.getEnvironmentVariable(\"domestic_vrp_intent_id\"));",
											"});",
											"",
											"pm.test(\"Status is AwaitingAuthorisation\", function () {",
											"    pm.expect(data.Data.Status).to.eql(\"AwaitingAuthorisation\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents/{{domestic_vrp_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrp-consents",
										"{{domestic_vrp_intent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.1.6: Delete Domestic VRP Access Intent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be 204 and no content\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents/{{domestic_vrp_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrp-consents",
										"{{domestic_vrp_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12.2: PSU gives Consent in UI (hybrid flow)",
					"item": [
						{
							"name": "12.2.1: generate redirect URL (visualize) (authorize)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" ",
											"eval( pm.environment.get('pmlib_code') )",
											"",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY') || ''",
											"",
											"// Set headers for JWT",
											"",
											"var header = {",
											"\t'typ': 'JWT',",
											"    'kid': pm.environment.get('OB-SIGNING-KEY-ID') || '',",
											"\t'alg': 'PS256'",
											"};",
											"",
											"var exp = (new Date().getTime() / 1000) + 60*5;",
											"",
											"var data = {",
											"      \"aud\": pm.environment.get('as_issuer_id'),",
											"      \"scope\": \"openid payments\",",
											"      \"iss\": pm.environment.get(\"client_id\"),",
											"      \"claims\": {",
											"        \"id_token\": {",
											"          \"acr\": {",
											"          \"value\": \"urn:openbanking:psd2:ca\",",
											"          \"essential\": true",
											"        },",
											"        \"openbanking_intent_id\": {",
											"          \"value\": pm.environment.get(\"domestic_vrp_intent_id\"),",
											"          \"essential\": true",
											"        }",
											"      }",
											"    },",
											"    \"response_type\": \"code id_token\",",
											"    \"redirect_uri\": pm.environment.get(\"client_redirect_uri\"),",
											"    \"state\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"nonce\": \"10d260bf-a7d9-444a-92d9-7b7a5f088208\",",
											"    \"client_id\": pm.environment.get(\"client_id\")",
											"}",
											"",
											"// sign token",
											"var signedToken = pmlib.jwtSign(privateKey, data, header, exp = 600, alg = \"PS256\")",
											"// pm.environment.set('client_credential_jwt', signedToken)",
											"",
											"",
											"var link = pm.environment.get(\"as_authorization_endpoint\") + ",
											"    \"?client_id=\" + pm.environment.get(\"client_id\") + ",
											"    \"&response_type=code id_token&redirect_uri=\" + pm.environment.get(\"client_redirect_uri\") + ",
											"    \"&scope=openid payments&state=10d260bf-a7d9-444a-92d9-7b7a5f088208&nonce=10d260bf-a7d9-444a-92d9-7b7a5f088208&request=\" + ",
											"    signedToken;",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\",link);",
											"",
											"pm.visualizer.set(\"<a>\" + link + \"</a>\");",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 302 and Header location doesnt contains error\", function () {",
											"   pm.response.to.have.status(302);",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var parameters = loc.slice(loc.indexOf(\"?\"));",
											"",
											"var authenticateURL = pm.environment.get('as_authentication_endpoint') + parameters;",
											"console.log(\"authentication URL is \" + authenticateURL)",
											"",
											"postman.setEnvironmentVariable(\"authenticate_url\",authenticateURL);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12.3 Auth & Consent (automation)",
					"item": [
						{
							"name": "12.3.1 Clear Session",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept-API-Version",
										"value": "resource=3.1, protocol=1.0",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/json/realms/root/realms/{{REALM}}/sessions/?_action=logout",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"json",
										"realms",
										"root",
										"realms",
										"{{REALM}}",
										"sessions",
										""
									],
									"query": [
										{
											"key": "_action",
											"value": "logout"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3.2 Authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"authorize_url\", data.successUrl);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-OpenAM-Username",
										"value": "{{END-USER-ACCOUNT-USER-NAME}}",
										"type": "text"
									},
									{
										"key": "X-OpenAM-Password",
										"value": "{{END-USER-ACCOUNT-PASSWORD}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{authenticate_url}}",
									"host": [
										"{{authenticate_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3.3 Continue authorize",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 302\", function () {",
											"   pm.response.to.have.status(302);",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"console.log(\"loc is \" + loc);",
											"var consentRequest = loc.slice(loc.indexOf(\"=\") + 1);",
											"",
											"postman.setEnvironmentVariable(\"consent_request\",consentRequest);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3.4 Get consent details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"response must be valid and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"",
											"if((data.accounts != null || data.accounts != undefined) && data.accounts.length > 0){",
											"    console.log(\"set debtor_account variable\")",
											"    postman.setEnvironmentVariable(\"debtor_account\", JSON.stringify(data.accounts[0].account));",
											"} else {",
											"    throw new Error(\"No there is any account in the consent details\")",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('{{consent_request}}')"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent_request}}"
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/details",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"details"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3.5 Send consent decision",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"consent_response\", data.consentJwt);",
											"postman.setEnvironmentVariable(\"authorize_url\", data.redirectUri);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"consentJwt\": \"{{consent_request}}\",\n    \"decision\": \"Authorised\",\n    \"debtorAccount\": {{debtor_account}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{IG-FQDN}}/rcs/api/consent/decision",
									"protocol": "https",
									"host": [
										"{{IG-FQDN}}"
									],
									"path": [
										"rcs",
										"api",
										"consent",
										"decision"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3.6 Get auth code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 302 and Header location doesnt contains error\", function () {",
											"   pm.response.to.have.status(302);",
											"   pm.expect(pm.response.headers.get(\"Location\")).not.to.include(\"error=\");",
											"});",
											"",
											"loc = pm.response.headers.get(\"Location\");",
											"authCode = loc.split(\"code=\")[1].split(\"&\")[0];",
											"postman.setEnvironmentVariable(\"psu_auth_code\",authCode);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "consent_response",
											"value": "{{consent_response}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{authorize_url}}",
									"host": [
										"{{authorize_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.3.7 Get Patched Domestic VRP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseData = pm.response.json()\r",
											"delete responseData._id;\r",
											"delete responseData._rev;\r",
											"delete responseData.Data.CreationDateTime;\r",
											"delete responseData.Data.StatusUpdateDateTime;\r",
											"\r",
											"let creditorAccount = responseData.Data.Initiation.CreditorAccount;\r",
											"let creditorPostalAddress = responseData.Data.Initiation.CreditorPostalAddress;\r",
											"let instructedAmount = responseData.Data.ControlParameters.MaximumIndividualAmount;\r",
											"let remmitanceInformation = responseData.Data.Initiation.RemittanceInformation\r",
											"\r",
											"// Initialize with mandatory fields\r",
											"var instruction = {\r",
											"    'CreditorAccount': creditorAccount,\r",
											"    'InstructedAmount': instructedAmount\r",
											"}\r",
											"\r",
											"// Check optional params and add if they exist\r",
											"if (creditorPostalAddress) {\r",
											"    instruction.CreditorPostalAddress = creditorPostalAddress;\r",
											"}\r",
											"\r",
											"if (remmitanceInformation) {\r",
											"    instruction.RemittanceInformation = remmitanceInformation;\r",
											"}\r",
											"\r",
											"responseData.Data.Instruction = instruction;\r",
											"\r",
											"postman.setEnvironmentVariable(\"patched_domestic_vrp_consent\", JSON.stringify(responseData));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents/{{domestic_vrp_intent_id}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrp-consents",
										"{{domestic_vrp_intent_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12.4: TPP gets Access Token with User Consent",
					"item": [
						{
							"name": "12.4.1 get authorization_code grant Access Token with consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Exchange code - Direct (should fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{psu_auth_code}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										},
										{
											"key": "gateway_assertion",
											"value": "eyJ0eXAiOiJKV1QiLCJraWQiOiJTbzZlSUR2NEozbEE4OEo5cE9jeFlFeExBVk09IiwiYWxnIjoiUFMyNTYifQ.eyJzdWIiOiJiNjg0MTQ2Zi1mYWE2LTQ2NGQtODA0ZS1iMjUyZmFiYTllMzgiLCJjdHMiOiJPQVVUSDJfR1JBTlRfU0VUIiwiYXV0aF9sZXZlbCI6MCwiYXVkaXRUcmFja2luZ0lkIjoiMWIyOWFhN2YtYjExMC00ODI2LTgwNWQtYjgxYzI1YTk0MDYyLTI4Mjg3NzkiLCJzdWJuYW1lIjoiYjY4NDE0NmYtZmFhNi00NjRkLTgwNGUtYjI1MmZhYmE5ZTM4IiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tZm9yZ2Vyb2NrLXNlY3VyZWJhbmtpbmdhY2NlbGVyYXRvLmZvcmdlYmxvY2tzLmNvbS9hbS9vYXV0aDIvcmVhbG1zL3Jvb3QvcmVhbG1zL2FscGhhIiwidG9rZW5OYW1lIjoiYWNjZXNzX3Rva2VuIiwidG9rZW5fdHlwZSI6IkJlYXJlciIsImF1dGhHcmFudElkIjoicnhSZlBFZzBoWWZITHJ6Y21VY2VZdjB6YngwLmkxUElpcUhUeEl1Uy1lblozUEJ2SXJUeDM2OCIsIm5vbmNlIjoiMTBkMjYwYmYtYTdkOS00NDRhLTkyZDktN2I3YTVmMDg4MjA4IiwiYXVkIjoiZmUzYzI2ZTEtNzcwZS00ZmY5LThiM2EtMTg2YjhiZGMyNDA0IiwibmJmIjoxNjM2NTM5ODUwLCJncmFudF90eXBlIjoiYXV0aG9yaXphdGlvbl9jb2RlIiwic2NvcGUiOlsib3BlbmlkIiwiYWNjb3VudHMiXSwiYXV0aF90aW1lIjoxNjM2NTM5ODI5LCJjbGFpbXMiOiJ7XCJpZF90b2tlblwiOntcImFjclwiOntcInZhbHVlXCI6XCJ1cm46b3BlbmJhbmtpbmc6cHNkMjpjYVwiLFwiZXNzZW50aWFsXCI6dHJ1ZX0sXCJvcGVuYmFua2luZ19pbnRlbnRfaWRcIjp7XCJ2YWx1ZVwiOlwiQUFDXzM0NWJlMTA2LWMwNTAtNDg4OC1iYjliLWZhZGQwMTkzYTY3Y1wiLFwiZXNzZW50aWFsXCI6dHJ1ZX19fSIsInJlYWxtIjoiL2FscGhhIiwiY25mIjp7Ing1dCNTMjU2IjoickxvQnJmcHJhZVZMeXh1V0szWUgyUFZURVJ6VnhrY1FRelV6bXNIQmZvNCJ9LCJleHAiOjE2MzY4OTk4NTAsImlhdCI6MTYzNjUzOTg1MCwiZXhwaXJlc19pbiI6MzYwMDAwLCJqdGkiOiJyeFJmUEVnMGhZZkhMcnpjbVVjZVl2MHpieDAuTU5pMVhDMll5akw4TW5SakZHU1VCLTctcFdNIn0.Qj-qpvZXfmGVlBdgIYZbqqAvk8wc3-FISaA99o4govcWvlDWeLDEBBx5CS8bnTIe7vG8QuXVtk80qI2FE8XH4H556FQlFPQ-PMAnwpVltraZ4_YoSP_BZ6z8cZDzp8mJgefnLqr_zajZLaj_xxFAP5G1Xbm_IBpJeZvd8RO6hNYCiMJ0chvz-61p1k-vjmJgWsnfjmKtO3b65nP5qUgDp0s2HtiD0dY-f5u2ONsgCzwTdyKNiivYsoloPw-CLRGSnH6rf98eAXnJo7pvR9BGZ1Njn-2McRRMc4kFneNyNOS7BSpfAXm4ivCv31sVzxrd5nv4rnoGdGKXFGY7NdEEUw",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.4.2 Refresh access token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_token_endpoint}}",
									"host": [
										"{{as_token_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh access token - Direct (should fail)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"postman.setEnvironmentVariable(\"access_token_with_consent\", data.access_token);",
											"postman.setEnvironmentVariable(\"id_token\", data.id_token);",
											"postman.setEnvironmentVariable(\"refresh_token\", data.refresh_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "refresh_token",
											"value": "{{refresh_token}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{client_redirect_uri}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{client_credential_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{IDENTITY-PLATFORM-FQDN}}/am/oauth2/realms/root/realms/alpha/access_token",
									"protocol": "https",
									"host": [
										"{{IDENTITY-PLATFORM-FQDN}}"
									],
									"path": [
										"am",
										"oauth2",
										"realms",
										"root",
										"realms",
										"alpha",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Introspect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{access_token_with_consent}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{client_id}}",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "{{client_secret}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{as_introspection_endpoint}}",
									"host": [
										"{{as_introspection_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UserInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{as_userinfo_endpoint}}",
									"host": [
										"{{as_userinfo_endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12.5 VRP Funds Confirmation",
					"item": [
						{
							"name": "12.5.1 Get VRP Funds Confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{X-FAPI-FINANCIAL-ID}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrp-consents/{{domestic_vrp_intent_id}}/funds-confirmation",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrp-consents",
										"{{domestic_vrp_intent_id}}",
										"funds-confirmation"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12.6 TPP Submits Payment",
					"item": [
						{
							"name": "12.6.1 Submit VRP Payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"// resolve body value variables before calculate the signature, in that case to resolve {{user_debtor_account}}\r",
											"var Property = require('postman-collection').Property;\r",
											"var data = Property.replaceSubstitutions(pm.request.body.raw, pm.variables.toObject())\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Rresponse must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"var data = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"DomesticVRPId\", data.Data.DomesticVRPId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"ConsentId\": \"{{domestic_vrp_intent_id}}\",\n        \"Initiation\": {\n            \"DebtorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"01233243245676\",\n                \"Name\": \"psu4test\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"RemittanceInformation\": {\n                \"Unstructured\": \"Internal ops code 5120103\",\n                \"Reference\": \"FRESCO-037\"\n            }\n        },\n        \"Instruction\": {\n            \"EndToEndIdentification\": \"12345\",\n            \"InstructionIdentification\": \"54321\",\n            \"LocalInstrument\": \"1.85\",\n            \"CreditorAccount\": {\n                \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n                \"Identification\": \"08080021325698\",\n                \"Name\": \"Mr Tim Burgess\",\n                \"SecondaryIdentification\": \"11\"\n            },\n            \"CreditorPostalAddress\": {\n                \"AddressType\": \"Residential\",\n                \"Department\": null,\n                \"SubDepartment\": null,\n                \"StreetName\": \"The Mall\",\n                \"BuildingNumber\": \"1\",\n                \"PostCode\": \"WC1 1AB\",\n                \"TownName\": \"London\",\n                \"CountrySubDivision\": null,\n                \"Country\": \"UK\",\n                \"AddressLine\": null\n            },\n            \"InstructedAmount\": {\n                \"Amount\": \"1.85\",\n                \"Currency\": \"GBP\"\n            }\n        }\n    },\n    \"Risk\": {\n        \"PaymentContextCode\": \"Other\",\n        \"MerchantCategoryCode\": \"mct1\",\n        \"MerchantCustomerIdentification\": \"merchantId123\",\n        \"ContractPresentInidicator\": false,\n        \"BeneficiaryPrepopulatedIndicator\": false,\n        \"PaymentPurposeCode\": \"pain\",\n        \"BeneficiaryAccountType\": \"Personal\",\n        \"DeliveryAddress\": {\n            \"AddressLine\": [\n                \"60 Queens Sq\"\n            ],\n            \"StreetName\": \"Queen Square\",\n            \"BuildingNumber\": \"60\",\n            \"PostCode\": \"BS1 1AA\",\n            \"TownName\": \"Bristol\",\n            \"CountrySubDivision\": \"en\",\n            \"Country\": \"GB\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrps"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.6.2 (optional): Periodic limits breach simulation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"var navigator = {}; //fake a navigator object for the lib\r",
											"var window = {}; //fake a window object for the lib\r",
											"eval(pm.environment.get(\"jsrsasign_js\"));\r",
											"\r",
											"var privateKey = pm.environment.get('OB-SEAL-PRIVATE-KEY');\r",
											"\r",
											"var currentTimestamp = Math.floor(Date.now() / 1000 - 1000)\r",
											"var header = {\r",
											"\t'typ': 'JOSE',\r",
											"\t'alg': 'PS256',\r",
											"    \"kid\": pm.environment.get('OB-SIGNING-KEY-ID') || '',\r",
											"    'http://openbanking.org.uk/iat': currentTimestamp,\r",
											"    'http://openbanking.org.uk/iss': pm.environment.get('OB-ORGANIZATION-ID') + '/' + pm.environment.get('OB-SOFTWARE-ID'),\r",
											"    'http://openbanking.org.uk/tan': 'openbanking.org.uk',\r",
											"    'crit': [\r",
											"        'http://openbanking.org.uk/iat',\r",
											"        'http://openbanking.org.uk/iss',\r",
											"        'http://openbanking.org.uk/tan'\r",
											"    ]\r",
											"};\r",
											"\r",
											"var data = pm.environment.get('patched_domestic_vrp_consent')\r",
											"if(data==null){\r",
											"    throw new Error(\"patched_domestic_vrp_consent must not be null\")\r",
											"}\r",
											"//console.log(`header: ${ JSON.stringify(header)}`);\r",
											"\r",
											"var jwt =  KJUR.jws.JWS.sign(null, header, data, privateKey);\r",
											"console.log(\"JWT:\" + jwt);\r",
											"\r",
											"var jwtElements = jwt.split(\".\")\r",
											"var jws_signature = jwtElements[0] + \"..\" + jwtElements[2]\r",
											"\r",
											"// For investigations regading possible differences in payload, set the \"jwt\" parameter on the x-jws-signature variable in this point\r",
											"postman.setEnvironmentVariable(\"x_jws_signature\", jws_signature);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Rresponse must be 201 and have a json body\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token_with_consent}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									},
									{
										"key": "x-jws-signature",
										"value": "{{x_jws_signature}}"
									},
									{
										"key": "x-vrp-limit-breach-response-simulation",
										"value": "Month-Calendar",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{patched_domestic_vrp_consent}}"
								},
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrps"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "12.7 Data Access",
					"item": [
						{
							"name": "12.7.1 v1 Get VRP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Rresponse must be 200 and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps/{{DomesticVRPId}}",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrps",
										"{{DomesticVRPId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "12.7.2 Get VRP Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Rresponse must be 200 and have a json body\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-idempotency-key",
										"value": "{{$guid}}"
									}
								],
								"url": {
									"raw": "https://{{MTLS-IG-FQDN}}/rs/open-banking/{{API-VERSION}}/pisp/domestic-vrps/{{DomesticVRPId}}/payment-details",
									"protocol": "https",
									"host": [
										"{{MTLS-IG-FQDN}}"
									],
									"path": [
										"rs",
										"open-banking",
										"{{API-VERSION}}",
										"pisp",
										"domestic-vrps",
										"{{DomesticVRPId}}",
										"payment-details"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "Query OBIE Directory OBThirdPartyProviders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response must be a string and status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"var data = pm.response.text()",
									"console.log(\"software statement\", data)",
									"",
									"postman.setEnvironmentVariable(\"software_statement\", data);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept-encoding": true,
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/jws+json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://matls-api.openbankingtest.org.uk/scim/v2/OBThirdPartyProviders/0015800001041REAAY",
							"protocol": "https",
							"host": [
								"matls-api",
								"openbankingtest",
								"org",
								"uk"
							],
							"path": [
								"scim",
								"v2",
								"OBThirdPartyProviders",
								"0015800001041REAAY"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}